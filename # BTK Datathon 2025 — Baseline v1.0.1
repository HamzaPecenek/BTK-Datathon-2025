{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":112016,"databundleVersionId":13341508,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# =============================\n# BTK Datathon 2025 â€” Baseline v1.1\n# =============================\n\nimport os, sys, gc, math, json, warnings\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold, GroupKFold\n\nimport lightgbm as lgb\n\nwarnings.filterwarnings(\"ignore\")\n\nCFG = {\n    \"seed\": 42,\n    \"seeds\": [42, 2024, 77, 1337, 7],\n    \"cv_type\": \"group\",\n    \"use_log_target\": True,       # <-- only difference vs G1\n    \"add_user_history\": False,\n    \"add_sequence_extras\": True,\n\n    \"lgb_params\": {\n        \"objective\": \"regression\",\n        \"metric\": \"mse\",\n        \"learning_rate\": 0.045,\n        \"num_leaves\": 63,\n        \"min_data_in_leaf\": 80,\n        \"feature_fraction\": 0.85,\n        \"bagging_fraction\": 0.85,\n        \"bagging_freq\": 1,\n        \"lambda_l2\": 3.0,\n        \"max_depth\": -1,\n        \"verbosity\": -1,\n        \"force_row_wise\": True,\n        \"extra_trees\": False,\n        \"seed\": 42, \"bagging_seed\": 42, \"feature_fraction_seed\": 42,\n        \"max_bin\": 255\n    },\n\n    \"n_splits\": 3,\n    \"n_splits_group\": 5,\n    \"early_stopping_rounds\": 500,\n    \"num_boost_round\": 12000,\n\n    \"clip\": {\"floor\": 5.48, \"cap\": 2000.0},\n}\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:21:47.458170Z","iopub.execute_input":"2025-08-29T06:21:47.458436Z","iopub.status.idle":"2025-08-29T06:21:47.465444Z","shell.execute_reply.started":"2025-08-29T06:21:47.458420Z","shell.execute_reply":"2025-08-29T06:21:47.464243Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"def set_seed(seed=42):\n    np.random.seed(seed)\n\nset_seed(CFG[\"seed\"])\n\n# Kaggle input path(s)\nCANDIDATE_DIRS = [Path(\"/kaggle/input/datathon-2025\")]\n\ndef find_csv(filename: str) -> Path:\n    for d in CANDIDATE_DIRS:\n        p = d / filename\n        if p.exists():\n            return p\n    raise FileNotFoundError(f\"Could not find {filename} in {CANDIDATE_DIRS}\")\n\ntrain_path = find_csv(\"train.csv\")\ntest_path  = find_csv(\"test.csv\")\nsub_path   = find_csv(\"sample_submission.csv\")\n\nprint(train_path, test_path, sub_path)\n\n# Auto-detect time column\ndef detect_time_col(cols):\n    cand = [c for c in cols if c.lower() in (\"event_time\", \"event_timestamp\", \"timestamp\", \"time\", \"event_datetime\")]\n    if cand:\n        return cand[0]\n    cand = [c for c in cols if \"time\" in c.lower() or \"date\" in c.lower()]\n    return cand[0] if cand else None\n\ndef read_df(path):\n    df = pd.read_csv(path)\n    tcol = detect_time_col(df.columns)\n    if tcol is None:\n        raise ValueError(\"Couldn't detect a time column. Please update detect_time_col().\")\n    df[tcol] = pd.to_datetime(df[tcol], errors=\"coerce\", utc=True)\n    if tcol != \"event_time\":\n        df = df.rename(columns={tcol: \"event_time\"})\n    return df\n\ntrain = read_df(train_path)\ntest  = read_df(test_path)\nsub   = pd.read_csv(sub_path)\n\nprint(\"Shapes:\", train.shape, test.shape, sub.shape)\nprint(\"\\nTrain columns:\\n\", list(train.columns))\nprint(\"\\nTest columns:\\n\", list(test.columns))\nprint(\"\\nSubmission columns:\\n\", list(sub.columns))\n\nTARGET_COL = \"session_value\"\nassert TARGET_COL in train.columns and TARGET_COL not in test.columns, \"Target column check failed.\"\n\ndisplay(train.head(3))\ndisplay(test.head(3))\ndisplay(sub.head(3))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:21:47.474152Z","iopub.execute_input":"2025-08-29T06:21:47.474453Z","iopub.status.idle":"2025-08-29T06:21:48.158855Z","shell.execute_reply.started":"2025-08-29T06:21:47.474433Z","shell.execute_reply":"2025-08-29T06:21:48.157859Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/datathon-2025/train.csv /kaggle/input/datathon-2025/test.csv /kaggle/input/datathon-2025/sample_submission.csv\nShapes: (141219, 7) (62951, 6) (30789, 2)\n\nTrain columns:\n ['event_time', 'event_type', 'product_id', 'category_id', 'user_id', 'user_session', 'session_value']\n\nTest columns:\n ['event_time', 'event_type', 'product_id', 'category_id', 'user_id', 'user_session']\n\nSubmission columns:\n ['user_session', 'session_value']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                 event_time event_type   product_id category_id      user_id  \\\n0 2025-06-19 10:23:07+00:00   ADD_CART  PROD_011223   CAT_00054  USER_097562   \n1 2025-06-07 21:34:45+00:00   ADD_CART  PROD_005519   CAT_00144  USER_006535   \n2 2025-06-21 21:29:09+00:00   ADD_CART  PROD_000577   CAT_00273  USER_047199   \n\n     user_session  session_value  \n0  SESSION_158779          90.29  \n1  SESSION_029987          16.39  \n2  SESSION_022134          64.27  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>event_time</th>\n      <th>event_type</th>\n      <th>product_id</th>\n      <th>category_id</th>\n      <th>user_id</th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-06-19 10:23:07+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_011223</td>\n      <td>CAT_00054</td>\n      <td>USER_097562</td>\n      <td>SESSION_158779</td>\n      <td>90.29</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-06-07 21:34:45+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_005519</td>\n      <td>CAT_00144</td>\n      <td>USER_006535</td>\n      <td>SESSION_029987</td>\n      <td>16.39</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025-06-21 21:29:09+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_000577</td>\n      <td>CAT_00273</td>\n      <td>USER_047199</td>\n      <td>SESSION_022134</td>\n      <td>64.27</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"                 event_time event_type   product_id category_id      user_id  \\\n0 2025-06-28 10:09:58+00:00   ADD_CART  PROD_015000   CAT_00019  USER_109759   \n1 2025-06-25 11:57:50+00:00   ADD_CART  PROD_023887   CAT_00010  USER_010614   \n2 2025-06-30 14:34:20+00:00   ADD_CART  PROD_022673   CAT_00090  USER_041338   \n\n     user_session  \n0  SESSION_164059  \n1  SESSION_109583  \n2  SESSION_171382  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>event_time</th>\n      <th>event_type</th>\n      <th>product_id</th>\n      <th>category_id</th>\n      <th>user_id</th>\n      <th>user_session</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-06-28 10:09:58+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_015000</td>\n      <td>CAT_00019</td>\n      <td>USER_109759</td>\n      <td>SESSION_164059</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-06-25 11:57:50+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_023887</td>\n      <td>CAT_00010</td>\n      <td>USER_010614</td>\n      <td>SESSION_109583</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025-06-30 14:34:20+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_022673</td>\n      <td>CAT_00090</td>\n      <td>USER_041338</td>\n      <td>SESSION_171382</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"     user_session  session_value\n0  SESSION_164059            0.0\n1  SESSION_109583            0.0\n2  SESSION_171382            0.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SESSION_164059</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SESSION_109583</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SESSION_171382</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"before = len(train)\ntrain = train.drop_duplicates().reset_index(drop=True)\nafter = len(train)\nprint(f\"Dropped {before - after} duplicate rows from train.\")\n\n# Normalize frequent columns\nID_USER = \"user_id\"\nID_SESSION = \"user_session\"\nPRODUCT_COL = \"product_id\"\nCATEGORY_COL = \"category_id\"\nEVENT_COL = \"event_type\"\n\nexpected_cols = [ID_USER, ID_SESSION, PRODUCT_COL, CATEGORY_COL, EVENT_COL, \"event_time\"]\nfor c in expected_cols:\n    if c not in train.columns:\n        print(f\"Warning: expected column '{c}' not found in train.\")\n\n# Coerce types\nfor df in (train, test):\n    for c in [ID_USER, ID_SESSION]:\n        if c in df.columns:\n            df[c] = df[c].astype(str)\n    for c in [PRODUCT_COL, CATEGORY_COL, EVENT_COL]:\n        if c in df.columns:\n            df[c] = df[c].astype(\"category\")\n\n# Align event type categories\nif EVENT_COL in train.columns:\n    all_types = sorted(list(set(train[EVENT_COL].dropna().unique()).union(set(test[EVENT_COL].dropna().unique()))))\n    train[EVENT_COL] = train[EVENT_COL].cat.set_categories(all_types)\n    test[EVENT_COL]  = test[EVENT_COL].cat.set_categories(all_types)\nprint(\"Event types:\", train[EVENT_COL].cat.categories.tolist() if EVENT_COL in train.columns else \"N/A\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:21:48.160226Z","iopub.execute_input":"2025-08-29T06:21:48.160506Z","iopub.status.idle":"2025-08-29T06:21:48.404159Z","shell.execute_reply.started":"2025-08-29T06:21:48.160484Z","shell.execute_reply":"2025-08-29T06:21:48.402820Z"}},"outputs":[{"name":"stdout","text":"Dropped 670 duplicate rows from train.\nEvent types: ['ADD_CART', 'BUY', 'REMOVE_CART', 'VIEW']\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"# Session-level feature builder\ndef build_session_table(events: pd.DataFrame, is_train: bool) -> pd.DataFrame:\n    df = events.copy()\n    df = df.sort_values([\"user_session\", \"event_time\"]).reset_index(drop=True)\n\n    # Per-event flags\n    df[\"is_buy\"]  = (df[\"event_type\"] == \"BUY\").astype(int)\n    df[\"is_add\"]  = (df[\"event_type\"] == \"ADD_CART\").astype(int)\n    df[\"is_rem\"]  = (df[\"event_type\"] == \"REMOVE_CART\").astype(int)\n    df[\"is_view\"] = (df[\"event_type\"] == \"VIEW\").astype(int)\n\n    # Rank within session\n    df[\"ev_idx\"] = df.groupby(\"user_session\").cumcount()\n\n    # First/last event type\n    first_event = df.groupby(\"user_session\")[\"event_type\"].first().rename(\"first_event_type\")\n    last_event  = df.groupby(\"user_session\")[\"event_type\"].last().rename(\"last_event_type\")\n\n    # Start/end and duration\n    t_start = df.groupby(\"user_session\")[\"event_time\"].min().rename(\"session_start\")\n    t_end   = df.groupby(\"user_session\")[\"event_time\"].max().rename(\"session_end\")\n    duration = (t_end - t_start).dt.total_seconds().rename(\"duration_sec\")\n\n    # Counts & uniques\n    agg_counts = df.groupby(\"user_session\").agg(\n        n_events     = (\"event_type\", \"size\"),\n        n_products   = (\"product_id\", pd.Series.nunique),\n        n_categories = (\"category_id\", pd.Series.nunique),\n        n_event_types= (\"event_type\", pd.Series.nunique),\n        cnt_buy      = (\"is_buy\", \"sum\"),\n        cnt_add      = (\"is_add\", \"sum\"),\n        cnt_rem      = (\"is_rem\", \"sum\"),\n        cnt_view     = (\"is_view\", \"sum\"),\n    )\n\n    # Has buy\n    has_buy = (agg_counts[\"cnt_buy\"] > 0).astype(int).rename(\"has_buy\")\n\n    # First BUY index (or -1)\n    first_buy_idx = (\n        df[df[\"is_buy\"] == 1]\n        .groupby(\"user_session\")[\"ev_idx\"].min()\n        .reindex(agg_counts.index).fillna(-1).astype(int).rename(\"idx_first_buy\")\n    )\n\n    # Events after first BUY\n    events_after_buy = (agg_counts[\"n_events\"] - (first_buy_idx + 1)).clip(lower=0).rename(\"events_after_first_buy\")\n\n    # Adds/removes before first BUY\n    tmp = df.merge(first_buy_idx.rename(\"fb\"), left_on=\"user_session\", right_index=True, how=\"left\")\n    before_fb = tmp[\"ev_idx\"] <= tmp[\"fb\"]\n    cnt_add_before_buy = tmp.loc[before_fb, \"is_add\"].groupby(tmp[\"user_session\"]).sum().reindex(agg_counts.index).fillna(0).astype(int).rename(\"cnt_add_before_buy\")\n    cnt_rem_before_buy = tmp.loc[before_fb, \"is_rem\"].groupby(tmp[\"user_session\"]).sum().reindex(agg_counts.index).fillna(0).astype(int).rename(\"cnt_rem_before_buy\")\n\n    # Transitions\n    def count_transitions(g):\n        x = g[\"event_type\"].astype(str).values\n        if len(x) <= 1:\n            return 0\n        return int((x[1:] != x[:-1]).sum())\n    n_transitions = df.groupby(\"user_session\").apply(count_transitions).rename(\"n_transitions\")\n\n    # Time-of-day\n    start_hour = t_start.dt.hour.rename(\"start_hour\")\n    start_dow  = t_start.dt.dayofweek.rename(\"start_dow\")\n    start_day  = t_start.dt.day.rename(\"start_day\")\n\n    # Carry user_id\n    user_map = df.groupby(\"user_session\")[\"user_id\"].first().rename(\"user_id\")\n\n    # Assemble\n    sess = pd.concat(\n        [\n            t_start, t_end, duration, agg_counts,\n            has_buy, first_buy_idx, events_after_buy,\n            cnt_add_before_buy, cnt_rem_before_buy,\n            n_transitions, first_event, last_event,\n            start_hour, start_dow, start_day,\n            user_map,\n        ],\n        axis=1\n    ).reset_index()\n\n    if is_train:\n        t = df.groupby(\"user_session\")[\"session_value\"].first().reset_index()\n        sess = sess.merge(t, on=\"user_session\", how=\"left\")\n        chk = df.groupby(\"user_session\")[\"session_value\"].nunique().max()\n        if chk != 1:\n            print(\"WARNING: session_value is not constant within sessions.\")\n\n    # Cast categoricals\n    for c in [\"first_event_type\", \"last_event_type\"]:\n        if c in sess.columns:\n            sess[c] = sess[c].astype(\"category\")\n    sess[\"user_id\"] = sess[\"user_id\"].astype(str)\n    return sess\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:21:48.405141Z","iopub.execute_input":"2025-08-29T06:21:48.405432Z","iopub.status.idle":"2025-08-29T06:21:48.423862Z","shell.execute_reply.started":"2025-08-29T06:21:48.405406Z","shell.execute_reply":"2025-08-29T06:21:48.422681Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"train_sess = build_session_table(train, is_train=True)\ntest_sess  = build_session_table(test,  is_train=False)\nprint(\"Session tables rebuilt; `user_id` included.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:21:48.426659Z","iopub.execute_input":"2025-08-29T06:21:48.427000Z","iopub.status.idle":"2025-08-29T06:22:30.517152Z","shell.execute_reply.started":"2025-08-29T06:21:48.426980Z","shell.execute_reply":"2025-08-29T06:22:30.515807Z"}},"outputs":[{"name":"stdout","text":"Session tables rebuilt; `user_id` included.\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"def add_user_history(train_sess: pd.DataFrame, test_sess: pd.DataFrame):\n    comb = pd.concat(\n        [train_sess.assign(_is_train=1), test_sess.assign(_is_train=0, **{TARGET_COL: np.nan})],\n        axis=0, ignore_index=True\n    ).sort_values([\"user_id\", \"session_start\"]).reset_index(drop=True)\n\n    # 1) Prior # sessions\n    comb[\"user_prev_n_sessions\"] = comb.groupby(\"user_id\").cumcount()\n\n    # 2) Prior buy-rate\n    g = comb.groupby(\"user_id\", sort=False)\n    pos = g.cumcount() + 1\n    prev_cnt = pos - 1\n    cum_sum_buy = g[\"has_buy\"].cumsum()\n    prev_sum_buy = cum_sum_buy - comb[\"has_buy\"]\n    comb[\"user_prev_buy_rate\"] = np.divide(\n        prev_sum_buy.astype(float), prev_cnt,\n        out=np.zeros_like(prev_sum_buy, dtype=float), where=prev_cnt > 0\n    )\n\n    # 3) Prior mean(session_value) with global backoff\n    comb[\"sv_notna\"]  = comb[TARGET_COL].notna().astype(int)\n    comb[\"sv_filled\"] = comb[TARGET_COL].fillna(0.0)\n    comb[\"cum_sum_sv\"] = g[\"sv_filled\"].cumsum()\n    comb[\"cum_cnt_sv\"] = g[\"sv_notna\"].cumsum()\n    prev_sum_sv = comb[\"cum_sum_sv\"] - comb[\"sv_filled\"]\n    prev_cnt_sv = comb[\"cum_cnt_sv\"] - comb[\"sv_notna\"]\n    prev_mean_sv = np.divide(\n        prev_sum_sv, prev_cnt_sv,\n        out=np.full(len(prev_sum_sv), np.nan, dtype=float), where=prev_cnt_sv > 0\n    )\n    global_mean_sv = float(train_sess[TARGET_COL].mean())\n    comb[\"user_prev_mean_sv\"] = np.where(np.isnan(prev_mean_sv), global_mean_sv, prev_mean_sv)\n\n    comb = comb.drop(columns=[\"sv_notna\",\"sv_filled\",\"cum_sum_sv\",\"cum_cnt_sv\"])\n\n    train_hist = comb[comb[\"_is_train\"] == 1].drop(columns=[\"_is_train\"])\n    test_hist  = comb[comb[\"_is_train\"] == 0].drop(columns=[\"_is_train\"])\n\n    for df in (train_hist, test_hist):\n        df[\"user_prev_n_sessions\"] = df[\"user_prev_n_sessions\"].astype(int)\n        df[\"user_prev_buy_rate\"]   = df[\"user_prev_buy_rate\"].astype(float)\n        df[\"user_prev_mean_sv\"]    = df[\"user_prev_mean_sv\"].astype(float)\n\n    return train_hist, test_hist\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:22:30.518002Z","iopub.execute_input":"2025-08-29T06:22:30.518355Z","iopub.status.idle":"2025-08-29T06:22:30.533564Z","shell.execute_reply.started":"2025-08-29T06:22:30.518325Z","shell.execute_reply":"2025-08-29T06:22:30.532289Z"}},"outputs":[],"execution_count":35},{"cell_type":"code","source":"if CFG[\"add_user_history\"]:\n    train_sess, test_sess = add_user_history(train_sess, test_sess)\n    print(\"Added user history features.\")\n    display(train_sess.filter(like=\"user_prev\").head(3))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:22:30.534397Z","iopub.execute_input":"2025-08-29T06:22:30.534631Z","iopub.status.idle":"2025-08-29T06:22:30.582840Z","shell.execute_reply.started":"2025-08-29T06:22:30.534607Z","shell.execute_reply":"2025-08-29T06:22:30.581766Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"# Low-risk numeric enrichments (log1p + simple rates)\ndef enrich_small_features(df: pd.DataFrame) -> pd.DataFrame:\n    eps = 1e-6\n    for c in [\"n_events\", \"n_products\", \"n_categories\", \"duration_sec\",\n              \"cnt_buy\", \"cnt_add\", \"cnt_rem\", \"cnt_view\"]:\n        if c in df:\n            df[f\"log1p_{c}\"] = np.log1p(df[c].astype(float))\n\n    if \"n_events\" in df:\n        denom_ev = df[\"n_events\"].clip(lower=1).astype(float)\n        if \"cnt_add\" in df: df[\"rate_add_per_event\"] = df[\"cnt_add\"] / denom_ev\n        if \"cnt_rem\" in df: df[\"rate_rem_per_event\"] = df[\"cnt_rem\"] / denom_ev\n        if \"cnt_buy\" in df: df[\"rate_buy_per_event\"] = df[\"cnt_buy\"] / denom_ev\n\n    if \"duration_sec\" in df and \"n_events\" in df:\n        df[\"events_per_min\"] = df[\"n_events\"] / (df[\"duration_sec\"] / 60.0 + eps)\n    return df\n\ntrain_sess = enrich_small_features(train_sess)\ntest_sess  = enrich_small_features(test_sess)\n\n# Feature columns\ncategorical_cols = [\"first_event_type\", \"last_event_type\"]\nnumeric_cols = [\n    \"n_events\", \"n_products\", \"n_categories\", \"n_event_types\",\n    \"cnt_buy\", \"cnt_add\", \"cnt_rem\", \"cnt_view\",\n    \"duration_sec\", \"has_buy\", \"idx_first_buy\", \"events_after_first_buy\",\n    \"cnt_add_before_buy\", \"cnt_rem_before_buy\", \"n_transitions\",\n    \"start_hour\", \"start_dow\", \"start_day\",\n]\nif CFG[\"add_user_history\"]:\n    numeric_cols += [\"user_prev_n_sessions\", \"user_prev_buy_rate\", \"user_prev_mean_sv\"]\n\n# add enrichments\nextra_feats = [\n    *(f\"log1p_{c}\" for c in [\"n_events\",\"n_products\",\"n_categories\",\"duration_sec\",\"cnt_buy\",\"cnt_add\",\"cnt_rem\",\"cnt_view\"]),\n    \"rate_add_per_event\",\"rate_rem_per_event\",\"rate_buy_per_event\",\"events_per_min\"\n]\nnumeric_cols += [c for c in extra_feats if c in train_sess.columns]\n\n# ensure existence\ncategorical_cols = [c for c in categorical_cols if c in train_sess.columns]\nnumeric_cols = [c for c in numeric_cols if c in train_sess.columns]\nFEATS = categorical_cols + numeric_cols\n\nprint(\"Num features:\", len(FEATS))\nprint(\"Categorical:\", categorical_cols)\nprint(\"Numeric:\", [c for c in FEATS if c not in categorical_cols])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:22:30.584041Z","iopub.execute_input":"2025-08-29T06:22:30.584396Z","iopub.status.idle":"2025-08-29T06:22:30.656858Z","shell.execute_reply.started":"2025-08-29T06:22:30.584371Z","shell.execute_reply":"2025-08-29T06:22:30.655711Z"}},"outputs":[{"name":"stdout","text":"Num features: 32\nCategorical: ['first_event_type', 'last_event_type']\nNumeric: ['n_events', 'n_products', 'n_categories', 'n_event_types', 'cnt_buy', 'cnt_add', 'cnt_rem', 'cnt_view', 'duration_sec', 'has_buy', 'idx_first_buy', 'events_after_first_buy', 'cnt_add_before_buy', 'cnt_rem_before_buy', 'n_transitions', 'start_hour', 'start_dow', 'start_day', 'log1p_n_events', 'log1p_n_products', 'log1p_n_categories', 'log1p_duration_sec', 'log1p_cnt_buy', 'log1p_cnt_add', 'log1p_cnt_rem', 'log1p_cnt_view', 'rate_add_per_event', 'rate_rem_per_event', 'rate_buy_per_event', 'events_per_min']\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"# Target\nif CFG[\"use_log_target\"]:\n    train_sess[\"target\"] = np.log1p(train_sess[TARGET_COL].clip(lower=0))\nelse:\n    train_sess[\"target\"] = train_sess[TARGET_COL].astype(float)\n\n# Categorical dtype for LightGBM\nfor c in categorical_cols:\n    train_sess[c] = train_sess[c].astype(\"category\")\n    test_sess[c]  = test_sess[c].astype(\"category\")\n\nX = train_sess[FEATS].copy()\ny = train_sess[\"target\"].values\nX_test = test_sess[FEATS].copy()\n\n# label-aligned series\ny_s = pd.Series(train_sess[\"target\"].values, index=X.index)\n\nX.shape, X_test.shape\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:22:30.658243Z","iopub.execute_input":"2025-08-29T06:22:30.658750Z","iopub.status.idle":"2025-08-29T06:22:30.702773Z","shell.execute_reply.started":"2025-08-29T06:22:30.658640Z","shell.execute_reply":"2025-08-29T06:22:30.700982Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"((70736, 32), (30789, 32))"},"metadata":{}}],"execution_count":38},{"cell_type":"code","source":"def make_time_folds(df: pd.DataFrame, n_splits=3, date_col=\"session_start\"):\n    df_sorted = df.sort_values(date_col).reset_index()\n    n = len(df_sorted)\n    fold_sizes = [n // n_splits] * n_splits\n    for i in range(n % n_splits):\n        fold_sizes[i] += 1\n    idxs, start = [], 0\n    for fs in fold_sizes:\n        end = start + fs\n        idxs.append(df_sorted.loc[start:end-1, \"index\"].values)\n        start = end\n    folds = []\n    for i in range(n_splits):\n        val_idx = idxs[i]\n        tr_idx = np.concatenate([idxs[j] for j in range(n_splits) if j != i])\n        folds.append((tr_idx, val_idx))\n    return folds\n\ndef make_group_folds(df: pd.DataFrame, n_splits=5, group_col=\"user_id\"):\n    idx = np.arange(len(df))\n    gkf = GroupKFold(n_splits=n_splits)\n    return [(tr, va) for tr, va in gkf.split(idx, groups=df[group_col].values)]\n\n# quick view of time-fold windows (unchanged)\nfolds_preview = make_time_folds(train_sess, n_splits=CFG[\"n_splits\"], date_col=\"session_start\")\nfor i, (_, va) in enumerate(folds_preview):\n    d1 = train_sess.loc[va, \"session_start\"].min()\n    d2 = train_sess.loc[va, \"session_start\"].max()\n    print(f\"Time Fold {i}: val window {d1} â†’ {d2}, size={len(va)}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:22:30.704179Z","iopub.execute_input":"2025-08-29T06:22:30.705591Z","iopub.status.idle":"2025-08-29T06:22:30.799243Z","shell.execute_reply.started":"2025-08-29T06:22:30.704767Z","shell.execute_reply":"2025-08-29T06:22:30.798279Z"}},"outputs":[{"name":"stdout","text":"Time Fold 0: val window 2025-06-01 00:00:24+00:00 â†’ 2025-06-07 03:06:40+00:00, size=23579\nTime Fold 1: val window 2025-06-07 03:06:51+00:00 â†’ 2025-06-14 09:07:02+00:00, size=23579\nTime Fold 2: val window 2025-06-14 09:07:35+00:00 â†’ 2025-06-21 23:58:05+00:00, size=23578\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"# ==== FIXED Cell 11: multi-seed, CV realism, with index â†’ position mapping ====\noof_all = np.zeros(len(X), dtype=float)\ntest_preds_seeds = []\nfeat_imps = []\n\nglobal_mean_sv = float(train_sess[TARGET_COL].mean())\nX_index = pd.Index(X.index)  # to map label indices to positions\n\nfor seed in CFG[\"seeds\"]:\n    lgb_params = CFG[\"lgb_params\"].copy()\n    lgb_params.update({\"seed\": seed, \"bagging_seed\": seed, \"feature_fraction_seed\": seed})\n    set_seed(seed)\n\n    if CFG[\"cv_type\"] == \"time\":\n        folds = make_time_folds(train_sess, n_splits=CFG[\"n_splits\"], date_col=\"session_start\")\n    else:\n        folds = make_group_folds(train_sess, n_splits=CFG[\"n_splits_group\"], group_col=\"user_id\")\n\n    oof_seed = np.zeros(len(X), dtype=float)\n    best_iters = []\n\n    for i, (tr_idx, va_idx) in enumerate(folds):\n        # Map label indices -> positional indices for any ndarray assignments\n        tr_pos = X_index.get_indexer(tr_idx)\n        va_pos = X_index.get_indexer(va_idx)\n\n        # Guard: no missing labels (-1) and all within bounds\n        if (tr_pos < 0).any() or (va_pos < 0).any():\n            raise ValueError(f\"Fold {i}: found indices not present in X.index. \"\n                             f\"Try resetting indices before building folds.\")\n        if (va_pos >= len(X)).any() or (tr_pos >= len(X)).any():\n            raise ValueError(f\"Fold {i}: positional indices out of bounds.\")\n\n        # Use .iloc with positions for safety; .loc with labels would also work\n        X_tr, y_tr = X.iloc[tr_pos], y_s.iloc[tr_pos].values\n        X_va, y_va = X.iloc[va_pos], y_s.iloc[va_pos].values\n\n        # Group CV realism: neutralize user history for val users (simulate unseen)\n        if CFG[\"cv_type\"] != \"time\":\n            X_va = X_va.copy()\n            if \"user_prev_mean_sv\" in X_va: X_va[\"user_prev_mean_sv\"] = global_mean_sv\n            if \"user_prev_buy_rate\" in X_va: X_va[\"user_prev_buy_rate\"] = 0.0\n            if \"user_prev_n_sessions\" in X_va: X_va[\"user_prev_n_sessions\"] = 0\n\n        lgb_train = lgb.Dataset(X_tr, label=y_tr, categorical_feature=categorical_cols, free_raw_data=False)\n        lgb_valid = lgb.Dataset(X_va, label=y_va, categorical_feature=categorical_cols, free_raw_data=False)\n\n        model = lgb.train(\n            lgb_params, lgb_train,\n            num_boost_round=CFG[\"num_boost_round\"],\n            valid_sets=[lgb_train, lgb_valid],\n            valid_names=[\"train\", \"valid\"],\n            callbacks=[lgb.early_stopping(CFG[\"early_stopping_rounds\"], verbose=False)]\n        )\n        best_iters.append(model.best_iteration)\n\n        pred_va = model.predict(X_va, num_iteration=model.best_iteration)\n        if CFG[\"use_log_target\"]:\n            pred_va = np.expm1(pred_va).clip(min=0)\n\n        # Apply the same post-process as test-time\n        pred_va = np.clip(pred_va, CFG[\"clip\"][\"floor\"], CFG[\"clip\"][\"cap\"])\n\n        # <<< KEY FIX: assign via positional indices >>>\n        oof_seed[va_pos] = pred_va\n\n        fi = pd.DataFrame({\n            \"feature\": FEATS,\n            \"gain\": model.feature_importance(importance_type=\"gain\"),\n            \"split\": model.feature_importance(importance_type=\"split\"),\n            \"fold\": i,\n            \"seed\": seed,\n        })\n        feat_imps.append(fi)\n\n        print(f\"[seed {seed}] Fold {i}: best_iter={model.best_iteration}, val_size={len(va_pos)}\")\n\n    oof_all += oof_seed / len(CFG[\"seeds\"])\n\n    full_iters = int(np.mean(best_iters))\n    full_ds = lgb.Dataset(X, label=y_s.values, categorical_feature=categorical_cols, free_raw_data=False)\n    full_model = lgb.train(lgb_params, full_ds, num_boost_round=full_iters)\n\n    pred_test = full_model.predict(X_test)\n    if CFG[\"use_log_target\"]:\n        pred_test = np.expm1(pred_test).clip(min=0)\n    pred_test = np.clip(pred_test, CFG[\"clip\"][\"floor\"], CFG[\"clip\"][\"cap\"])\n    test_preds_seeds.append(pred_test)\n\n# OOF MSE on raw scale\nif CFG[\"use_log_target\"]:\n    y_raw = np.expm1(y_s.values)\n    oof_mse = mean_squared_error(y_raw, oof_all)\nelse:\n    oof_mse = mean_squared_error(y_s.values, oof_all)\nprint(f\"OOF MSE (post-processed): {oof_mse:,.4f}\")\n\nfeat_importance = (\n    pd.concat(feat_imps, ignore_index=True)\n      .groupby(\"feature\")[[\"gain\",\"split\"]].mean()\n      .sort_values(\"gain\", ascending=False).reset_index()\n)\ndisplay(feat_importance.head(30))\n\ntest_pred = np.mean(test_preds_seeds, axis=0)\nprint(\"Pred summary (post-processed):\")\ndisplay(pd.Series(test_pred).describe())\n\noof = oof_all\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:22:30.802174Z","iopub.execute_input":"2025-08-29T06:22:30.802463Z","iopub.status.idle":"2025-08-29T06:24:56.649246Z","shell.execute_reply.started":"2025-08-29T06:22:30.802447Z","shell.execute_reply":"2025-08-29T06:24:56.648324Z"}},"outputs":[{"name":"stdout","text":"[seed 42] Fold 0: best_iter=154, val_size=14148\n[seed 42] Fold 1: best_iter=120, val_size=14147\n[seed 42] Fold 2: best_iter=142, val_size=14147\n[seed 42] Fold 3: best_iter=160, val_size=14147\n[seed 42] Fold 4: best_iter=129, val_size=14147\n[seed 2024] Fold 0: best_iter=165, val_size=14148\n[seed 2024] Fold 1: best_iter=125, val_size=14147\n[seed 2024] Fold 2: best_iter=128, val_size=14147\n[seed 2024] Fold 3: best_iter=161, val_size=14147\n[seed 2024] Fold 4: best_iter=136, val_size=14147\n[seed 77] Fold 0: best_iter=164, val_size=14148\n[seed 77] Fold 1: best_iter=125, val_size=14147\n[seed 77] Fold 2: best_iter=136, val_size=14147\n[seed 77] Fold 3: best_iter=164, val_size=14147\n[seed 77] Fold 4: best_iter=138, val_size=14147\n[seed 1337] Fold 0: best_iter=186, val_size=14148\n[seed 1337] Fold 1: best_iter=117, val_size=14147\n[seed 1337] Fold 2: best_iter=136, val_size=14147\n[seed 1337] Fold 3: best_iter=159, val_size=14147\n[seed 1337] Fold 4: best_iter=127, val_size=14147\n[seed 7] Fold 0: best_iter=167, val_size=14148\n[seed 7] Fold 1: best_iter=124, val_size=14147\n[seed 7] Fold 2: best_iter=161, val_size=14147\n[seed 7] Fold 3: best_iter=169, val_size=14147\n[seed 7] Fold 4: best_iter=130, val_size=14147\nOOF MSE (post-processed): 428.4013\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                   feature           gain    split\n0                  cnt_buy  118147.724329   169.48\n1                  cnt_add   27485.576024   227.40\n2               start_hour   12663.558860  1522.56\n3                  has_buy   11516.091876    10.68\n4            idx_first_buy    7893.194390    16.92\n5       rate_rem_per_event    7036.609097   485.64\n6                start_dow    4877.270964   932.40\n7               n_products    3975.003355   348.12\n8            log1p_cnt_add    3643.196992    31.92\n9                start_day    2770.000355  1118.00\n10            n_categories    2633.832540   427.76\n11           log1p_cnt_buy    2098.768303    13.92\n12            duration_sec    1931.561979  1049.08\n13                n_events    1481.737854   217.40\n14                cnt_view    1411.058575   208.88\n15          events_per_min    1293.143442   891.00\n16      rate_add_per_event    1215.945793   197.04\n17  events_after_first_buy    1205.874496   132.16\n18        first_event_type     653.003576   112.60\n19        log1p_n_products     618.739938    61.00\n20         last_event_type     526.672711   126.52\n21      log1p_n_categories     404.929558    67.92\n22      log1p_duration_sec     292.822621   188.52\n23                 cnt_rem     273.772945   110.36\n24          log1p_cnt_view     256.986768    31.44\n25           n_event_types     223.961932   106.08\n26           n_transitions     158.533446    66.84\n27      rate_buy_per_event      80.612660    46.16\n28      cnt_add_before_buy      74.400911    31.48\n29          log1p_n_events      69.552590    17.52","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>feature</th>\n      <th>gain</th>\n      <th>split</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>cnt_buy</td>\n      <td>118147.724329</td>\n      <td>169.48</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>cnt_add</td>\n      <td>27485.576024</td>\n      <td>227.40</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>start_hour</td>\n      <td>12663.558860</td>\n      <td>1522.56</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>has_buy</td>\n      <td>11516.091876</td>\n      <td>10.68</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>idx_first_buy</td>\n      <td>7893.194390</td>\n      <td>16.92</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>rate_rem_per_event</td>\n      <td>7036.609097</td>\n      <td>485.64</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>start_dow</td>\n      <td>4877.270964</td>\n      <td>932.40</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>n_products</td>\n      <td>3975.003355</td>\n      <td>348.12</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>log1p_cnt_add</td>\n      <td>3643.196992</td>\n      <td>31.92</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>start_day</td>\n      <td>2770.000355</td>\n      <td>1118.00</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>n_categories</td>\n      <td>2633.832540</td>\n      <td>427.76</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>log1p_cnt_buy</td>\n      <td>2098.768303</td>\n      <td>13.92</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>duration_sec</td>\n      <td>1931.561979</td>\n      <td>1049.08</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>n_events</td>\n      <td>1481.737854</td>\n      <td>217.40</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>cnt_view</td>\n      <td>1411.058575</td>\n      <td>208.88</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>events_per_min</td>\n      <td>1293.143442</td>\n      <td>891.00</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>rate_add_per_event</td>\n      <td>1215.945793</td>\n      <td>197.04</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>events_after_first_buy</td>\n      <td>1205.874496</td>\n      <td>132.16</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>first_event_type</td>\n      <td>653.003576</td>\n      <td>112.60</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>log1p_n_products</td>\n      <td>618.739938</td>\n      <td>61.00</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>last_event_type</td>\n      <td>526.672711</td>\n      <td>126.52</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>log1p_n_categories</td>\n      <td>404.929558</td>\n      <td>67.92</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>log1p_duration_sec</td>\n      <td>292.822621</td>\n      <td>188.52</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>cnt_rem</td>\n      <td>273.772945</td>\n      <td>110.36</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>log1p_cnt_view</td>\n      <td>256.986768</td>\n      <td>31.44</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>n_event_types</td>\n      <td>223.961932</td>\n      <td>106.08</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>n_transitions</td>\n      <td>158.533446</td>\n      <td>66.84</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>rate_buy_per_event</td>\n      <td>80.612660</td>\n      <td>46.16</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>cnt_add_before_buy</td>\n      <td>74.400911</td>\n      <td>31.48</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>log1p_n_events</td>\n      <td>69.552590</td>\n      <td>17.52</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"Pred summary (post-processed):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"count    30789.000000\nmean        40.555455\nstd         42.228818\nmin          8.507560\n25%         21.510219\n50%         26.397129\n75%         38.402050\nmax        686.888508\ndtype: float64"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"# Expect submission format: [\"user_session\", \"session_value\"]\nsub_out = sub.copy()\nkey = \"user_session\"\n\n# Map predictions by user_session (test_sess has one row per session)\npred_map = dict(zip(test_sess[key], test_pred))\nsub_out[TARGET_COL] = sub_out[key].map(pred_map).fillna(CFG[\"clip\"][\"floor\"])\n\nsave_name = \"submission_baseline_v1_0_2.csv\"\nsub_out.to_csv(save_name, index=False)\nprint(\"Saved:\", save_name)\ndisplay(sub_out.head(5))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:24:56.650719Z","iopub.execute_input":"2025-08-29T06:24:56.651083Z","iopub.status.idle":"2025-08-29T06:24:56.758900Z","shell.execute_reply.started":"2025-08-29T06:24:56.651058Z","shell.execute_reply":"2025-08-29T06:24:56.757958Z"}},"outputs":[{"name":"stdout","text":"Saved: submission_baseline_v1_0_2.csv\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"     user_session  session_value\n0  SESSION_164059     184.072092\n1  SESSION_109583      45.671214\n2  SESSION_171382      40.260957\n3  SESSION_137110      30.228362\n4  SESSION_146503     180.471886","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SESSION_164059</td>\n      <td>184.072092</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SESSION_109583</td>\n      <td>45.671214</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SESSION_171382</td>\n      <td>40.260957</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SESSION_137110</td>\n      <td>30.228362</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SESSION_146503</td>\n      <td>180.471886</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"# OOF vs target summary (raw scale)\nif CFG[\"use_log_target\"]:\n    y_raw = np.expm1(y_s.values).clip(min=0)\n    print(\"OOF MSE (raw):\", mean_squared_error(y_raw, oof))\n    display(pd.DataFrame({\"y\": y_raw, \"oof\": oof}).describe())\nelse:\n    print(\"OOF MSE (raw):\", mean_squared_error(y_s.values, oof))\n    display(pd.DataFrame({\"y\": y_s.values, \"oof\": oof}).describe())\n\n# Per-day MSE to spot drift\ntmp = train_sess.assign(y=y_s.values, oof=oof)\nday_mse = tmp.groupby(tmp[\"session_start\"].dt.date).apply(lambda d: mean_squared_error(d[\"y\"], d[\"oof\"]))\ndisplay(day_mse.to_frame(\"mse\").reset_index().rename(columns={\"session_start\":\"date\"}).head(20))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-29T06:24:56.759765Z","iopub.execute_input":"2025-08-29T06:24:56.760035Z","iopub.status.idle":"2025-08-29T06:24:56.861411Z","shell.execute_reply.started":"2025-08-29T06:24:56.760013Z","shell.execute_reply":"2025-08-29T06:24:56.859999Z"}},"outputs":[{"name":"stdout","text":"OOF MSE (raw): 428.4013231662066\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                  y           oof\ncount  70736.000000  70736.000000\nmean      42.198130     39.334875\nstd       47.552369     41.403757\nmin        5.380000      8.258565\n25%       18.530000     21.003491\n50%       30.750000     26.144509\n75%       46.620000     37.432901\nmax     2328.660000    664.071560","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>y</th>\n      <th>oof</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>70736.000000</td>\n      <td>70736.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>42.198130</td>\n      <td>39.334875</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>47.552369</td>\n      <td>41.403757</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>5.380000</td>\n      <td>8.258565</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>18.530000</td>\n      <td>21.003491</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>30.750000</td>\n      <td>26.144509</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>46.620000</td>\n      <td>37.432901</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2328.660000</td>\n      <td>664.071560</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"          date          mse\n0   2025-06-01  3934.251421\n1   2025-06-02  2726.517686\n2   2025-06-03  3671.149483\n3   2025-06-04  3261.889518\n4   2025-06-05  2924.131365\n5   2025-06-06  2200.796780\n6   2025-06-07  2513.116460\n7   2025-06-08  2831.229890\n8   2025-06-09  3213.574116\n9   2025-06-10  3161.971111\n10  2025-06-11  2737.895457\n11  2025-06-12  3023.721788\n12  2025-06-13  2957.465008\n13  2025-06-14  2772.234936\n14  2025-06-15  3467.456973\n15  2025-06-16  3245.737410\n16  2025-06-17  3210.314066\n17  2025-06-18  2892.684228\n18  2025-06-19  2530.679053\n19  2025-06-20  2906.575852","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>mse</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-06-01</td>\n      <td>3934.251421</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-06-02</td>\n      <td>2726.517686</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025-06-03</td>\n      <td>3671.149483</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2025-06-04</td>\n      <td>3261.889518</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2025-06-05</td>\n      <td>2924.131365</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2025-06-06</td>\n      <td>2200.796780</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2025-06-07</td>\n      <td>2513.116460</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2025-06-08</td>\n      <td>2831.229890</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2025-06-09</td>\n      <td>3213.574116</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2025-06-10</td>\n      <td>3161.971111</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2025-06-11</td>\n      <td>2737.895457</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2025-06-12</td>\n      <td>3023.721788</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>2025-06-13</td>\n      <td>2957.465008</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>2025-06-14</td>\n      <td>2772.234936</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>2025-06-15</td>\n      <td>3467.456973</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>2025-06-16</td>\n      <td>3245.737410</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>2025-06-17</td>\n      <td>3210.314066</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>2025-06-18</td>\n      <td>2892.684228</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>2025-06-19</td>\n      <td>2530.679053</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>2025-06-20</td>\n      <td>2906.575852</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":42},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}