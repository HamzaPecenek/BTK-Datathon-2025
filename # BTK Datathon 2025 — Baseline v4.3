{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":112016,"databundleVersionId":13341508,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Cell 1 — Setup & Imports\n\nimport os, sys, gc, math, warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n\nfrom catboost import CatBoostRegressor, Pool\nimport matplotlib.pyplot as plt\nplt.switch_backend(\"agg\")  # prevents display issues on some Kaggle runtimes\n\nSEED = 42\nrng = np.random.default_rng(SEED)\n\npd.set_option(\"display.max_columns\", 200)\npd.set_option(\"display.width\", 200)\n\nprint(\"Versions -> pandas:\", pd.__version__)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:03:39.203381Z","iopub.execute_input":"2025-08-27T15:03:39.203685Z","iopub.status.idle":"2025-08-27T15:03:40.894479Z","shell.execute_reply.started":"2025-08-27T15:03:39.203664Z","shell.execute_reply":"2025-08-27T15:03:40.893178Z"}},"outputs":[{"name":"stdout","text":"Versions -> pandas: 2.2.3\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"# Cell 2 — File I/O Helpers & Paths\n\ndef try_read_csv(candidates):\n    for p in candidates:\n        if os.path.exists(p):\n            try:\n                df = pd.read_csv(p)\n                print(f\"Loaded: {p} -> shape={df.shape}\")\n                return df, p\n            except Exception as e:\n                print(f\"Tried {p} but failed: {e}\")\n    raise FileNotFoundError(\"Could not find CSV in any of the candidate paths.\")\n\n# Common Kaggle-style guesses; adjust the dataset folder if needed.\nDATA_DIRS = [\n    \".\", \"/kaggle/input\", \"/kaggle/working\",\n    \"/kaggle/input/datathon-2025\",  # <-- if your dataset folder has this name\n    \"/kaggle/input/btk-datathon-2025-eda\",  # extra guess\n]\n\ndef cands(name):\n    return [os.path.join(d, name) for d in DATA_DIRS]\n\ntrain, TRAIN_PATH = try_read_csv(cands(\"train.csv\"))\ntest,  TEST_PATH  = try_read_csv(cands(\"test.csv\"))\nss,    SS_PATH    = try_read_csv(cands(\"sample_submission.csv\"))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:03:42.931937Z","iopub.execute_input":"2025-08-27T15:03:42.932492Z","iopub.status.idle":"2025-08-27T15:03:43.817935Z","shell.execute_reply.started":"2025-08-27T15:03:42.932455Z","shell.execute_reply":"2025-08-27T15:03:43.816744Z"}},"outputs":[{"name":"stdout","text":"Loaded: /kaggle/input/datathon-2025/train.csv -> shape=(141219, 7)\nLoaded: /kaggle/input/datathon-2025/test.csv -> shape=(62951, 6)\nLoaded: /kaggle/input/datathon-2025/sample_submission.csv -> shape=(30789, 2)\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"# Cell 3 — Quick Peek\n\ndisplay(train.head(3))\ndisplay(train.tail(3))\nprint(\"\\nTrain info:\")\nprint(train.info())\n\nprint(\"\\nTest columns:\", list(test.columns))\nprint(\"SampleSubmission columns:\", list(ss.columns))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:03:53.390074Z","iopub.execute_input":"2025-08-27T15:03:53.390504Z","iopub.status.idle":"2025-08-27T15:03:53.513599Z","shell.execute_reply.started":"2025-08-27T15:03:53.390474Z","shell.execute_reply":"2025-08-27T15:03:53.512106Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"                  event_time event_type   product_id category_id      user_id    user_session  session_value\n0  2025-06-19 10:23:07+00:00   ADD_CART  PROD_011223   CAT_00054  USER_097562  SESSION_158779          90.29\n1  2025-06-07 21:34:45+00:00   ADD_CART  PROD_005519   CAT_00144  USER_006535  SESSION_029987          16.39\n2  2025-06-21 21:29:09+00:00   ADD_CART  PROD_000577   CAT_00273  USER_047199  SESSION_022134          64.27","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>event_time</th>\n      <th>event_type</th>\n      <th>product_id</th>\n      <th>category_id</th>\n      <th>user_id</th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-06-19 10:23:07+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_011223</td>\n      <td>CAT_00054</td>\n      <td>USER_097562</td>\n      <td>SESSION_158779</td>\n      <td>90.29</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-06-07 21:34:45+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_005519</td>\n      <td>CAT_00144</td>\n      <td>USER_006535</td>\n      <td>SESSION_029987</td>\n      <td>16.39</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025-06-21 21:29:09+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_000577</td>\n      <td>CAT_00273</td>\n      <td>USER_047199</td>\n      <td>SESSION_022134</td>\n      <td>64.27</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"                       event_time event_type   product_id category_id      user_id    user_session  session_value\n141216  2025-06-07 09:21:08+00:00        BUY  PROD_002575   CAT_00030  USER_038679  SESSION_177107          73.35\n141217  2025-06-16 20:15:38+00:00        BUY  PROD_000500   CAT_00062  USER_019663  SESSION_019029         378.94\n141218  2025-06-13 08:05:33+00:00        BUY  PROD_027520   CAT_00250  USER_046848  SESSION_077215          85.02","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>event_time</th>\n      <th>event_type</th>\n      <th>product_id</th>\n      <th>category_id</th>\n      <th>user_id</th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>141216</th>\n      <td>2025-06-07 09:21:08+00:00</td>\n      <td>BUY</td>\n      <td>PROD_002575</td>\n      <td>CAT_00030</td>\n      <td>USER_038679</td>\n      <td>SESSION_177107</td>\n      <td>73.35</td>\n    </tr>\n    <tr>\n      <th>141217</th>\n      <td>2025-06-16 20:15:38+00:00</td>\n      <td>BUY</td>\n      <td>PROD_000500</td>\n      <td>CAT_00062</td>\n      <td>USER_019663</td>\n      <td>SESSION_019029</td>\n      <td>378.94</td>\n    </tr>\n    <tr>\n      <th>141218</th>\n      <td>2025-06-13 08:05:33+00:00</td>\n      <td>BUY</td>\n      <td>PROD_027520</td>\n      <td>CAT_00250</td>\n      <td>USER_046848</td>\n      <td>SESSION_077215</td>\n      <td>85.02</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"\nTrain info:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 141219 entries, 0 to 141218\nData columns (total 7 columns):\n #   Column         Non-Null Count   Dtype  \n---  ------         --------------   -----  \n 0   event_time     141219 non-null  object \n 1   event_type     141219 non-null  object \n 2   product_id     141219 non-null  object \n 3   category_id    141219 non-null  object \n 4   user_id        141219 non-null  object \n 5   user_session   141219 non-null  object \n 6   session_value  141219 non-null  float64\ndtypes: float64(1), object(6)\nmemory usage: 7.5+ MB\nNone\n\nTest columns: ['event_time', 'event_type', 'product_id', 'category_id', 'user_id', 'user_session']\nSampleSubmission columns: ['user_session', 'session_value']\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# Cell 4 — Target, Groups, Basic Sanity\n\n# Set your target column here (edit if your competition uses another name)\nTARGET = \"session_value\"\n\n# Auto-fallback if the exact name differs (tries to find a numeric target in train but not in test)\nif TARGET not in train.columns:\n    likely_targets = [c for c in train.columns if c not in test.columns and pd.api.types.is_numeric_dtype(train[c])]\n    if len(likely_targets) == 1:\n        TARGET = likely_targets[0]\n        print(f\"[Info] TARGET inferred as '{TARGET}'\")\n    else:\n        raise KeyError(f\"TARGET '{TARGET}' not found. Candidates: {likely_targets}\")\n\n# Group column\nGROUP_COL = \"user_id\"\nif GROUP_COL not in train.columns:\n    # Fallback: try to find an id-like group column shared with test\n    for cand in [\"customer_id\", \"uid\", \"UserId\", \"userID\"]:\n        if cand in train.columns:\n            GROUP_COL = cand\n            print(f\"[Info] GROUP_COL inferred as '{GROUP_COL}'\")\n            break\n    else:\n        print(\"[Warn] 'user_id' not found; using a single group for all rows.\")\n        train[\"_single_group_\"] = 0\n        GROUP_COL = \"_single_group_\"\n\n# Quick target stats\ny = train[TARGET].astype(float)\nprint(\"\\nTarget stats:\")\nprint(y.describe(percentiles=[.5, .75, .9, .95, .99]).to_string())\n\n# Optional: quick histogram (not required to run)\ntry:\n    _ = plt.figure(figsize=(6,4))\n    plt.hist(y, bins=50)\n    plt.title(f\"Histogram of {TARGET}\")\n    plt.xlabel(TARGET); plt.ylabel(\"count\")\n    plt.show()\nexcept Exception as e:\n    print(\"Plot skipped:\", e)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:04:00.336372Z","iopub.execute_input":"2025-08-27T15:04:00.336758Z","iopub.status.idle":"2025-08-27T15:04:00.548300Z","shell.execute_reply.started":"2025-08-27T15:04:00.336731Z","shell.execute_reply":"2025-08-27T15:04:00.547092Z"}},"outputs":[{"name":"stdout","text":"\nTarget stats:\ncount    141219.000000\nmean         75.348539\nstd         121.794683\nmin           5.380000\n50%          40.950000\n75%          86.440000\n90%         166.830000\n95%         238.010000\n99%         477.080000\nmax        2328.660000\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# Cell 5 — Basic Missingness & Categorical Detection\n\n# Missingness in train (top 30)\nna_train = train.isna().mean().sort_values(ascending=False)\nprint(\"Missingness in TRAIN (top 30):\")\ndisplay(na_train.head(30))\n\n# Categorical columns (object or category)\ncat_cols = [c for c in train.columns if c not in [TARGET] and (train[c].dtype == \"object\" or str(train[c].dtype) == \"category\")]\nprint(\"\\nDetected categorical columns (first 20):\", cat_cols[:20])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:04:08.632743Z","iopub.execute_input":"2025-08-27T15:04:08.633076Z","iopub.status.idle":"2025-08-27T15:04:08.704016Z","shell.execute_reply.started":"2025-08-27T15:04:08.633051Z","shell.execute_reply":"2025-08-27T15:04:08.702787Z"}},"outputs":[{"name":"stdout","text":"Missingness in TRAIN (top 30):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"event_time       0.0\nevent_type       0.0\nproduct_id       0.0\ncategory_id      0.0\nuser_id          0.0\nuser_session     0.0\nsession_value    0.0\ndtype: float64"},"metadata":{}},{"name":"stdout","text":"\nDetected categorical columns (first 20): ['event_time', 'event_type', 'product_id', 'category_id', 'user_id', 'user_session']\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Cell 6 — Feature List\n\n# Exclude IDs and obvious non-features\nID_CANDIDATES = {\"row_id\", \"session_id\", \"SessionId\", \"id\", \"ID\", \"Id\"}\nEXCLUDE = set([TARGET, GROUP_COL]) | (ID_CANDIDATES & set(train.columns))\n\nFEATURES = [c for c in train.columns if c not in EXCLUDE]\nprint(\"Num FEATURES:\", len(FEATURES))\nprint(\"Excluded:\", sorted(list(EXCLUDE)))\n\n# Keep only common columns in test\nFEATURES = [c for c in FEATURES if c in test.columns]\nprint(\"Num FEATURES after intersect with test:\", len(FEATURES))\nassert len(FEATURES) > 0, \"No features left after exclusions/intersection.\"\n\n# Final categorical list restricted to FEATURES\ncat_in = [c for c in cat_cols if c in FEATURES]\nprint(\"Categorical used:\", cat_in[:20])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:04:16.510951Z","iopub.execute_input":"2025-08-27T15:04:16.511333Z","iopub.status.idle":"2025-08-27T15:04:16.520035Z","shell.execute_reply.started":"2025-08-27T15:04:16.511307Z","shell.execute_reply":"2025-08-27T15:04:16.518953Z"}},"outputs":[{"name":"stdout","text":"Num FEATURES: 5\nExcluded: ['session_value', 'user_id']\nNum FEATURES after intersect with test: 5\nCategorical used: ['event_time', 'event_type', 'product_id', 'category_id', 'user_session']\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# Cell 7 — Training Matrices\n\nS_train = train[[GROUP_COL] + FEATURES + [TARGET]].copy()\nS_test  = test[FEATURES].copy()\n\ny = S_train[TARGET].astype(float)\ngroups = S_train[GROUP_COL].values\n\nprint(\"S_train shape:\", S_train.shape)\nprint(\"S_test  shape:\", S_test.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:04:22.383347Z","iopub.execute_input":"2025-08-27T15:04:22.383700Z","iopub.status.idle":"2025-08-27T15:04:22.438639Z","shell.execute_reply.started":"2025-08-27T15:04:22.383674Z","shell.execute_reply":"2025-08-27T15:04:22.437145Z"}},"outputs":[{"name":"stdout","text":"S_train shape: (141219, 7)\nS_test  shape: (62951, 5)\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# Cell 8 — Cross-Validation with GroupKFold(user_id) [RMSE/MSE aligned]\n\nN_FOLDS = 5\ngkf = GroupKFold(n_splits=N_FOLDS)\n\noof = np.zeros(len(S_train), dtype=\"float32\")\nfeature_importances = pd.Series(0.0, index=FEATURES, dtype=\"float64\")\nbest_iters = []\n\nX = S_train[FEATURES]\n\nfor fold, (tr_idx, va_idx) in enumerate(gkf.split(X, y, groups), 1):\n    X_tr, X_va = X.iloc[tr_idx], X.iloc[va_idx]\n    y_tr, y_va = y.iloc[tr_idx], y.iloc[va_idx]\n\n    train_pool = Pool(\n        data=X_tr, label=y_tr,\n        cat_features=cat_in, feature_names=FEATURES\n    )\n    valid_pool = Pool(\n        data=X_va, label=y_va,\n        cat_features=cat_in, feature_names=FEATURES\n    )\n\n    model = CatBoostRegressor(\n        loss_function=\"RMSE\",   # <-- align objective with leaderboard\n        eval_metric=\"RMSE\",\n        learning_rate=0.05,\n        depth=8,\n        l2_leaf_reg=3.0,\n        iterations=5000,\n        random_seed=SEED,\n        od_type=\"Iter\",         # early stopping on eval RMSE\n        od_wait=200,\n        use_best_model=True,\n        verbose=False,\n    )\n\n    model.fit(train_pool, eval_set=valid_pool, verbose=False)\n    pred_va = model.predict(valid_pool)\n    oof[va_idx] = pred_va\n\n    rmse = mean_squared_error(y_va, pred_va, squared=False)\n    mse  = mean_squared_error(y_va, pred_va, squared=True)\n    mae  = mean_absolute_error(y_va, pred_va)\n\n    best_it = model.get_best_iteration() or model.tree_count_\n    best_iters.append(int(best_it))\n\n    # PredictionValuesChange is a stable normalized importance for CatBoost\n    fi = pd.Series(model.get_feature_importance(type=\"PredictionValuesChange\"), index=FEATURES)\n    feature_importances += fi\n\n    print(f\"Fold {fold:>2} | RMSE: {rmse:.6f} | MSE: {mse:.6f} | MAE: {mae:.6f} | best_iter: {best_it}\")\n\noof_rmse = mean_squared_error(y, oof, squared=False)\noof_mse  = mean_squared_error(y, oof, squared=True)\noof_mae  = mean_absolute_error(y, oof)\n\nfeature_importances /= N_FOLDS\n\nprint(\"\\nOOF metrics (optimize RMSE/MSE):\")\nprint(f\"RMSE: {oof_rmse:.6f} | MSE: {oof_mse:.6f} | (aux) MAE: {oof_mae:.6f}\")\nprint(\"Median best_iter across folds:\", int(np.median(best_iters)))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:04:28.178540Z","iopub.execute_input":"2025-08-27T15:04:28.178914Z","iopub.status.idle":"2025-08-27T15:05:22.542536Z","shell.execute_reply.started":"2025-08-27T15:04:28.178887Z","shell.execute_reply":"2025-08-27T15:05:22.541026Z"}},"outputs":[{"name":"stdout","text":"Fold  1 | RMSE: 86.038385 | MSE: 7402.603745 | MAE: 45.691701 | best_iter: 22\nFold  2 | RMSE: 103.247946 | MSE: 10660.138286 | MAE: 44.425544 | best_iter: 22\nFold  3 | RMSE: 133.896395 | MSE: 17928.244596 | MAE: 50.296105 | best_iter: 15\nFold  4 | RMSE: 127.277939 | MSE: 16199.673762 | MAE: 50.882408 | best_iter: 17\nFold  5 | RMSE: 135.048875 | MSE: 18238.198730 | MAE: 52.205607 | best_iter: 15\n\nOOF metrics (optimize RMSE/MSE):\nRMSE: 118.683370 | MSE: 14085.742433 | (aux) MAE: 48.700248\nMedian best_iter across folds: 17\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"# Cell 9 — Feature Importances (Top 30)\n\ntopk = 30\nfi_sorted = feature_importances.sort_values(ascending=False)\ndisplay(fi_sorted.head(topk).to_frame(\"importance\"))\n\ntry:\n    _ = plt.figure(figsize=(8, max(4, int(topk * 0.3))))\n    fi_sorted.head(topk)[::-1].plot(kind=\"barh\")\n    plt.title(\"CatBoost Feature Importance (PredictionValuesChange)\")\n    plt.tight_layout()\n    plt.show()\nexcept Exception as e:\n    print(\"Plot skipped:\", e)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:06:30.994947Z","iopub.execute_input":"2025-08-27T15:06:30.995417Z","iopub.status.idle":"2025-08-27T15:06:31.318933Z","shell.execute_reply.started":"2025-08-27T15:06:30.995386Z","shell.execute_reply":"2025-08-27T15:06:31.317638Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"              importance\nuser_session   74.266027\nevent_type     25.265378\ncategory_id     0.468594\nevent_time      0.000000\nproduct_id      0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>importance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>user_session</th>\n      <td>74.266027</td>\n    </tr>\n    <tr>\n      <th>event_type</th>\n      <td>25.265378</td>\n    </tr>\n    <tr>\n      <th>category_id</th>\n      <td>0.468594</td>\n    </tr>\n    <tr>\n      <th>event_time</th>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>product_id</th>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"# Cell 10 — Train Final Model on Full Data (iterations = median best iters)\n\nfinal_iters = int(np.median(best_iters)) if len(best_iters) else 4000\nprint(\"Final iterations:\", final_iters)\n\nfull_pool = Pool(\n    data=S_train[FEATURES], label=y,\n    cat_features=cat_in, feature_names=FEATURES\n)\n\nfinal_model = CatBoostRegressor(\n    loss_function=\"RMSE\",\n    eval_metric=\"RMSE\",\n    learning_rate=0.05,\n    depth=8,\n    l2_leaf_reg=3.0,\n    iterations=final_iters,\n    random_seed=SEED,\n    verbose=False,\n)\nfinal_model.fit(full_pool, verbose=False)\n\nprint(\"Model trained with iterations:\", final_iters)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:06:40.875509Z","iopub.execute_input":"2025-08-27T15:06:40.875896Z","iopub.status.idle":"2025-08-27T15:06:42.220546Z","shell.execute_reply.started":"2025-08-27T15:06:40.875872Z","shell.execute_reply":"2025-08-27T15:06:42.219486Z"}},"outputs":[{"name":"stdout","text":"Final iterations: 17\nModel trained with iterations: 17\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"# Cell 11 — Predict on Test\n\ntest_pool = Pool(\n    data=S_test,\n    cat_features=cat_in,\n    feature_names=FEATURES\n)\n\np_test = final_model.predict(test_pool).astype(float)\n\nprint(\"Test preds shape:\", p_test.shape)\nprint(\"Pred stats -> min/median/mean/p95/max:\", float(np.min(p_test)), float(np.median(p_test)),\n      float(np.mean(p_test)), float(np.percentile(p_test, 95)), float(np.max(p_test)))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:07:02.934812Z","iopub.execute_input":"2025-08-27T15:07:02.935844Z","iopub.status.idle":"2025-08-27T15:07:03.087430Z","shell.execute_reply.started":"2025-08-27T15:07:02.935781Z","shell.execute_reply":"2025-08-27T15:07:03.085490Z"}},"outputs":[{"name":"stdout","text":"Test preds shape: (62951,)\nPred stats -> min/median/mean/p95/max: 50.9526869019522 51.81121559191365 61.7663666612548 112.48249874395754 1042.3229818809273\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"# Cell 12 — Build Submission (Keep Column Name from sample_submission)\n\nsub = ss.copy()\n\n# find the prediction column (second column usually)\nsub_cols = list(sub.columns)\nif len(sub_cols) < 2:\n    raise ValueError(\"sample_submission must have at least two columns (id + target).\")\n\npred_col = sub_cols[1]  # keep exactly as in sample_submission\nprint(\"Submission target column:\", pred_col)\n\nif len(sub) != len(p_test):\n    print(f\"[Warn] Length mismatch: sub={len(sub)} vs preds={len(p_test)} — aligning by order.\")\n    n = min(len(sub), len(p_test))\n    sub = sub.iloc[:n].copy()\n    p_test = p_test[:n]\n\nsub[pred_col] = p_test\ndisplay(sub.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:09:03.947024Z","iopub.execute_input":"2025-08-27T15:09:03.947448Z","iopub.status.idle":"2025-08-27T15:09:03.964236Z","shell.execute_reply.started":"2025-08-27T15:09:03.947419Z","shell.execute_reply":"2025-08-27T15:09:03.963045Z"}},"outputs":[{"name":"stdout","text":"Submission target column: session_value\n[Warn] Length mismatch: sub=30789 vs preds=62951 — aligning by order.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"     user_session  session_value\n0  SESSION_164059      60.730381\n1  SESSION_109583      60.787687\n2  SESSION_171382      61.015189\n3  SESSION_137110      60.551612\n4  SESSION_146503      61.015189","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SESSION_164059</td>\n      <td>60.730381</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SESSION_109583</td>\n      <td>60.787687</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SESSION_171382</td>\n      <td>61.015189</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SESSION_137110</td>\n      <td>60.551612</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SESSION_146503</td>\n      <td>61.015189</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"# Cell 13 — Save Submission\n\nSAVE_NAME = \"submission_rmse.csv\"\nsub.to_csv(SAVE_NAME, index=False)\nprint(f\"Saved -> {SAVE_NAME} | shape={sub.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:09:12.133758Z","iopub.execute_input":"2025-08-27T15:09:12.134101Z","iopub.status.idle":"2025-08-27T15:09:12.232701Z","shell.execute_reply.started":"2025-08-27T15:09:12.134075Z","shell.execute_reply":"2025-08-27T15:09:12.231572Z"}},"outputs":[{"name":"stdout","text":"Saved -> submission_rmse.csv | shape=(30789, 2)\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# Cell 14 — (Optional) Simple Post-Checks\n\n# Sanity: No NaNs, finite numbers\nassert np.isfinite(sub.iloc[:,1].values).all(), \"Found non-finite values in predictions!\"\n\n# Quick MSE of OOF vs baseline mean predictor (for context)\nbaseline = np.full_like(y, y.mean(), dtype=float)\nbaseline_rmse = mean_squared_error(y, baseline, squared=False)\nprint(f\"Baseline RMSE (predict train mean): {baseline_rmse:.6f}\")\nprint(f\"OOF RMSE: {mean_squared_error(y, oof, squared=False):.6f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T15:09:33.425847Z","iopub.execute_input":"2025-08-27T15:09:33.426409Z","iopub.status.idle":"2025-08-27T15:09:33.439996Z","shell.execute_reply.started":"2025-08-27T15:09:33.426367Z","shell.execute_reply":"2025-08-27T15:09:33.438875Z"}},"outputs":[{"name":"stdout","text":"Baseline RMSE (predict train mean): 121.794251\nOOF RMSE: 118.683370\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}