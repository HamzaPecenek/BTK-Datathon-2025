{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":112016,"databundleVersionId":13341508,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# BTK Datathon 2025 — v3 (log1p LGBM + safe global impacts)\n**Fixes in this version**\n- Single LightGBM trained on `log1p(session_value)` (no Tweedie, no clipping)\n- **StratifiedKFold** using target quantile bins (more Kaggle-like split)\n- Safe **global impacts** from train for `main_category_id` + `main_product_id`\n- Coverage & spread checks before submission\n","metadata":{}},{"cell_type":"code","source":"import os, gc, warnings\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\nimport lightgbm as lgb\n\nwarnings.filterwarnings(\"ignore\")\n\n# >>> Adjust this if your dataset path is different on Kaggle <<<\nDATA_DIR = Path(\"/kaggle/input/datathon-2025\")\n\nCFG = {\n    \"seed\": 42,\n    \"n_splits\": 5,\n    \"learning_rate\": 0.05,\n    \"num_leaves\": 63,\n    \"min_data_in_leaf\": 100,\n    \"feature_fraction\": 0.8,\n    \"bagging_fraction\": 0.8,\n    \"bagging_freq\": 1,\n    \"n_estimators\": 4000,\n    \"early_stopping_rounds\": 300,\n    \"target\": \"session_value\",\n    \"time_col\": \"event_time\",\n    \"key_col\": \"user_session\",\n}\n\ndef set_seed(s=42):\n    import random\n    random.seed(s)\n    np.random.seed(s)\n\nset_seed(CFG[\"seed\"])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:16:03.358651Z","iopub.execute_input":"2025-08-27T07:16:03.360178Z","iopub.status.idle":"2025-08-27T07:16:09.853567Z","shell.execute_reply.started":"2025-08-27T07:16:03.360099Z","shell.execute_reply":"2025-08-27T07:16:09.852621Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"parse_dates = [CFG[\"time_col\"]]\ntrain_df = pd.read_csv(DATA_DIR / \"train.csv\", parse_dates=parse_dates)\ntest_df  = pd.read_csv(DATA_DIR / \"test.csv\",  parse_dates=parse_dates)\nsub_df   = pd.read_csv(DATA_DIR / \"sample_submission.csv\")\n\nprint(\"shapes:\", train_df.shape, test_df.shape, sub_df.shape)\nprint(\"time range:\", train_df[CFG[\"time_col\"]].min(), \"→\", train_df[CFG[\"time_col\"]].max())\ntrain_df.head(3)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:16:32.989070Z","iopub.execute_input":"2025-08-27T07:16:32.990219Z","iopub.status.idle":"2025-08-27T07:16:34.879564Z","shell.execute_reply.started":"2025-08-27T07:16:32.990185Z","shell.execute_reply":"2025-08-27T07:16:34.878585Z"}},"outputs":[{"name":"stdout","text":"shapes: (141219, 7) (62951, 6) (30789, 2)\ntime range: 2025-06-01 00:00:24+00:00 → 2025-06-21 23:59:52+00:00\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"                 event_time event_type   product_id category_id      user_id  \\\n0 2025-06-19 10:23:07+00:00   ADD_CART  PROD_011223   CAT_00054  USER_097562   \n1 2025-06-07 21:34:45+00:00   ADD_CART  PROD_005519   CAT_00144  USER_006535   \n2 2025-06-21 21:29:09+00:00   ADD_CART  PROD_000577   CAT_00273  USER_047199   \n\n     user_session  session_value  \n0  SESSION_158779          90.29  \n1  SESSION_029987          16.39  \n2  SESSION_022134          64.27  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>event_time</th>\n      <th>event_type</th>\n      <th>product_id</th>\n      <th>category_id</th>\n      <th>user_id</th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-06-19 10:23:07+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_011223</td>\n      <td>CAT_00054</td>\n      <td>USER_097562</td>\n      <td>SESSION_158779</td>\n      <td>90.29</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-06-07 21:34:45+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_005519</td>\n      <td>CAT_00144</td>\n      <td>USER_006535</td>\n      <td>SESSION_029987</td>\n      <td>16.39</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025-06-21 21:29:09+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_000577</td>\n      <td>CAT_00273</td>\n      <td>USER_047199</td>\n      <td>SESSION_022134</td>\n      <td>64.27</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"def build_session_features(events: pd.DataFrame) -> pd.DataFrame:\n    key, tcol = CFG[\"key_col\"], CFG[\"time_col\"]\n    E = events.sort_values([key, tcol]).copy()\n    g = E.groupby(key)\n\n    # counts per event type\n    counts = E.pivot_table(index=key, columns=\"event_type\",\n                           values=\"product_id\", aggfunc=\"count\", fill_value=0)\n    counts.columns = [f\"cnt_{c.lower()}\" for c in counts.columns]\n\n    # first / last + size / tempo / diversity\n    first = g.nth(0)\n    last  = g.nth(-1)\n    duration = (last[tcol].values - first[tcol].values).astype(\"timedelta64[s]\").astype(float)\n\n    sess = pd.DataFrame(index=counts.index)\n    sess[\"session_start\"]      = first[tcol].values\n    sess[\"user_id\"]            = first[\"user_id\"].values\n    sess = sess.join(counts)\n    sess[\"n_events\"]           = g.size()\n    sess[\"nunique_product\"]    = g[\"product_id\"].nunique()\n    sess[\"nunique_category\"]   = g[\"category_id\"].nunique()\n    sess[\"duration_sec\"]       = duration\n    sess[\"events_per_min\"]     = sess[\"n_events\"] / (sess[\"duration_sec\"] / 60.0).replace(0, np.nan)\n    sess[\"is_single_event\"]    = (sess[\"n_events\"] == 1).astype(int)\n    sess[\"first_event_type\"]   = first[\"event_type\"].values\n    sess[\"last_event_type\"]    = last[\"event_type\"].values\n\n    # transitions\n    E[\"_prev_evt\"] = g[\"event_type\"].shift(1)\n    for a,b in [(\"VIEW\",\"ADD_CART\"), (\"ADD_CART\",\"BUY\"), (\"ADD_CART\",\"REMOVE_CART\"), (\"VIEW\",\"BUY\")]:\n        name = f\"trans_{a.lower()}__{b.lower()}\"\n        sess[name] = (((E[\"event_type\"]==b) & (E[\"_prev_evt\"]==a))\n                       .groupby(E[key]).sum()\n                       .reindex(sess.index).fillna(0).astype(int))\n\n    # buy position\n    E[\"_idx\"] = g.cumcount()\n    first_buy_idx = (E.loc[E[\"event_type\"]==\"BUY\"]\n                       .groupby(key)[\"_idx\"].min()\n                       .reindex(sess.index).fillna(-1).astype(int))\n    sess[\"first_buy_idx\"] = first_buy_idx\n\n    # main category/product (mode by count; ties → lowest id)\n    main_cat = (E.groupby([key,\"category_id\"]).size()\n                  .reset_index(name=\"cnt\")\n                  .sort_values([key,\"cnt\",\"category_id\"], ascending=[True,False,True])\n                  .drop_duplicates(key).set_index(key)[\"category_id\"])\n    main_prod = (E.groupby([key,\"product_id\"]).size()\n                   .reset_index(name=\"cnt\")\n                   .sort_values([key,\"cnt\",\"product_id\"], ascending=[True,False,True])\n                   .drop_duplicates(key).set_index(key)[\"product_id\"])\n    sess[\"main_category_id\"] = main_cat.reindex(sess.index).values\n    sess[\"main_product_id\"]  = main_prod.reindex(sess.index).values\n\n    # ratios\n    def safe_ratio(a,b): return a / b.replace(0, np.nan)\n    if \"cnt_add_cart\" in sess and \"cnt_view\" in sess:\n        sess[\"ratio_add_to_view\"] = safe_ratio(sess[\"cnt_add_cart\"], sess[\"cnt_view\"])\n    if \"cnt_remove_cart\" in sess and \"cnt_add_cart\" in sess:\n        sess[\"ratio_remove_to_add\"] = safe_ratio(sess[\"cnt_remove_cart\"], sess[\"cnt_add_cart\"])\n    if \"cnt_buy\" in sess and \"n_events\" in sess:\n        sess[\"ratio_buy_to_events\"] = safe_ratio(sess[\"cnt_buy\"], sess[\"n_events\"])\n\n    # calendar\n    s = pd.to_datetime(sess[\"session_start\"])\n    sess[\"hour\"] = s.dt.hour\n    sess[\"dow\"] = s.dt.dayofweek\n    sess[\"is_weekend\"] = sess[\"dow\"].isin([5,6]).astype(int)\n\n    # light one-hots\n    sess = pd.get_dummies(sess, columns=[\"first_event_type\",\"last_event_type\"], drop_first=False)\n\n    return sess.reset_index().rename(columns={\"index\":CFG[\"key_col\"]})\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:16:43.534488Z","iopub.execute_input":"2025-08-27T07:16:43.535339Z","iopub.status.idle":"2025-08-27T07:16:43.550044Z","shell.execute_reply.started":"2025-08-27T07:16:43.535310Z","shell.execute_reply":"2025-08-27T07:16:43.548955Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"train_sess = build_session_features(train_df)\ntest_sess  = build_session_features(test_df)\n\n# per-session target (constant within a session)\ny = (train_df.groupby(CFG[\"key_col\"])[CFG[\"target\"]]\n                .max()\n                .reindex(train_sess[CFG[\"key_col\"]])\n                .astype(float)\n                .values)\n\nprint(\"train_sess:\", train_sess.shape, \"test_sess:\", test_sess.shape, \"y:\", y.shape)\ntrain_sess.head(3)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:16:59.522919Z","iopub.execute_input":"2025-08-27T07:16:59.523513Z","iopub.status.idle":"2025-08-27T07:17:02.127185Z","shell.execute_reply.started":"2025-08-27T07:16:59.523483Z","shell.execute_reply":"2025-08-27T07:17:02.126320Z"}},"outputs":[{"name":"stdout","text":"train_sess: (70736, 34) test_sess: (30789, 34) y: (70736,)\n","output_type":"stream"},{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"     user_session       session_start      user_id  cnt_add_cart  cnt_buy  \\\n0  SESSION_000000 2025-06-02 12:14:45  USER_060383            20        0   \n1  SESSION_000001 2025-06-02 03:55:52  USER_023172             2        1   \n2  SESSION_000004 2025-06-04 10:27:59  USER_065806             0        0   \n\n   cnt_remove_cart  cnt_view  n_events  nunique_product  nunique_category  \\\n0                8         0        28               24                20   \n1                2         1         6                5                 5   \n2                0         1         1                1                 1   \n\n   ...  dow  is_weekend  first_event_type_ADD_CART  first_event_type_BUY  \\\n0  ...    0           0                       True                 False   \n1  ...    0           0                       True                 False   \n2  ...    2           0                      False                 False   \n\n   first_event_type_REMOVE_CART  first_event_type_VIEW  \\\n0                         False                  False   \n1                         False                  False   \n2                         False                   True   \n\n   last_event_type_ADD_CART  last_event_type_BUY last_event_type_REMOVE_CART  \\\n0                      True                False                       False   \n1                     False                False                       False   \n2                     False                False                       False   \n\n  last_event_type_VIEW  \n0                False  \n1                 True  \n2                 True  \n\n[3 rows x 34 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_session</th>\n      <th>session_start</th>\n      <th>user_id</th>\n      <th>cnt_add_cart</th>\n      <th>cnt_buy</th>\n      <th>cnt_remove_cart</th>\n      <th>cnt_view</th>\n      <th>n_events</th>\n      <th>nunique_product</th>\n      <th>nunique_category</th>\n      <th>...</th>\n      <th>dow</th>\n      <th>is_weekend</th>\n      <th>first_event_type_ADD_CART</th>\n      <th>first_event_type_BUY</th>\n      <th>first_event_type_REMOVE_CART</th>\n      <th>first_event_type_VIEW</th>\n      <th>last_event_type_ADD_CART</th>\n      <th>last_event_type_BUY</th>\n      <th>last_event_type_REMOVE_CART</th>\n      <th>last_event_type_VIEW</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SESSION_000000</td>\n      <td>2025-06-02 12:14:45</td>\n      <td>USER_060383</td>\n      <td>20</td>\n      <td>0</td>\n      <td>8</td>\n      <td>0</td>\n      <td>28</td>\n      <td>24</td>\n      <td>20</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SESSION_000001</td>\n      <td>2025-06-02 03:55:52</td>\n      <td>USER_023172</td>\n      <td>2</td>\n      <td>1</td>\n      <td>2</td>\n      <td>1</td>\n      <td>6</td>\n      <td>5</td>\n      <td>5</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SESSION_000004</td>\n      <td>2025-06-04 10:27:59</td>\n      <td>USER_065806</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>2</td>\n      <td>0</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 34 columns</p>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"drop_cols = [CFG[\"key_col\"], \"user_id\", \"session_start\", \"main_category_id\", \"main_product_id\"]\nBASE_FEATS = [c for c in train_sess.columns if c not in drop_cols]\n\nX_base = train_sess[BASE_FEATS].copy()\nX_base_test = test_sess[BASE_FEATS].reindex(columns=X_base.columns).copy()\n\n# numeric only\nX_base = X_base.select_dtypes(include=[np.number]).astype(float)\nX_base_test = X_base_test.select_dtypes(include=[np.number]).astype(float)\n\nprint(\"Base feature count:\", X_base.shape[1])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:17:11.291593Z","iopub.execute_input":"2025-08-27T07:17:11.291928Z","iopub.status.idle":"2025-08-27T07:17:11.323364Z","shell.execute_reply.started":"2025-08-27T07:17:11.291901Z","shell.execute_reply":"2025-08-27T07:17:11.321681Z"}},"outputs":[{"name":"stdout","text":"Base feature count: 21\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# Global means from TRAIN ONLY (safe for test)\ngmean = float(np.mean(y))\ncat_mean = (train_sess.assign(y=y).groupby(\"main_category_id\")[\"y\"].mean())\nprd_mean = (train_sess.assign(y=y).groupby(\"main_product_id\")[\"y\"].mean())\n\n# Append to train/test feature matrices\nX_base = X_base.copy()\nX_base[\"imp_main_category_id\"] = train_sess[\"main_category_id\"].map(cat_mean).fillna(gmean)\nX_base[\"imp_main_product_id\"]  = train_sess[\"main_product_id\"].map(prd_mean).fillna(gmean)\n\nX_base_test = X_base_test.copy()\nX_base_test[\"imp_main_category_id\"] = test_sess[\"main_category_id\"].map(cat_mean).fillna(gmean)\nX_base_test[\"imp_main_product_id\"]  = test_sess[\"main_product_id\"].map(prd_mean).fillna(gmean)\n\nprint(\"Added global impacts. New feature count:\", X_base.shape[1])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:17:19.954233Z","iopub.execute_input":"2025-08-27T07:17:19.954560Z","iopub.status.idle":"2025-08-27T07:17:20.063819Z","shell.execute_reply.started":"2025-08-27T07:17:19.954540Z","shell.execute_reply":"2025-08-27T07:17:20.062919Z"}},"outputs":[{"name":"stdout","text":"Added global impacts. New feature count: 23\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# ⚙️ Cell 8 — Hotfix A (fixed): StratifiedKFold on target bins + log1p LGBM\n\n# Make integer class labels from target quantile bins\n# (StratifiedKFold requires discrete labels; .cat.codes gives 0..K-1)\nbins = pd.qcut(y, q=20, duplicates=\"drop\")\ny_bins = pd.Series(bins).cat.codes.values  # np.array of ints\n\nfrom sklearn.model_selection import StratifiedKFold\nskf = StratifiedKFold(n_splits=CFG[\"n_splits\"], shuffle=True, random_state=CFG[\"seed\"])\n\nparams = dict(\n    objective=\"regression\",\n    metric=\"rmse\",\n    learning_rate=CFG[\"learning_rate\"],\n    num_leaves=CFG[\"num_leaves\"],\n    min_data_in_leaf=CFG[\"min_data_in_leaf\"],\n    feature_fraction=CFG[\"feature_fraction\"],\n    bagging_fraction=CFG[\"bagging_fraction\"],\n    bagging_freq=CFG[\"bagging_freq\"],\n    n_estimators=CFG[\"n_estimators\"],\n    verbose=-1\n)\n\noof = np.zeros(len(X_base))\npred = np.zeros(len(X_base_test))\nfi   = pd.Series(0.0, index=X_base.columns)\n\n# Optional sanity: check each bin has enough samples for stratification\n# If any class count < n_splits, you can lower q from 20 to e.g. 16 or 12.\n# vc = pd.Series(y_bins).value_counts()\n# print(\"Min bin size:\", vc.min())\n\nfor fold, (tr, va) in enumerate(skf.split(X_base, y_bins), 1):\n    X_tr, X_va = X_base.iloc[tr], X_base.iloc[va]\n    y_tr, y_va = y[tr], y[va]\n\n    m = lgb.LGBMRegressor(**params)\n    m.fit(\n        X_tr, np.log1p(y_tr),\n        eval_set=[(X_va, np.log1p(y_va))],\n        callbacks=[lgb.early_stopping(CFG[\"early_stopping_rounds\"], verbose=False)]\n    )\n\n    oof[va] += np.expm1(m.predict(X_va))\n    pred    += np.expm1(m.predict(X_base_test)) / skf.n_splits\n    fi       = fi.add(pd.Series(m.feature_importances_, index=X_base.columns), fill_value=0)\n\nrmse = mean_squared_error(y, oof, squared=False)\nprint(\"OOF RMSE (log1p model):\", rmse)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:21:36.504176Z","iopub.execute_input":"2025-08-27T07:21:36.504506Z","iopub.status.idle":"2025-08-27T07:21:53.826030Z","shell.execute_reply.started":"2025-08-27T07:21:36.504483Z","shell.execute_reply":"2025-08-27T07:21:53.825087Z"}},"outputs":[{"name":"stdout","text":"OOF RMSE (log1p model): 20.3679200914337\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"need = set(sub_df[CFG[\"key_col\"]])\nhave = set(test_sess[CFG[\"key_col\"]])\nprint(\"Missing user_session in preds:\", len(need - have))\n\nprint(\"Pred percentiles:\", np.percentile(pred, [1,5,25,50,75,95,99]))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:21:57.734683Z","iopub.execute_input":"2025-08-27T07:21:57.735447Z","iopub.status.idle":"2025-08-27T07:21:57.757725Z","shell.execute_reply.started":"2025-08-27T07:21:57.735414Z","shell.execute_reply":"2025-08-27T07:21:57.756913Z"}},"outputs":[{"name":"stdout","text":"Missing user_session in preds: 0\nPred percentiles: [  9.18568997  13.40816412  20.98749828  27.77748703  38.88562809\n 113.92730234 217.09895206]\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"key = CFG[\"key_col\"]\nout = sub_df.copy()\npred_map = dict(zip(test_sess[key], pred))\nfallback = float(np.median(y))  # safe fallback\nout[CFG[\"target\"]] = out[key].map(pred_map).fillna(fallback).astype(float)\n\nsave_name = \"submission_v3_log1p_kfold.csv\"\nout.to_csv(save_name, index=False)\nprint(\"Saved:\", save_name)\nout.head(5)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:22:16.661906Z","iopub.execute_input":"2025-08-27T07:22:16.662225Z","iopub.status.idle":"2025-08-27T07:22:16.797725Z","shell.execute_reply.started":"2025-08-27T07:22:16.662203Z","shell.execute_reply":"2025-08-27T07:22:16.796894Z"}},"outputs":[{"name":"stdout","text":"Saved: submission_v3_log1p_kfold.csv\n","output_type":"stream"},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"     user_session  session_value\n0  SESSION_164059     156.205971\n1  SESSION_109583      51.765146\n2  SESSION_171382      33.352390\n3  SESSION_137110      38.228668\n4  SESSION_146503     166.591060","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SESSION_164059</td>\n      <td>156.205971</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SESSION_109583</td>\n      <td>51.765146</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SESSION_171382</td>\n      <td>33.352390</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SESSION_137110</td>\n      <td>38.228668</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SESSION_146503</td>\n      <td>166.591060</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"imp = (fi / fi.sum()).sort_values(ascending=False).head(30).to_frame(\"importance\")\nimp\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T07:22:25.004086Z","iopub.execute_input":"2025-08-27T07:22:25.004456Z","iopub.status.idle":"2025-08-27T07:22:25.014749Z","shell.execute_reply.started":"2025-08-27T07:22:25.004427Z","shell.execute_reply":"2025-08-27T07:22:25.013902Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"                             importance\nimp_main_product_id            0.196766\nimp_main_category_id           0.147574\nhour                           0.136144\nevents_per_min                 0.100140\ndow                            0.090255\nduration_sec                   0.059119\nnunique_category               0.034671\nratio_remove_to_add            0.034311\nnunique_product                0.033994\ncnt_remove_cart                0.030247\nratio_add_to_view              0.026797\nn_events                       0.024617\ncnt_view                       0.024088\ncnt_buy                        0.020151\ncnt_add_cart                   0.019600\nratio_buy_to_events            0.007154\nis_weekend                     0.005122\nfirst_buy_idx                  0.003366\ntrans_view__add_cart           0.002731\ntrans_add_cart__remove_cart    0.002244\nis_single_event                0.000508\ntrans_add_cart__buy            0.000296\ntrans_view__buy                0.000106","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>importance</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>imp_main_product_id</th>\n      <td>0.196766</td>\n    </tr>\n    <tr>\n      <th>imp_main_category_id</th>\n      <td>0.147574</td>\n    </tr>\n    <tr>\n      <th>hour</th>\n      <td>0.136144</td>\n    </tr>\n    <tr>\n      <th>events_per_min</th>\n      <td>0.100140</td>\n    </tr>\n    <tr>\n      <th>dow</th>\n      <td>0.090255</td>\n    </tr>\n    <tr>\n      <th>duration_sec</th>\n      <td>0.059119</td>\n    </tr>\n    <tr>\n      <th>nunique_category</th>\n      <td>0.034671</td>\n    </tr>\n    <tr>\n      <th>ratio_remove_to_add</th>\n      <td>0.034311</td>\n    </tr>\n    <tr>\n      <th>nunique_product</th>\n      <td>0.033994</td>\n    </tr>\n    <tr>\n      <th>cnt_remove_cart</th>\n      <td>0.030247</td>\n    </tr>\n    <tr>\n      <th>ratio_add_to_view</th>\n      <td>0.026797</td>\n    </tr>\n    <tr>\n      <th>n_events</th>\n      <td>0.024617</td>\n    </tr>\n    <tr>\n      <th>cnt_view</th>\n      <td>0.024088</td>\n    </tr>\n    <tr>\n      <th>cnt_buy</th>\n      <td>0.020151</td>\n    </tr>\n    <tr>\n      <th>cnt_add_cart</th>\n      <td>0.019600</td>\n    </tr>\n    <tr>\n      <th>ratio_buy_to_events</th>\n      <td>0.007154</td>\n    </tr>\n    <tr>\n      <th>is_weekend</th>\n      <td>0.005122</td>\n    </tr>\n    <tr>\n      <th>first_buy_idx</th>\n      <td>0.003366</td>\n    </tr>\n    <tr>\n      <th>trans_view__add_cart</th>\n      <td>0.002731</td>\n    </tr>\n    <tr>\n      <th>trans_add_cart__remove_cart</th>\n      <td>0.002244</td>\n    </tr>\n    <tr>\n      <th>is_single_event</th>\n      <td>0.000508</td>\n    </tr>\n    <tr>\n      <th>trans_add_cart__buy</th>\n      <td>0.000296</td>\n    </tr>\n    <tr>\n      <th>trans_view__buy</th>\n      <td>0.000106</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}