{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e3ffd191",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T10:48:21.782133Z",
     "iopub.status.busy": "2025-08-26T10:48:21.781648Z",
     "iopub.status.idle": "2025-08-26T10:48:35.638570Z",
     "shell.execute_reply": "2025-08-26T10:48:35.637127Z"
    },
    "papermill": {
     "duration": 13.862443,
     "end_time": "2025-08-26T10:48:35.640388",
     "exception": false,
     "start_time": "2025-08-26T10:48:21.777945",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 20 rounds\n",
      "[50]\tvalid_0's l2: 538.23\n",
      "[100]\tvalid_0's l2: 528.998\n",
      "Early stopping, best iteration is:\n",
      "[106]\tvalid_0's l2: 527.503\n",
      "Validation MSE: 527.5028398011266\n",
      "Submission file created: submission.csv\n"
     ]
    }
   ],
   "source": [
    "# ==============================\n",
    "# Datathon 2025 - Fast Baseline\n",
    "# ==============================\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import lightgbm as lgb\n",
    "\n",
    "# ----------------\n",
    "# Load Data\n",
    "# ----------------\n",
    "train = pd.read_csv(\"/kaggle/input/datathon-2025/train.csv\")\n",
    "test = pd.read_csv(\"/kaggle/input/datathon-2025/test.csv\")\n",
    "sample_submission = pd.read_csv(\"/kaggle/input/datathon-2025/sample_submission.csv\")\n",
    "\n",
    "# ----------------\n",
    "# Feature Engineering (SUPER SIMPLE)\n",
    "# ----------------\n",
    "# Aggregate per session: counts of event types, unique products/categories/users\n",
    "def make_features(df):\n",
    "    feats = df.groupby(\"user_session\").agg({\n",
    "        \"event_type\": \"count\",\n",
    "        \"product_id\": \"nunique\",\n",
    "        \"category_id\": \"nunique\",\n",
    "        \"user_id\": \"nunique\"\n",
    "    }).reset_index()\n",
    "    \n",
    "    # one-hot encode event_type counts\n",
    "    ev_counts = pd.get_dummies(df[[\"user_session\",\"event_type\"]], columns=[\"event_type\"])\n",
    "    ev_counts = ev_counts.groupby(\"user_session\").sum().reset_index()\n",
    "    \n",
    "    feats = feats.merge(ev_counts, on=\"user_session\", how=\"left\")\n",
    "    return feats\n",
    "\n",
    "# Train features + target\n",
    "train_feats = make_features(train)\n",
    "train_target = train.groupby(\"user_session\")[\"session_value\"].first().reset_index()\n",
    "\n",
    "train_data = train_feats.merge(train_target, on=\"user_session\")\n",
    "\n",
    "# Test features\n",
    "test_feats = make_features(test)\n",
    "\n",
    "# ----------------\n",
    "# Train Model (FAST LightGBM)\n",
    "# ----------------\n",
    "X = train_data.drop([\"user_session\",\"session_value\"], axis=1)\n",
    "y = train_data[\"session_value\"]\n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "train_set = lgb.Dataset(X_train, y_train)\n",
    "val_set = lgb.Dataset(X_val, y_val, reference=train_set)\n",
    "\n",
    "params = {\n",
    "    \"objective\": \"regression\",\n",
    "    \"metric\": \"mse\",\n",
    "    \"verbosity\": -1,\n",
    "    \"boosting_type\": \"gbdt\"\n",
    "}\n",
    "\n",
    "# Use callbacks instead of early_stopping_rounds\n",
    "callbacks = [\n",
    "    lgb.early_stopping(stopping_rounds=20),\n",
    "    lgb.log_evaluation(50)  # print logs every 50 iterations\n",
    "]\n",
    "\n",
    "model = lgb.train(params, train_set, valid_sets=[val_set], num_boost_round=200, callbacks=callbacks)\n",
    "\n",
    "# Validation score\n",
    "val_preds = model.predict(X_val)\n",
    "print(\"Validation MSE:\", mean_squared_error(y_val, val_preds))\n",
    "\n",
    "\n",
    "# ----------------\n",
    "# Predict on Test\n",
    "# ----------------\n",
    "X_test = test_feats.drop([\"user_session\"], axis=1)\n",
    "test_preds = model.predict(X_test)\n",
    "\n",
    "# Submission\n",
    "submission = sample_submission.copy()\n",
    "submission[\"session_value\"] = test_preds\n",
    "submission.to_csv(\"submission.csv\", index=False)\n",
    "print(\"Submission file created: submission.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "704e3232",
   "metadata": {
    "papermill": {
     "duration": 0.001353,
     "end_time": "2025-08-26T10:48:35.644153",
     "exception": false,
     "start_time": "2025-08-26T10:48:35.642800",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13341508,
     "sourceId": 112016,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 21.367684,
   "end_time": "2025-08-26T10:48:36.769673",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-26T10:48:15.401989",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
