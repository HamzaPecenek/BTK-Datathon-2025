{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "57260431",
   "metadata": {
    "papermill": {
     "duration": 0.00406,
     "end_time": "2025-08-26T11:35:54.055290",
     "exception": false,
     "start_time": "2025-08-26T11:35:54.051230",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# BTK Datathon 2025 â€” Two-Stage, Leak-Safe Session Value Model (Time-aware CV)\n",
    "\n",
    "This notebook aggregates event data to **session level**, adds **sequence & intent features**, builds **fold-safe user history** features, and trains a **two-stage model** (classification for non-zero vs zero, then regression for positive sessions). It uses **time-aware folds** to avoid leakage and includes **single-class guards** so training never crashes. Finally, it generates `submission5.csv`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e2e058ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:35:54.063480Z",
     "iopub.status.busy": "2025-08-26T11:35:54.063165Z",
     "iopub.status.idle": "2025-08-26T11:35:58.161006Z",
     "shell.execute_reply": "2025-08-26T11:35:58.159879Z"
    },
    "papermill": {
     "duration": 4.103584,
     "end_time": "2025-08-26T11:35:58.162598",
     "exception": false,
     "start_time": "2025-08-26T11:35:54.059014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model backend: catboost\n"
     ]
    }
   ],
   "source": [
    "# Imports & config\n",
    "import os, gc, math, sys, re, json, time\n",
    "from pathlib import Path\n",
    "from collections import Counter, defaultdict\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from IPython.display import display\n",
    "from sklearn.metrics import mean_squared_error, roc_auc_score\n",
    "\n",
    "# Optional backends (CatBoost/LightGBM) with sklearn fallback\n",
    "MODEL_BACKEND = None\n",
    "CatBoostClassifier = CatBoostRegressor = Pool = None\n",
    "lgb = None\n",
    "\n",
    "try:\n",
    "    from catboost import CatBoostClassifier, CatBoostRegressor, Pool\n",
    "    MODEL_BACKEND = \"catboost\"\n",
    "except Exception:\n",
    "    try:\n",
    "        import lightgbm as lgb\n",
    "        MODEL_BACKEND = \"lightgbm\"\n",
    "    except Exception:\n",
    "        MODEL_BACKEND = \"sklearn\"\n",
    "\n",
    "print(f\"Model backend: {MODEL_BACKEND}\")\n",
    "SEED = 42\n",
    "np.random.seed(SEED)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dc3c5771",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:35:58.170898Z",
     "iopub.status.busy": "2025-08-26T11:35:58.170387Z",
     "iopub.status.idle": "2025-08-26T11:35:58.984085Z",
     "shell.execute_reply": "2025-08-26T11:35:58.983319Z"
    },
    "papermill": {
     "duration": 0.819309,
     "end_time": "2025-08-26T11:35:58.985467",
     "exception": false,
     "start_time": "2025-08-26T11:35:58.166158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DATA_DIR: /kaggle/input/datathon-2025\n",
      "Shapes: (141219, 7) (62951, 6) (30789, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_time</th>\n",
       "      <th>event_type</th>\n",
       "      <th>product_id</th>\n",
       "      <th>category_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_session</th>\n",
       "      <th>session_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2025-06-19 10:23:07+00:00</td>\n",
       "      <td>ADD_CART</td>\n",
       "      <td>PROD_011223</td>\n",
       "      <td>CAT_00054</td>\n",
       "      <td>USER_097562</td>\n",
       "      <td>SESSION_158779</td>\n",
       "      <td>90.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2025-06-07 21:34:45+00:00</td>\n",
       "      <td>ADD_CART</td>\n",
       "      <td>PROD_005519</td>\n",
       "      <td>CAT_00144</td>\n",
       "      <td>USER_006535</td>\n",
       "      <td>SESSION_029987</td>\n",
       "      <td>16.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2025-06-21 21:29:09+00:00</td>\n",
       "      <td>ADD_CART</td>\n",
       "      <td>PROD_000577</td>\n",
       "      <td>CAT_00273</td>\n",
       "      <td>USER_047199</td>\n",
       "      <td>SESSION_022134</td>\n",
       "      <td>64.27</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  event_time event_type   product_id category_id      user_id  \\\n",
       "0  2025-06-19 10:23:07+00:00   ADD_CART  PROD_011223   CAT_00054  USER_097562   \n",
       "1  2025-06-07 21:34:45+00:00   ADD_CART  PROD_005519   CAT_00144  USER_006535   \n",
       "2  2025-06-21 21:29:09+00:00   ADD_CART  PROD_000577   CAT_00273  USER_047199   \n",
       "\n",
       "     user_session  session_value  \n",
       "0  SESSION_158779          90.29  \n",
       "1  SESSION_029987          16.39  \n",
       "2  SESSION_022134          64.27  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Locate data (adjust DATA_DIR if needed)\n",
    "from pathlib import Path\n",
    "\n",
    "CANDIDATES = [\n",
    "    Path(\"/kaggle/input/datathon-2025\"),\n",
    "    Path(\"/kaggle/input\"),\n",
    "    Path(\".\"),\n",
    "]\n",
    "\n",
    "DATA_DIR = None\n",
    "for c in CANDIDATES:\n",
    "    if (c/\"train.csv\").exists() and (c/\"test.csv\").exists() and (c/\"sample_submission.csv\").exists():\n",
    "        DATA_DIR = c\n",
    "        break\n",
    "\n",
    "assert DATA_DIR is not None, \"Could not find train.csv / test.csv / sample_submission.csv. Set DATA_DIR manually.\"\n",
    "print(\"DATA_DIR:\", DATA_DIR)\n",
    "\n",
    "train = pd.read_csv(DATA_DIR/\"train.csv\")\n",
    "test  = pd.read_csv(DATA_DIR/\"test.csv\")\n",
    "sub   = pd.read_csv(DATA_DIR/\"sample_submission.csv\")\n",
    "\n",
    "print(\"Shapes:\", train.shape, test.shape, sub.shape)\n",
    "display(train.head(3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9c78ccec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:35:58.994153Z",
     "iopub.status.busy": "2025-08-26T11:35:58.993656Z",
     "iopub.status.idle": "2025-08-26T11:35:59.613835Z",
     "shell.execute_reply": "2025-08-26T11:35:59.612974Z"
    },
    "papermill": {
     "duration": 0.626089,
     "end_time": "2025-08-26T11:35:59.615367",
     "exception": false,
     "start_time": "2025-08-26T11:35:58.989278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_session</th>\n",
       "      <th>primary_user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SESSION_000000</td>\n",
       "      <td>USER_060383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SESSION_000001</td>\n",
       "      <td>USER_023172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SESSION_000004</td>\n",
       "      <td>USER_065806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SESSION_000005</td>\n",
       "      <td>USER_026492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SESSION_000012</td>\n",
       "      <td>USER_045859</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_session primary_user_id\n",
       "0  SESSION_000000     USER_060383\n",
       "1  SESSION_000001     USER_023172\n",
       "2  SESSION_000004     USER_065806\n",
       "3  SESSION_000005     USER_026492\n",
       "4  SESSION_000012     USER_045859"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Parse times and basic ordering\n",
    "for df in (train, test):\n",
    "    df[\"event_time\"] = pd.to_datetime(df[\"event_time\"], utc=True, errors=\"coerce\")\n",
    "\n",
    "# Normalize event_type categories\n",
    "EVENT_TYPES = [\"VIEW\",\"ADD_CART\",\"REMOVE_CART\",\"BUY\"]\n",
    "for df in (train, test):\n",
    "    df[\"event_type\"] = df[\"event_type\"].astype(\"category\")\n",
    "    df[\"event_type\"] = df[\"event_type\"].cat.set_categories(EVENT_TYPES)\n",
    "\n",
    "# primary_user_id = first user observed chronologically in that session\n",
    "def primary_user_per_session(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    d = df.sort_values([\"user_session\",\"event_time\"], kind=\"mergesort\")\n",
    "    primary = d.groupby(\"user_session\", sort=False)[\"user_id\"].first().rename(\"primary_user_id\")\n",
    "    return primary.reset_index()\n",
    "\n",
    "train_primary = primary_user_per_session(train)\n",
    "test_primary  = primary_user_per_session(test)\n",
    "display(train_primary.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9d372be7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:35:59.624739Z",
     "iopub.status.busy": "2025-08-26T11:35:59.624399Z",
     "iopub.status.idle": "2025-08-26T11:38:07.115634Z",
     "shell.execute_reply": "2025-08-26T11:38:07.114755Z"
    },
    "papermill": {
     "duration": 127.500959,
     "end_time": "2025-08-26T11:38:07.120604",
     "exception": false,
     "start_time": "2025-08-26T11:35:59.619645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_session</th>\n",
       "      <th>t_start</th>\n",
       "      <th>t_end</th>\n",
       "      <th>n_events</th>\n",
       "      <th>n_unique_products</th>\n",
       "      <th>n_unique_categories</th>\n",
       "      <th>n_users_in_session</th>\n",
       "      <th>evt_VIEW</th>\n",
       "      <th>evt_ADD_CART</th>\n",
       "      <th>evt_REMOVE_CART</th>\n",
       "      <th>...</th>\n",
       "      <th>hour_mean</th>\n",
       "      <th>dow_mean</th>\n",
       "      <th>session_duration_sec</th>\n",
       "      <th>events_per_minute</th>\n",
       "      <th>evt_VIEW_ratio</th>\n",
       "      <th>evt_ADD_CART_ratio</th>\n",
       "      <th>evt_REMOVE_CART_ratio</th>\n",
       "      <th>evt_BUY_ratio</th>\n",
       "      <th>primary_user_id</th>\n",
       "      <th>session_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SESSION_000000</td>\n",
       "      <td>2025-06-02 12:14:45+00:00</td>\n",
       "      <td>2025-06-20 17:17:32+00:00</td>\n",
       "      <td>28</td>\n",
       "      <td>24</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>11.500000</td>\n",
       "      <td>2.785714</td>\n",
       "      <td>1573367.0</td>\n",
       "      <td>0.001068</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>USER_060383</td>\n",
       "      <td>355.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SESSION_000001</td>\n",
       "      <td>2025-06-02 03:55:52+00:00</td>\n",
       "      <td>2025-06-02 06:06:10+00:00</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>4.166667</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7818.0</td>\n",
       "      <td>0.045697</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>USER_023172</td>\n",
       "      <td>96.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SESSION_000004</td>\n",
       "      <td>2025-06-04 10:27:59+00:00</td>\n",
       "      <td>2025-06-04 10:27:59+00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>USER_065806</td>\n",
       "      <td>30.92</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_session                   t_start                     t_end  \\\n",
       "0  SESSION_000000 2025-06-02 12:14:45+00:00 2025-06-20 17:17:32+00:00   \n",
       "1  SESSION_000001 2025-06-02 03:55:52+00:00 2025-06-02 06:06:10+00:00   \n",
       "2  SESSION_000004 2025-06-04 10:27:59+00:00 2025-06-04 10:27:59+00:00   \n",
       "\n",
       "   n_events  n_unique_products  n_unique_categories  n_users_in_session  \\\n",
       "0        28                 24                   20                  21   \n",
       "1         6                  5                    5                   1   \n",
       "2         1                  1                    1                   1   \n",
       "\n",
       "   evt_VIEW  evt_ADD_CART  evt_REMOVE_CART  ...  hour_mean  dow_mean  \\\n",
       "0         0            20                8  ...  11.500000  2.785714   \n",
       "1         1             2                2  ...   4.166667  0.000000   \n",
       "2         1             0                0  ...  10.000000  2.000000   \n",
       "\n",
       "   session_duration_sec  events_per_minute  evt_VIEW_ratio  \\\n",
       "0             1573367.0           0.001068        0.000000   \n",
       "1                7818.0           0.045697        0.166667   \n",
       "2                   0.0           1.000000        1.000000   \n",
       "\n",
       "   evt_ADD_CART_ratio  evt_REMOVE_CART_ratio  evt_BUY_ratio  primary_user_id  \\\n",
       "0            0.714286               0.285714       0.000000      USER_060383   \n",
       "1            0.333333               0.333333       0.166667      USER_023172   \n",
       "2            0.000000               0.000000       0.000000      USER_065806   \n",
       "\n",
       "   session_value  \n",
       "0         355.80  \n",
       "1          96.60  \n",
       "2          30.92  \n",
       "\n",
       "[3 rows x 25 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def build_session_features(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    d = df.sort_values([\"user_session\",\"event_time\"], kind=\"mergesort\").copy()\n",
    "\n",
    "    # Per-event-type counts\n",
    "    et = pd.get_dummies(d[\"event_type\"], prefix=\"evt\")\n",
    "    d = pd.concat([d, et], axis=1)\n",
    "\n",
    "    agg = d.groupby(\"user_session\").agg(\n",
    "        t_start=(\"event_time\",\"min\"),\n",
    "        t_end=(\"event_time\",\"max\"),\n",
    "        n_events=(\"event_time\",\"size\"),\n",
    "        n_unique_products=(\"product_id\",\"nunique\"),\n",
    "        n_unique_categories=(\"category_id\",\"nunique\"),\n",
    "        n_users_in_session=(\"user_id\",\"nunique\"),\n",
    "        evt_VIEW=(\"evt_VIEW\",\"sum\"),\n",
    "        evt_ADD_CART=(\"evt_ADD_CART\",\"sum\"),\n",
    "        evt_REMOVE_CART=(\"evt_REMOVE_CART\",\"sum\"),\n",
    "        evt_BUY=(\"evt_BUY\",\"sum\"),\n",
    "        hour_first=(\"event_time\", lambda s: s.dt.hour.iloc[0]),\n",
    "        hour_last=(\"event_time\",  lambda s: s.dt.hour.iloc[-1]),\n",
    "        dow_first=(\"event_time\",  lambda s: s.dt.dayofweek.iloc[0]),\n",
    "        dow_last=(\"event_time\",   lambda s: s.dt.dayofweek.iloc[-1]),\n",
    "        hour_mean=(\"event_time\",  lambda s: s.dt.hour.mean()),\n",
    "        dow_mean=(\"event_time\",   lambda s: s.dt.dayofweek.mean()),\n",
    "    ).reset_index()\n",
    "\n",
    "    # Durations & rates\n",
    "    agg[\"session_duration_sec\"] = (agg[\"t_end\"] - agg[\"t_start\"]).dt.total_seconds().fillna(0.0)\n",
    "    agg[\"events_per_minute\"] = agg[\"n_events\"] / (1.0 + agg[\"session_duration_sec\"]/60.0)\n",
    "\n",
    "    # Ratios (safe denom)\n",
    "    denom = agg[\"n_events\"].clip(lower=1)\n",
    "    for col in [\"evt_VIEW\",\"evt_ADD_CART\",\"evt_REMOVE_CART\",\"evt_BUY\"]:\n",
    "        agg[col+\"_ratio\"] = agg[col] / denom\n",
    "\n",
    "    return agg\n",
    "\n",
    "train_sess = build_session_features(train)\n",
    "test_sess  = build_session_features(test)\n",
    "\n",
    "# Merge primary user_id and label\n",
    "train_sess = train_sess.merge(train_primary, on=\"user_session\", how=\"left\")\n",
    "test_sess  = test_sess.merge(test_primary,  on=\"user_session\",  how=\"left\")\n",
    "\n",
    "y_by_session = train.groupby(\"user_session\")[\"session_value\"].first().reset_index()\n",
    "train_sess = train_sess.merge(y_by_session, on=\"user_session\", how=\"left\")\n",
    "\n",
    "display(train_sess.head(3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "25e4eb55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:38:07.130038Z",
     "iopub.status.busy": "2025-08-26T11:38:07.129437Z",
     "iopub.status.idle": "2025-08-26T11:38:25.468890Z",
     "shell.execute_reply": "2025-08-26T11:38:25.468041Z"
    },
    "papermill": {
     "duration": 18.345712,
     "end_time": "2025-08-26T11:38:25.470372",
     "exception": false,
     "start_time": "2025-08-26T11:38:07.124660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_session</th>\n",
       "      <th>t_start</th>\n",
       "      <th>t_end</th>\n",
       "      <th>n_events</th>\n",
       "      <th>n_unique_products</th>\n",
       "      <th>n_unique_categories</th>\n",
       "      <th>n_users_in_session</th>\n",
       "      <th>evt_VIEW</th>\n",
       "      <th>evt_ADD_CART</th>\n",
       "      <th>evt_REMOVE_CART</th>\n",
       "      <th>...</th>\n",
       "      <th>first_is_BUY</th>\n",
       "      <th>last_is_BUY</th>\n",
       "      <th>trans_VIEW_to_ADD_CART</th>\n",
       "      <th>trans_ADD_CART_to_REMOVE_CART</th>\n",
       "      <th>trans_ADD_CART_to_BUY</th>\n",
       "      <th>trans_VIEW_to_BUY</th>\n",
       "      <th>trans_REMOVE_CART_to_ADD_CART</th>\n",
       "      <th>gap_max_sec</th>\n",
       "      <th>gap_mean_sec</th>\n",
       "      <th>gap_std_sec</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SESSION_000000</td>\n",
       "      <td>2025-06-02 12:14:45+00:00</td>\n",
       "      <td>2025-06-20 17:17:32+00:00</td>\n",
       "      <td>28</td>\n",
       "      <td>24</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>350937.0</td>\n",
       "      <td>58272.851852</td>\n",
       "      <td>86509.424006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SESSION_000001</td>\n",
       "      <td>2025-06-02 03:55:52+00:00</td>\n",
       "      <td>2025-06-02 06:06:10+00:00</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>4427.0</td>\n",
       "      <td>1563.600000</td>\n",
       "      <td>1739.462170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SESSION_000004</td>\n",
       "      <td>2025-06-04 10:27:59+00:00</td>\n",
       "      <td>2025-06-04 10:27:59+00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 41 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_session                   t_start                     t_end  \\\n",
       "0  SESSION_000000 2025-06-02 12:14:45+00:00 2025-06-20 17:17:32+00:00   \n",
       "1  SESSION_000001 2025-06-02 03:55:52+00:00 2025-06-02 06:06:10+00:00   \n",
       "2  SESSION_000004 2025-06-04 10:27:59+00:00 2025-06-04 10:27:59+00:00   \n",
       "\n",
       "   n_events  n_unique_products  n_unique_categories  n_users_in_session  \\\n",
       "0        28                 24                   20                  21   \n",
       "1         6                  5                    5                   1   \n",
       "2         1                  1                    1                   1   \n",
       "\n",
       "   evt_VIEW  evt_ADD_CART  evt_REMOVE_CART  ...  first_is_BUY  last_is_BUY  \\\n",
       "0         0            20                8  ...             0            0   \n",
       "1         1             2                2  ...             0            0   \n",
       "2         1             0                0  ...             0            0   \n",
       "\n",
       "   trans_VIEW_to_ADD_CART  trans_ADD_CART_to_REMOVE_CART  \\\n",
       "0                       0                              5   \n",
       "1                       0                              2   \n",
       "2                       0                              0   \n",
       "\n",
       "   trans_ADD_CART_to_BUY  trans_VIEW_to_BUY  trans_REMOVE_CART_to_ADD_CART  \\\n",
       "0                      0                  0                              5   \n",
       "1                      0                  0                              1   \n",
       "2                      0                  0                              0   \n",
       "\n",
       "   gap_max_sec  gap_mean_sec   gap_std_sec  \n",
       "0     350937.0  58272.851852  86509.424006  \n",
       "1       4427.0   1563.600000   1739.462170  \n",
       "2          0.0      0.000000      0.000000  \n",
       "\n",
       "[3 rows x 41 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def seq_features(df: pd.DataFrame) -> pd.DataFrame:\n",
    "    d = df.sort_values([\"user_session\",\"event_time\"], kind=\"mergesort\").copy()\n",
    "    feats = []\n",
    "    for sid, g in d.groupby(\"user_session\", sort=False):\n",
    "        et = g[\"event_type\"].tolist()\n",
    "        times = g[\"event_time\"].values\n",
    "\n",
    "        # first/last flags\n",
    "        first = et[0] if len(et) else None\n",
    "        last  = et[-1] if len(et) else None\n",
    "        row = {\"user_session\": sid}\n",
    "        for name in [\"VIEW\",\"ADD_CART\",\"REMOVE_CART\",\"BUY\"]:\n",
    "            row[f\"first_is_{name}\"] = 1 if first == name else 0\n",
    "            row[f\"last_is_{name}\"]  = 1 if last  == name else 0\n",
    "\n",
    "        # transitions\n",
    "        trans = Counter()\n",
    "        for a, b in zip(et[:-1], et[1:]):\n",
    "            trans[(a,b)] += 1\n",
    "        pairs = [(\"VIEW\",\"ADD_CART\"),(\"ADD_CART\",\"REMOVE_CART\"),(\"ADD_CART\",\"BUY\"),\n",
    "                 (\"VIEW\",\"BUY\"),(\"REMOVE_CART\",\"ADD_CART\")]\n",
    "        for a,b in pairs:\n",
    "            row[f\"trans_{a}_to_{b}\"] = trans.get((a,b),0)\n",
    "\n",
    "        # gaps\n",
    "        if len(times) >= 2:\n",
    "            gaps = np.diff(times).astype(\"timedelta64[s]\").astype(float)\n",
    "            row[\"gap_max_sec\"] = float(np.max(gaps))\n",
    "            row[\"gap_mean_sec\"] = float(np.mean(gaps))\n",
    "            row[\"gap_std_sec\"] = float(np.std(gaps))\n",
    "        else:\n",
    "            row[\"gap_max_sec\"] = 0.0\n",
    "            row[\"gap_mean_sec\"] = 0.0\n",
    "            row[\"gap_std_sec\"] = 0.0\n",
    "\n",
    "        feats.append(row)\n",
    "\n",
    "    return pd.DataFrame(feats)\n",
    "\n",
    "train_seq = seq_features(train)\n",
    "test_seq  = seq_features(test)\n",
    "\n",
    "train_sess = train_sess.merge(train_seq, on=\"user_session\", how=\"left\")\n",
    "test_sess  = test_sess.merge(test_seq,  on=\"user_session\",  how=\"left\")\n",
    "\n",
    "display(train_sess.head(3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a43c3d81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:38:25.480247Z",
     "iopub.status.busy": "2025-08-26T11:38:25.479929Z",
     "iopub.status.idle": "2025-08-26T11:38:25.605863Z",
     "shell.execute_reply": "2025-08-26T11:38:25.605008Z"
    },
    "papermill": {
     "duration": 0.132379,
     "end_time": "2025-08-26T11:38:25.607247",
     "exception": false,
     "start_time": "2025-08-26T11:38:25.474868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "time_fold\n",
       "0    17684\n",
       "1    17684\n",
       "2    17684\n",
       "3    17683\n",
       "4        1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 5 chronological folds by session start time\n",
    "def make_time_folds(df_sessions: pd.DataFrame, n_folds=5) -> pd.DataFrame:\n",
    "    d = df_sessions[[\"user_session\",\"t_start\"]].copy()\n",
    "    d[\"t_start\"] = pd.to_datetime(d[\"t_start\"], utc=True)\n",
    "    d = d.sort_values(\"t_start\").reset_index(drop=True)\n",
    "    n = len(d)\n",
    "    fold_id = np.floor(np.linspace(0, n_folds-1, n)).astype(int)\n",
    "    d[\"time_fold\"] = fold_id\n",
    "    return d[[\"user_session\",\"time_fold\"]]\n",
    "\n",
    "folds = make_time_folds(train_sess, n_folds=5)\n",
    "train_sess = train_sess.merge(folds, on=\"user_session\", how=\"left\")\n",
    "train_sess[\"is_positive\"] = (train_sess[\"session_value\"] > 0).astype(int)\n",
    "train_sess[\"t_start\"] = pd.to_datetime(train_sess[\"t_start\"], utc=True)\n",
    "\n",
    "train_sess[\"time_fold\"].value_counts().sort_index()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c8317d51",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:38:25.617247Z",
     "iopub.status.busy": "2025-08-26T11:38:25.616913Z",
     "iopub.status.idle": "2025-08-26T11:38:25.626058Z",
     "shell.execute_reply": "2025-08-26T11:38:25.625294Z"
    },
    "papermill": {
     "duration": 0.015901,
     "end_time": "2025-08-26T11:38:25.627491",
     "exception": false,
     "start_time": "2025-08-26T11:38:25.611590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Compute user history features using ONLY sessions from the past (ref_df) w.r.t. target session time.\n",
    "def compute_user_history(target_df: pd.DataFrame, ref_df: pd.DataFrame) -> pd.DataFrame:\n",
    "    ref_df = ref_df[[\"primary_user_id\",\"t_start\",\"session_value\",\"is_positive\"]].dropna(subset=[\"primary_user_id\"]).copy()\n",
    "    ref_df = ref_df.sort_values([\"primary_user_id\",\"t_start\"])\n",
    "\n",
    "    user_groups = {u: g[[\"t_start\",\"session_value\",\"is_positive\"]].reset_index(drop=True)\n",
    "                   for u,g in ref_df.groupby(\"primary_user_id\", sort=False)}\n",
    "\n",
    "    out = target_df[[\"user_session\",\"primary_user_id\",\"t_start\"]].copy()\n",
    "    out[\"uh_prev_sessions\"] = 0\n",
    "    out[\"uh_prev_buys\"] = 0\n",
    "    out[\"uh_prev_sum_value\"] = 0.0\n",
    "    out[\"uh_prev_avg_value\"] = 0.0\n",
    "    out[\"uh_prev_buy_rate\"] = 0.0\n",
    "    out[\"uh_days_since_last_session\"] = np.nan\n",
    "\n",
    "    import bisect\n",
    "    for i, row in out.iterrows():\n",
    "        u = row[\"primary_user_id\"]\n",
    "        t = row[\"t_start\"]\n",
    "        if pd.isna(u) or u not in user_groups:\n",
    "            continue\n",
    "        g = user_groups[u]\n",
    "        times = g[\"t_start\"].tolist()\n",
    "        j = bisect.bisect_left(times, t) - 1  # last prior index\n",
    "        if j >= 0:\n",
    "            sub = g.iloc[:j+1]\n",
    "            n = len(sub)\n",
    "            b = int(sub[\"is_positive\"].sum())\n",
    "            s = float(sub[\"session_value\"].sum())\n",
    "            out.at[i,\"uh_prev_sessions\"] = n\n",
    "            out.at[i,\"uh_prev_buys\"]     = b\n",
    "            out.at[i,\"uh_prev_sum_value\"]= s\n",
    "            out.at[i,\"uh_prev_avg_value\"]= s / n\n",
    "            out.at[i,\"uh_prev_buy_rate\"] = b / n\n",
    "            last_t = sub[\"t_start\"].iloc[-1]\n",
    "            out.at[i,\"uh_days_since_last_session\"] = float((t - last_t).total_seconds()/86400.0)\n",
    "\n",
    "    out[\"uh_days_since_last_session\"] = out[\"uh_days_since_last_session\"].fillna(9999.0)\n",
    "    return out.drop(columns=[\"primary_user_id\",\"t_start\"])\n",
    "\n",
    "# (Optional) quick demo:\n",
    "# tmp_valid = train_sess[train_sess[\"time_fold\"]==4].copy()\n",
    "# tmp_train = train_sess[train_sess[\"time_fold\"]<4].copy()\n",
    "# display(compute_user_history(tmp_valid, tmp_train).head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d82f3ce7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:38:25.639610Z",
     "iopub.status.busy": "2025-08-26T11:38:25.638911Z",
     "iopub.status.idle": "2025-08-26T11:38:25.646388Z",
     "shell.execute_reply": "2025-08-26T11:38:25.645418Z"
    },
    "papermill": {
     "duration": 0.015674,
     "end_time": "2025-08-26T11:38:25.648090",
     "exception": false,
     "start_time": "2025-08-26T11:38:25.632416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "BASE_FEATURES = [\n",
    "    # core counts/ratios\n",
    "    \"n_events\",\"n_unique_products\",\"n_unique_categories\",\"n_users_in_session\",\n",
    "    \"evt_VIEW\",\"evt_ADD_CART\",\"evt_REMOVE_CART\",\"evt_BUY\",\n",
    "    \"evt_VIEW_ratio\",\"evt_ADD_CART_ratio\",\"evt_REMOVE_CART_ratio\",\"evt_BUY_ratio\",\n",
    "    # timing\n",
    "    \"session_duration_sec\",\"events_per_minute\",\n",
    "    \"hour_first\",\"hour_last\",\"hour_mean\",\"dow_first\",\"dow_last\",\"dow_mean\",\n",
    "    # sequence flags\n",
    "    \"first_is_VIEW\",\"first_is_ADD_CART\",\"first_is_REMOVE_CART\",\"first_is_BUY\",\n",
    "    \"last_is_VIEW\",\"last_is_ADD_CART\",\"last_is_REMOVE_CART\",\"last_is_BUY\",\n",
    "    # transitions\n",
    "    \"trans_VIEW_to_ADD_CART\",\"trans_ADD_CART_to_REMOVE_CART\",\"trans_ADD_CART_to_BUY\",\n",
    "    \"trans_VIEW_to_BUY\",\"trans_REMOVE_CART_to_ADD_CART\",\n",
    "    # gaps\n",
    "    \"gap_max_sec\",\"gap_mean_sec\",\"gap_std_sec\",\n",
    "]\n",
    "\n",
    "def finalize_features(df_sessions: pd.DataFrame, hist: pd.DataFrame) -> pd.DataFrame:\n",
    "    X = df_sessions[[\"user_session\"] + BASE_FEATURES].copy()\n",
    "    X = X.merge(hist, on=\"user_session\", how=\"left\")\n",
    "    for c in X.columns:\n",
    "        if c != \"user_session\":\n",
    "            X[c] = X[c].fillna(0.0)\n",
    "    return X\n",
    "\n",
    "def target_series(df_sessions: pd.DataFrame) -> np.ndarray:\n",
    "    return df_sessions[\"session_value\"].astype(float).values\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fb1da3a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:38:25.660274Z",
     "iopub.status.busy": "2025-08-26T11:38:25.659938Z",
     "iopub.status.idle": "2025-08-26T11:38:25.671754Z",
     "shell.execute_reply": "2025-08-26T11:38:25.670955Z"
    },
    "papermill": {
     "duration": 0.018783,
     "end_time": "2025-08-26T11:38:25.673257",
     "exception": false,
     "start_time": "2025-08-26T11:38:25.654474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def fit_classifier(X_tr, y_tr, X_va, y_va):\n",
    "    if MODEL_BACKEND == \"catboost\":\n",
    "        train_pool = Pool(X_tr, y_tr)\n",
    "        valid_pool = Pool(X_va, y_va)\n",
    "        clf = CatBoostClassifier(\n",
    "            loss_function=\"Logloss\",\n",
    "            depth=8, learning_rate=0.05, l2_leaf_reg=6,\n",
    "            iterations=4000, random_seed=SEED,\n",
    "            eval_metric=\"AUC\", verbose=False, od_type=\"Iter\", od_wait=200\n",
    "        )\n",
    "        clf.fit(train_pool, eval_set=valid_pool, verbose=False)\n",
    "        p = clf.predict_proba(X_va)[:,1]\n",
    "        return clf, p\n",
    "\n",
    "    elif MODEL_BACKEND == \"lightgbm\":\n",
    "        params = dict(\n",
    "            objective=\"binary\",\n",
    "            metric=\"auc\",\n",
    "            learning_rate=0.05,\n",
    "            num_leaves=64,\n",
    "            feature_fraction=0.8,\n",
    "            bagging_fraction=0.8,\n",
    "            bagging_freq=1,\n",
    "            min_data_in_leaf=100,\n",
    "            seed=SEED\n",
    "        )\n",
    "        lgb_tr = lgb.Dataset(X_tr, label=y_tr)\n",
    "        lgb_va = lgb.Dataset(X_va, label=y_va, reference=lgb_tr)\n",
    "        clf = lgb.train(params, lgb_tr, num_boost_round=5000,\n",
    "                        valid_sets=[lgb_tr, lgb_va],\n",
    "                        valid_names=[\"train\",\"valid\"],\n",
    "                        callbacks=[lgb.early_stopping(200, verbose=False)])\n",
    "        p = clf.predict(X_va, num_iteration=clf.best_iteration)\n",
    "        return clf, p\n",
    "\n",
    "    else:\n",
    "        # sklearn fallback\n",
    "        from sklearn.linear_model import LogisticRegression\n",
    "        clf = LogisticRegression(max_iter=2000, class_weight=\"balanced\", solver=\"liblinear\")\n",
    "        clf.fit(X_tr, y_tr)\n",
    "        p = clf.predict_proba(X_va)[:,1]\n",
    "        return clf, p\n",
    "\n",
    "\n",
    "def fit_regressor(X_tr, y_tr, X_va):\n",
    "    # Train on log1p to stabilize tail; return inverse-transformed predictor\n",
    "    y_tr_log = np.log1p(y_tr)\n",
    "\n",
    "    if MODEL_BACKEND == \"catboost\":\n",
    "        train_pool = Pool(X_tr, y_tr_log)\n",
    "        reg = CatBoostRegressor(\n",
    "            loss_function=\"RMSE\",\n",
    "            depth=8, learning_rate=0.05, l2_leaf_reg=8,\n",
    "            iterations=5000, random_seed=SEED,\n",
    "            eval_metric=\"RMSE\", verbose=False, od_type=\"Iter\", od_wait=200\n",
    "        )\n",
    "        reg.fit(train_pool, verbose=False)\n",
    "        def predict(X):\n",
    "            return np.expm1(reg.predict(X))\n",
    "        return reg, predict\n",
    "\n",
    "    elif MODEL_BACKEND == \"lightgbm\":\n",
    "        params = dict(\n",
    "            objective=\"rmse\",\n",
    "            metric=\"rmse\",\n",
    "            learning_rate=0.05,\n",
    "            num_leaves=64,\n",
    "            feature_fraction=0.8,\n",
    "            bagging_fraction=0.8,\n",
    "            bagging_freq=1,\n",
    "            min_data_in_leaf=100,\n",
    "            seed=SEED\n",
    "        )\n",
    "        lgb_tr = lgb.Dataset(X_tr, label=y_tr_log)\n",
    "        reg = lgb.train(params, lgb_tr, num_boost_round=7000,\n",
    "                        valid_sets=[lgb_tr],\n",
    "                        valid_names=[\"train\"],\n",
    "                        callbacks=[lgb.early_stopping(200, verbose=False)])\n",
    "        def predict(X):\n",
    "            p = reg.predict(X, num_iteration=reg.best_iteration)\n",
    "            return np.expm1(p)\n",
    "        return reg, predict\n",
    "\n",
    "    else:\n",
    "        # sklearn fallback\n",
    "        from sklearn.ensemble import HistGradientBoostingRegressor\n",
    "        reg = HistGradientBoostingRegressor(max_iter=500, learning_rate=0.05, random_state=SEED)\n",
    "        reg.fit(X_tr, np.log1p(y_tr))\n",
    "        def predict(X):\n",
    "            return np.expm1(reg.predict(X))\n",
    "        return reg, predict\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fa81870c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:38:25.683504Z",
     "iopub.status.busy": "2025-08-26T11:38:25.683193Z",
     "iopub.status.idle": "2025-08-26T11:46:05.794775Z",
     "shell.execute_reply": "2025-08-26T11:46:05.793916Z"
    },
    "papermill": {
     "duration": 460.122487,
     "end_time": "2025-08-26T11:46:05.800239",
     "exception": false,
     "start_time": "2025-08-26T11:38:25.677752",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 0: no earlier data; predicting zeros.\n",
      "Fold 1 MSE: 354.439\n",
      "Fold 2 MSE: 461.469\n",
      "Fold 3 MSE: 268.313\n",
      "Fold 4 MSE: 0.699\n",
      "OOF MSE: 1474.4053027224659\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fold</th>\n",
       "      <th>mse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>354.439248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>461.469172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>268.313253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.699217</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fold         mse\n",
       "0     1  354.439248\n",
       "1     2  461.469172\n",
       "2     3  268.313253\n",
       "3     4    0.699217"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Time-aware CV with fold-safe history & single-class guard\n",
    "FOLDS = sorted(train_sess[\"time_fold\"].unique())\n",
    "oof_pred = np.zeros(len(train_sess))\n",
    "oof_pos  = np.zeros(len(train_sess))\n",
    "fold_metrics = []\n",
    "\n",
    "idx_map = {sid:i for i, sid in enumerate(train_sess[\"user_session\"].tolist())}\n",
    "\n",
    "for f in FOLDS:\n",
    "    valid_df = train_sess[train_sess[\"time_fold\"]==f].copy()\n",
    "    train_df = train_sess[train_sess[\"time_fold\"]<f].copy()\n",
    "\n",
    "    if len(train_df)==0:\n",
    "        print(f\"Fold {f}: no earlier data; predicting zeros.\")\n",
    "        # OOF stays zeros for this fold\n",
    "        continue\n",
    "\n",
    "    # History features (fold-safe)\n",
    "    hist_tr = compute_user_history(train_df, train_df)\n",
    "    hist_va = compute_user_history(valid_df, train_df)\n",
    "\n",
    "    X_tr = finalize_features(train_df, hist_tr).set_index(\"user_session\")\n",
    "    X_va = finalize_features(valid_df, hist_va).set_index(\"user_session\")\n",
    "    y_tr = train_df[\"session_value\"].astype(float).values\n",
    "    y_va = valid_df[\"session_value\"].astype(float).values\n",
    "\n",
    "    # ---- Stage A: classifier with single-class guard ----\n",
    "    y_tr_bin = (y_tr > 0).astype(int)\n",
    "    unique_classes = np.unique(y_tr_bin)\n",
    "    if unique_classes.size < 2:\n",
    "        const_prob = float(unique_classes[0])  # 0.0 or 1.0\n",
    "        p_va = np.full(len(X_va), const_prob, dtype=float)\n",
    "        clf = None\n",
    "    else:\n",
    "        clf, p_va = fit_classifier(X_tr.values, y_tr_bin, X_va.values, (y_va>0).astype(int))\n",
    "\n",
    "    # ---- Stage B: regressor on positives only ----\n",
    "    pos_mask = y_tr > 0\n",
    "    if pos_mask.sum() == 0:\n",
    "        yhat_pos_va = np.zeros_like(y_va)\n",
    "    else:\n",
    "        reg, reg_predict = fit_regressor(X_tr.values[pos_mask], y_tr[pos_mask], X_va.values)\n",
    "        yhat_pos_va = reg_predict(X_va.values)\n",
    "\n",
    "    # Final prediction\n",
    "    yhat_va = p_va * yhat_pos_va\n",
    "\n",
    "    # Tail shrinkage for robustness\n",
    "    if len(yhat_va) > 0:\n",
    "        q99 = np.quantile(yhat_va, 0.99)\n",
    "        yhat_va = np.where(yhat_va>q99, 0.9*yhat_va + 0.1*q99, yhat_va)\n",
    "\n",
    "    mse = mean_squared_error(y_va, yhat_va)\n",
    "    fold_metrics.append((f, mse))\n",
    "    print(f\"Fold {f} MSE: {mse:.3f}\")\n",
    "\n",
    "    # Store OOF\n",
    "    for sid, pred, p in zip(X_va.index.tolist(), yhat_va.tolist(), p_va.tolist()):\n",
    "        oof_pred[idx_map[sid]] = pred\n",
    "        oof_pos[idx_map[sid]]  = p\n",
    "\n",
    "oof_mse = mean_squared_error(train_sess[\"session_value\"].values, oof_pred)\n",
    "print(\"OOF MSE:\", oof_mse)\n",
    "display(pd.DataFrame(fold_metrics, columns=[\"fold\",\"mse\"]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "88df73d5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:46:05.811003Z",
     "iopub.status.busy": "2025-08-26T11:46:05.810706Z",
     "iopub.status.idle": "2025-08-26T11:48:50.279863Z",
     "shell.execute_reply": "2025-08-26T11:48:50.278871Z"
    },
    "papermill": {
     "duration": 164.480299,
     "end_time": "2025-08-26T11:48:50.285115",
     "exception": false,
     "start_time": "2025-08-26T11:46:05.804816",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved submission.csv with shape: (30789, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_session</th>\n",
       "      <th>session_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SESSION_164059</td>\n",
       "      <td>191.784819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SESSION_109583</td>\n",
       "      <td>38.525350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SESSION_171382</td>\n",
       "      <td>39.816161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SESSION_137110</td>\n",
       "      <td>31.988817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SESSION_146503</td>\n",
       "      <td>195.514164</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_session  session_value\n",
       "0  SESSION_164059     191.784819\n",
       "1  SESSION_109583      38.525350\n",
       "2  SESSION_171382      39.816161\n",
       "3  SESSION_137110      31.988817\n",
       "4  SESSION_146503     195.514164"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# History for train (full) & test (test only sees train history)\n",
    "full_hist_train = compute_user_history(train_sess, train_sess)\n",
    "full_hist_test  = compute_user_history(test_sess,  train_sess)\n",
    "\n",
    "X_full = finalize_features(train_sess, full_hist_train).set_index(\"user_session\")\n",
    "X_test = finalize_features(test_sess,  full_hist_test).set_index(\"user_session\")\n",
    "y_full = train_sess[\"session_value\"].astype(float).values\n",
    "\n",
    "# ---- Stage A (full) â€” single-class guard ----\n",
    "y_full_bin = (y_full > 0).astype(int)\n",
    "unique_full = np.unique(y_full_bin)\n",
    "if unique_full.size < 2:\n",
    "    const_prob_full = float(unique_full[0])  # 0.0 or 1.0\n",
    "    p_test = np.full(len(X_test), const_prob_full, dtype=float)\n",
    "    clf_full = None\n",
    "else:\n",
    "    clf_full, _ = fit_classifier(X_full.values, y_full_bin, X_full.values, y_full_bin)\n",
    "    if MODEL_BACKEND in (\"catboost\",\"lightgbm\"):\n",
    "        p_test = clf_full.predict_proba(X_test.values)[:,1]\n",
    "    else:\n",
    "        p_test = clf_full.predict_proba(X_test.values)[:,1]\n",
    "\n",
    "# ---- Stage B (full; positives only) ----\n",
    "pos_mask_full = y_full>0\n",
    "if pos_mask_full.sum()==0:\n",
    "    test_pos_pred = np.zeros(len(X_test))\n",
    "else:\n",
    "    reg_full, reg_full_predict = fit_regressor(X_full.values[pos_mask_full], y_full[pos_mask_full], X_test.values)\n",
    "    test_pos_pred = reg_full_predict(X_test.values)\n",
    "\n",
    "test_pred = p_test * test_pos_pred\n",
    "\n",
    "# Tail shrinkage\n",
    "if len(test_pred) > 0:\n",
    "    q99 = np.quantile(test_pred, 0.99)\n",
    "    test_pred = np.where(test_pred>q99, 0.9*test_pred + 0.1*q99, test_pred)\n",
    "\n",
    "submission = pd.DataFrame({\n",
    "    \"user_session\": X_test.index.values,\n",
    "    \"session_value\": test_pred\n",
    "})\n",
    "\n",
    "# Align to sample submission order if present\n",
    "if \"user_session\" in submission.columns and \"user_session\" in sub.columns:\n",
    "    submission = sub[[\"user_session\"]].merge(submission, on=\"user_session\", how=\"left\")\n",
    "    submission[\"session_value\"] = submission[\"session_value\"].fillna(0.0)\n",
    "\n",
    "submission.to_csv(\"submission5.csv\", index=False)\n",
    "print(\"Saved submission.csv with shape:\", submission.shape)\n",
    "display(submission.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c5e025b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-26T11:48:50.297077Z",
     "iopub.status.busy": "2025-08-26T11:48:50.296764Z",
     "iopub.status.idle": "2025-08-26T11:48:50.333930Z",
     "shell.execute_reply": "2025-08-26T11:48:50.332958Z"
    },
    "papermill": {
     "duration": 0.045106,
     "end_time": "2025-08-26T11:48:50.335479",
     "exception": false,
     "start_time": "2025-08-26T11:48:50.290373",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_session</th>\n",
       "      <th>session_value</th>\n",
       "      <th>evt_BUY</th>\n",
       "      <th>n_events</th>\n",
       "      <th>session_duration_sec</th>\n",
       "      <th>oof_pred</th>\n",
       "      <th>sqerr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>42766</th>\n",
       "      <td>SESSION_114996</td>\n",
       "      <td>2328.66</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>1784786.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.422657e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14367</th>\n",
       "      <td>SESSION_038767</td>\n",
       "      <td>1946.93</td>\n",
       "      <td>29</td>\n",
       "      <td>93</td>\n",
       "      <td>1730.0</td>\n",
       "      <td>191.056967</td>\n",
       "      <td>3.083090e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61585</th>\n",
       "      <td>SESSION_165310</td>\n",
       "      <td>1749.42</td>\n",
       "      <td>4</td>\n",
       "      <td>116</td>\n",
       "      <td>1674091.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.060470e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41885</th>\n",
       "      <td>SESSION_112650</td>\n",
       "      <td>1691.01</td>\n",
       "      <td>10</td>\n",
       "      <td>44</td>\n",
       "      <td>1503064.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.859515e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22758</th>\n",
       "      <td>SESSION_061199</td>\n",
       "      <td>1121.30</td>\n",
       "      <td>9</td>\n",
       "      <td>27</td>\n",
       "      <td>735871.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.257314e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4513</th>\n",
       "      <td>SESSION_012254</td>\n",
       "      <td>1137.33</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>777603.0</td>\n",
       "      <td>203.636595</td>\n",
       "      <td>8.717834e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37519</th>\n",
       "      <td>SESSION_101014</td>\n",
       "      <td>901.97</td>\n",
       "      <td>13</td>\n",
       "      <td>26</td>\n",
       "      <td>5188.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.135499e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3646</th>\n",
       "      <td>SESSION_009939</td>\n",
       "      <td>771.61</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>3787.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.953820e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33524</th>\n",
       "      <td>SESSION_090042</td>\n",
       "      <td>663.57</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.403251e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44787</th>\n",
       "      <td>SESSION_120429</td>\n",
       "      <td>1051.66</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>395.077044</td>\n",
       "      <td>4.311012e+05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         user_session  session_value  evt_BUY  n_events  session_duration_sec  \\\n",
       "42766  SESSION_114996        2328.66        1        48             1784786.0   \n",
       "14367  SESSION_038767        1946.93       29        93                1730.0   \n",
       "61585  SESSION_165310        1749.42        4       116             1674091.0   \n",
       "41885  SESSION_112650        1691.01       10        44             1503064.0   \n",
       "22758  SESSION_061199        1121.30        9        27              735871.0   \n",
       "4513   SESSION_012254        1137.33        2         6              777603.0   \n",
       "37519  SESSION_101014         901.97       13        26                5188.0   \n",
       "3646   SESSION_009939         771.61        2        10                3787.0   \n",
       "33524  SESSION_090042         663.57       10        10                   0.0   \n",
       "44787  SESSION_120429        1051.66       15        15                   0.0   \n",
       "\n",
       "         oof_pred         sqerr  \n",
       "42766    0.000000  5.422657e+06  \n",
       "14367  191.056967  3.083090e+06  \n",
       "61585    0.000000  3.060470e+06  \n",
       "41885    0.000000  2.859515e+06  \n",
       "22758    0.000000  1.257314e+06  \n",
       "4513   203.636595  8.717834e+05  \n",
       "37519    0.000000  8.135499e+05  \n",
       "3646     0.000000  5.953820e+05  \n",
       "33524    0.000000  4.403251e+05  \n",
       "44787  395.077044  4.311012e+05  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Top errors for inspection (optional)\n",
    "oof_df = train_sess[[\"user_session\",\"session_value\",\"evt_BUY\",\"n_events\",\"session_duration_sec\"]].copy()\n",
    "oof_df[\"oof_pred\"] = oof_pred\n",
    "oof_df[\"sqerr\"] = (oof_df[\"session_value\"] - oof_df[\"oof_pred\"])**2\n",
    "display(oof_df.sort_values(\"sqerr\", ascending=False).head(10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09be36c3",
   "metadata": {
    "papermill": {
     "duration": 0.004895,
     "end_time": "2025-08-26T11:48:50.345726",
     "exception": false,
     "start_time": "2025-08-26T11:48:50.340831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13341508,
     "sourceId": 112016,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 782.284281,
   "end_time": "2025-08-26T11:48:51.171995",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-26T11:35:48.887714",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
