{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":112016,"databundleVersionId":13341508,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# BTK Datathon 2025 — Solid EDA & Modeling Decision\n# Author: <Hamza Pecenek>\n# Goal: Understand the data thoroughly, decide on the best modeling approach for MSE, and prepare robust CV strategy.\n\nimport os, gc, sys, warnings, math, json, textwrap, random\nimport numpy as np\nimport pandas as pd\nfrom collections import Counter\nwarnings.filterwarnings(\"ignore\")\n\npd.set_option(\"display.max_columns\", 200)\npd.set_option(\"display.width\", 200)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:55:52.253321Z","iopub.execute_input":"2025-08-27T04:55:52.253637Z","iopub.status.idle":"2025-08-27T04:55:52.258916Z","shell.execute_reply.started":"2025-08-27T04:55:52.253613Z","shell.execute_reply":"2025-08-27T04:55:52.258026Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"# Paths (Kaggle will mount input path under /kaggle/input/<dataset-name>/)\n# For local runs, adjust accordingly.\nDATA_DIR = \"/kaggle/input/def quick_overview(df, name, n=5):\n    print(f\"=== {name} ===\")\n    print(\"shape:\", df.shape)\n    print(df.dtypes)\n    display(df.head(n))\n\nquick_overview(train, \"TRAIN\")\nquick_overview(sub, \"SAMPLE_SUBMISSION\")\n\n# As requested: test.csv — only a peek at columns / dtypes / basic counts (no deep drill)\nprint(\"\\n=== TEST (peek only) ===\")\nprint(\"shape:\", test.shape)\nprint(test.dtypes)\nprint(\"columns:\", test.columns.tolist())\ndisplay(test.head(3))\ndatathon-2025\" if os.path.exists(\"/kaggle/input\") else \"/mnt/data\"\n\ntrain_path = os.path.join(DATA_DIR, \"train.csv\")\ntest_path  = os.path.join(DATA_DIR, \"test.csv\")\nsub_path   = os.path.join(DATA_DIR, \"sample_submission.csv\")\n\ntrain = pd.read_csv(train_path)\ntest  = pd.read_csv(test_path)\nsub   = pd.read_csv(sub_path)\n\ntrain.shape, test.shape, sub.shape\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:57:03.561626Z","iopub.execute_input":"2025-08-27T04:57:03.561930Z","iopub.status.idle":"2025-08-27T04:57:04.330092Z","shell.execute_reply.started":"2025-08-27T04:57:03.561905Z","shell.execute_reply":"2025-08-27T04:57:04.329218Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"((141219, 7), (62951, 6), (30789, 2))"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"def quick_overview(df, name, n=5):\n    print(f\"=== {name} ===\")\n    print(\"shape:\", df.shape)\n    print(df.dtypes)\n    display(df.head(n))\n\nquick_overview(train, \"TRAIN\")\nquick_overview(sub, \"SAMPLE_SUBMISSION\")\n\n# As requested: test.csv — only a peek at columns / dtypes / basic counts (no deep drill)\nprint(\"\\n=== TEST (peek only) ===\")\nprint(\"shape:\", test.shape)\nprint(test.dtypes)\nprint(\"columns:\", test.columns.tolist())\ndisplay(test.head(3))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:57:26.586534Z","iopub.execute_input":"2025-08-27T04:57:26.586849Z","iopub.status.idle":"2025-08-27T04:57:26.629591Z","shell.execute_reply.started":"2025-08-27T04:57:26.586826Z","shell.execute_reply":"2025-08-27T04:57:26.628949Z"}},"outputs":[{"name":"stdout","text":"=== TRAIN ===\nshape: (141219, 7)\nevent_time        object\nevent_type        object\nproduct_id        object\ncategory_id       object\nuser_id           object\nuser_session      object\nsession_value    float64\ndtype: object\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                  event_time event_type   product_id category_id      user_id    user_session  session_value\n0  2025-06-19 10:23:07+00:00   ADD_CART  PROD_011223   CAT_00054  USER_097562  SESSION_158779          90.29\n1  2025-06-07 21:34:45+00:00   ADD_CART  PROD_005519   CAT_00144  USER_006535  SESSION_029987          16.39\n2  2025-06-21 21:29:09+00:00   ADD_CART  PROD_000577   CAT_00273  USER_047199  SESSION_022134          64.27\n3  2025-06-09 09:10:20+00:00   ADD_CART  PROD_019235   CAT_00442  USER_082028  SESSION_161308          41.67\n4  2025-06-19 11:13:58+00:00   ADD_CART  PROD_001702   CAT_00025  USER_096574  SESSION_182859          86.11","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>event_time</th>\n      <th>event_type</th>\n      <th>product_id</th>\n      <th>category_id</th>\n      <th>user_id</th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-06-19 10:23:07+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_011223</td>\n      <td>CAT_00054</td>\n      <td>USER_097562</td>\n      <td>SESSION_158779</td>\n      <td>90.29</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-06-07 21:34:45+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_005519</td>\n      <td>CAT_00144</td>\n      <td>USER_006535</td>\n      <td>SESSION_029987</td>\n      <td>16.39</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025-06-21 21:29:09+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_000577</td>\n      <td>CAT_00273</td>\n      <td>USER_047199</td>\n      <td>SESSION_022134</td>\n      <td>64.27</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2025-06-09 09:10:20+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_019235</td>\n      <td>CAT_00442</td>\n      <td>USER_082028</td>\n      <td>SESSION_161308</td>\n      <td>41.67</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2025-06-19 11:13:58+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_001702</td>\n      <td>CAT_00025</td>\n      <td>USER_096574</td>\n      <td>SESSION_182859</td>\n      <td>86.11</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"=== SAMPLE_SUBMISSION ===\nshape: (30789, 2)\nuser_session      object\nsession_value    float64\ndtype: object\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"     user_session  session_value\n0  SESSION_164059            0.0\n1  SESSION_109583            0.0\n2  SESSION_171382            0.0\n3  SESSION_137110            0.0\n4  SESSION_146503            0.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_session</th>\n      <th>session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>SESSION_164059</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>SESSION_109583</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>SESSION_171382</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>SESSION_137110</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SESSION_146503</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"name":"stdout","text":"\n=== TEST (peek only) ===\nshape: (62951, 6)\nevent_time      object\nevent_type      object\nproduct_id      object\ncategory_id     object\nuser_id         object\nuser_session    object\ndtype: object\ncolumns: ['event_time', 'event_type', 'product_id', 'category_id', 'user_id', 'user_session']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"                  event_time event_type   product_id category_id      user_id    user_session\n0  2025-06-28 10:09:58+00:00   ADD_CART  PROD_015000   CAT_00019  USER_109759  SESSION_164059\n1  2025-06-25 11:57:50+00:00   ADD_CART  PROD_023887   CAT_00010  USER_010614  SESSION_109583\n2  2025-06-30 14:34:20+00:00   ADD_CART  PROD_022673   CAT_00090  USER_041338  SESSION_171382","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>event_time</th>\n      <th>event_type</th>\n      <th>product_id</th>\n      <th>category_id</th>\n      <th>user_id</th>\n      <th>user_session</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025-06-28 10:09:58+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_015000</td>\n      <td>CAT_00019</td>\n      <td>USER_109759</td>\n      <td>SESSION_164059</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025-06-25 11:57:50+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_023887</td>\n      <td>CAT_00010</td>\n      <td>USER_010614</td>\n      <td>SESSION_109583</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025-06-30 14:34:20+00:00</td>\n      <td>ADD_CART</td>\n      <td>PROD_022673</td>\n      <td>CAT_00090</td>\n      <td>USER_041338</td>\n      <td>SESSION_171382</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"# Which columns are where\nprint(\"TRAIN columns:\", train.columns.tolist())\nprint(\"TEST columns:\", test.columns.tolist())\nprint(\"SUB columns:\",  sub.columns.tolist())\n\n# Check that 'session_value' only exists in train\nassert \"session_value\" in train.columns and \"session_value\" not in test.columns\n\n# ID consistency checks\nprint(\"\\nUnique counts:\")\nfor c in train.columns:\n    print(f\"  train[{c}] nunique:\", train[c].nunique())\nfor c in test.columns:\n    print(f\"  test[{c}] nunique:\", test[c].nunique())\n\n# Ensure sample_submission keys match test sessions (one row per session in sub)\nprint(\"\\nSubmission sessions:\", sub['user_session'].nunique())\nprint(\"Test sessions:     \", test['user_session'].nunique())\nprint(\"All sub sessions inside test? ->\", set(sub['user_session']).issubset(set(test['user_session'])))\n\n# No overlap of user_session across train & test (good practice check; expected = 0)\noverlap_sessions = set(train['user_session']).intersection(set(test['user_session']))\nprint(\"Overlap user_session train<->test:\", len(overlap_sessions))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:57:32.692652Z","iopub.execute_input":"2025-08-27T04:57:32.692917Z","iopub.status.idle":"2025-08-27T04:57:32.920343Z","shell.execute_reply.started":"2025-08-27T04:57:32.692899Z","shell.execute_reply":"2025-08-27T04:57:32.919505Z"}},"outputs":[{"name":"stdout","text":"TRAIN columns: ['event_time', 'event_type', 'product_id', 'category_id', 'user_id', 'user_session', 'session_value']\nTEST columns: ['event_time', 'event_type', 'product_id', 'category_id', 'user_id', 'user_session']\nSUB columns: ['user_session', 'session_value']\n\nUnique counts:\n  train[event_time] nunique: 128357\n  train[event_type] nunique: 4\n  train[product_id] nunique: 26470\n  train[category_id] nunique: 448\n  train[user_id] nunique: 51821\n  train[user_session] nunique: 70736\n  train[session_value] nunique: 12719\n  test[event_time] nunique: 56682\n  test[event_type] nunique: 4\n  test[product_id] nunique: 17450\n  test[category_id] nunique: 433\n  test[user_id] nunique: 22665\n  test[user_session] nunique: 30789\n\nSubmission sessions: 30789\nTest sessions:      30789\nAll sub sessions inside test? -> True\nOverlap user_session train<->test: 210\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"def missing_report(df):\n    miss = df.isna().mean().sort_values(ascending=False)\n    return miss[miss > 0]\n\nprint(\"Missing (train):\")\ndisplay(missing_report(train))\nprint(\"Missing (test):\")\ndisplay(missing_report(test))\n\n# Exact duplicate rows in train\ndup_rows = train.duplicated().sum()\nprint(\"Exact duplicate rows in TRAIN:\", dup_rows)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:57:39.036882Z","iopub.execute_input":"2025-08-27T04:57:39.037202Z","iopub.status.idle":"2025-08-27T04:57:39.246652Z","shell.execute_reply.started":"2025-08-27T04:57:39.037178Z","shell.execute_reply":"2025-08-27T04:57:39.245875Z"}},"outputs":[{"name":"stdout","text":"Missing (train):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Series([], dtype: float64)"},"metadata":{}},{"name":"stdout","text":"Missing (test):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"Series([], dtype: float64)"},"metadata":{}},{"name":"stdout","text":"Exact duplicate rows in TRAIN: 670\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"# Target is session-level: ensure it's constant within each session\ncheck = train.groupby(\"user_session\")[\"session_value\"].agg([\"min\", \"max\"])\ninconsistent = (check[\"min\"] != check[\"max\"]).sum()\nprint(f\"Sessions with inconsistent target (should be 0): {inconsistent}\")\n\n# Session-level target distribution\nsess_target = check[\"min\"].rename(\"session_value\")\ndisplay(sess_target.describe(percentiles=[.01,.05,.10,.25,.5,.75,.90,.95,.99]))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:57:43.603199Z","iopub.execute_input":"2025-08-27T04:57:43.603510Z","iopub.status.idle":"2025-08-27T04:57:43.738634Z","shell.execute_reply.started":"2025-08-27T04:57:43.603487Z","shell.execute_reply":"2025-08-27T04:57:43.737775Z"}},"outputs":[{"name":"stdout","text":"Sessions with inconsistent target (should be 0): 0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"count    70736.000000\nmean        42.198130\nstd         47.552369\nmin          5.380000\n1%           5.480000\n5%           7.490000\n10%          9.890000\n25%         18.530000\n50%         30.750000\n75%         46.620000\n90%         86.480000\n95%        121.330000\n99%        225.401000\nmax       2328.660000\nName: session_value, dtype: float64"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"train[\"_event_time\"] = pd.to_datetime(train[\"event_time\"], utc=True)\ntest[\"_event_time\"]  = pd.to_datetime(test[\"event_time\"],  utc=True)\n\nprint({\n    \"train_min\": train[\"_event_time\"].min(),\n    \"train_max\": train[\"_event_time\"].max(),\n    \"test_min\":  test[\"_event_time\"].min(),\n    \"test_max\":  test[\"_event_time\"].max(),\n})\n\n# As expected: train = 2025-06-01..2025-06-21; test = 2025-06-22..2025-06-30\n# => Use time-based CV with folds that respect chronology.\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:57:48.553543Z","iopub.execute_input":"2025-08-27T04:57:48.553826Z","iopub.status.idle":"2025-08-27T04:57:48.839890Z","shell.execute_reply.started":"2025-08-27T04:57:48.553807Z","shell.execute_reply":"2025-08-27T04:57:48.838942Z"}},"outputs":[{"name":"stdout","text":"{'train_min': Timestamp('2025-06-01 00:00:24+0000', tz='UTC'), 'train_max': Timestamp('2025-06-21 23:59:52+0000', tz='UTC'), 'test_min': Timestamp('2025-06-22 00:01:00+0000', tz='UTC'), 'test_max': Timestamp('2025-06-30 23:59:47+0000', tz='UTC')}\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"print(\"Event types in TRAIN:\")\ndisplay(train[\"event_type\"].value_counts())\n\n# (Peek only) Event types in TEST\nprint(\"\\nEvent types in TEST (peek):\")\ndisplay(test[\"event_type\"].value_counts())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:57:56.034582Z","iopub.execute_input":"2025-08-27T04:57:56.034874Z","iopub.status.idle":"2025-08-27T04:57:56.060503Z","shell.execute_reply.started":"2025-08-27T04:57:56.034851Z","shell.execute_reply":"2025-08-27T04:57:56.059292Z"}},"outputs":[{"name":"stdout","text":"Event types in TRAIN:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"event_type\nVIEW           58829\nADD_CART       42304\nREMOVE_CART    25615\nBUY            14471\nName: count, dtype: int64"},"metadata":{}},{"name":"stdout","text":"\nEvent types in TEST (peek):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"event_type\nVIEW           26903\nADD_CART       17159\nREMOVE_CART    12002\nBUY             6887\nName: count, dtype: int64"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"# We only aggregate TRAIN here to understand signals.\nt = train.copy()\nt[\"_event_time\"] = pd.to_datetime(t[\"event_time\"], utc=True)\n\ngrp = t.groupby(\"user_session\")\nsess = pd.DataFrame({\n    \"session_value\": grp[\"session_value\"].first(),\n    \"n_events\": grp.size(),\n    \"n_products\": grp[\"product_id\"].nunique(),\n    \"n_categories\": grp[\"category_id\"].nunique(),\n    \"n_event_types\": grp[\"event_type\"].nunique(),\n    \"duration_sec\": (grp[\"_event_time\"].max() - grp[\"_event_time\"].min()).dt.total_seconds(),\n})\n\nevt_counts = t.pivot_table(index=\"user_session\", columns=\"event_type\", values=\"_event_time\", aggfunc=\"count\").fillna(0)\nevt_counts.columns = [f\"cnt_{c.lower()}\" for c in evt_counts.columns]\n\nfirst_evt = grp[\"event_type\"].first().rename(\"first_event_type\")\nlast_evt  = grp[\"event_type\"].last().rename(\"last_event_type\")\n\nsess = sess.join(evt_counts, how=\"left\").join(first_evt).join(last_evt)\n\ndisplay(sess.head(3))\ndisplay(sess.describe().T)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:58:03.130554Z","iopub.execute_input":"2025-08-27T04:58:03.130887Z","iopub.status.idle":"2025-08-27T04:58:03.828830Z","shell.execute_reply.started":"2025-08-27T04:58:03.130862Z","shell.execute_reply":"2025-08-27T04:58:03.827968Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"                session_value  n_events  n_products  n_categories  n_event_types  duration_sec  cnt_add_cart  cnt_buy  cnt_remove_cart  cnt_view first_event_type last_event_type\nuser_session                                                                                                                                                                     \nSESSION_000000         355.80        28          24            20              2     1573367.0          20.0      0.0              8.0       0.0         ADD_CART     REMOVE_CART\nSESSION_000001          96.60         6           5             5              4        7818.0           2.0      1.0              2.0       1.0         ADD_CART             BUY\nSESSION_000004          30.92         1           1             1              1           0.0           0.0      0.0              0.0       1.0             VIEW            VIEW","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>session_value</th>\n      <th>n_events</th>\n      <th>n_products</th>\n      <th>n_categories</th>\n      <th>n_event_types</th>\n      <th>duration_sec</th>\n      <th>cnt_add_cart</th>\n      <th>cnt_buy</th>\n      <th>cnt_remove_cart</th>\n      <th>cnt_view</th>\n      <th>first_event_type</th>\n      <th>last_event_type</th>\n    </tr>\n    <tr>\n      <th>user_session</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>SESSION_000000</th>\n      <td>355.80</td>\n      <td>28</td>\n      <td>24</td>\n      <td>20</td>\n      <td>2</td>\n      <td>1573367.0</td>\n      <td>20.0</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>0.0</td>\n      <td>ADD_CART</td>\n      <td>REMOVE_CART</td>\n    </tr>\n    <tr>\n      <th>SESSION_000001</th>\n      <td>96.60</td>\n      <td>6</td>\n      <td>5</td>\n      <td>5</td>\n      <td>4</td>\n      <td>7818.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n      <td>ADD_CART</td>\n      <td>BUY</td>\n    </tr>\n    <tr>\n      <th>SESSION_000004</th>\n      <td>30.92</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>VIEW</td>\n      <td>VIEW</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"                   count         mean           std   min    25%    50%     75%         max\nsession_value    70736.0    42.198130     47.552369  5.38  18.53  30.75   46.62     2328.66\nn_events         70736.0     1.996423      2.579703  1.00   1.00   1.00    2.00      116.00\nn_products       70736.0     1.880457      2.333619  1.00   1.00   1.00    2.00      111.00\nn_categories     70736.0     1.506150      1.288043  1.00   1.00   1.00    1.00       61.00\nn_event_types    70736.0     1.298123      0.632178  1.00   1.00   1.00    1.00        4.00\nduration_sec     70736.0  5259.213343  61053.271307  0.00   0.00   0.00  120.00  1784786.00\ncnt_add_cart     70736.0     0.598055      1.231579  0.00   0.00   0.00    1.00       95.00\ncnt_buy          70736.0     0.204578      0.683491  0.00   0.00   0.00    0.00       29.00\ncnt_remove_cart  70736.0     0.362121      1.318835  0.00   0.00   0.00    0.00       73.00\ncnt_view         70736.0     0.831670      1.118691  0.00   0.00   1.00    1.00      103.00","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>session_value</th>\n      <td>70736.0</td>\n      <td>42.198130</td>\n      <td>47.552369</td>\n      <td>5.38</td>\n      <td>18.53</td>\n      <td>30.75</td>\n      <td>46.62</td>\n      <td>2328.66</td>\n    </tr>\n    <tr>\n      <th>n_events</th>\n      <td>70736.0</td>\n      <td>1.996423</td>\n      <td>2.579703</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>2.00</td>\n      <td>116.00</td>\n    </tr>\n    <tr>\n      <th>n_products</th>\n      <td>70736.0</td>\n      <td>1.880457</td>\n      <td>2.333619</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>2.00</td>\n      <td>111.00</td>\n    </tr>\n    <tr>\n      <th>n_categories</th>\n      <td>70736.0</td>\n      <td>1.506150</td>\n      <td>1.288043</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>61.00</td>\n    </tr>\n    <tr>\n      <th>n_event_types</th>\n      <td>70736.0</td>\n      <td>1.298123</td>\n      <td>0.632178</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>4.00</td>\n    </tr>\n    <tr>\n      <th>duration_sec</th>\n      <td>70736.0</td>\n      <td>5259.213343</td>\n      <td>61053.271307</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>120.00</td>\n      <td>1784786.00</td>\n    </tr>\n    <tr>\n      <th>cnt_add_cart</th>\n      <td>70736.0</td>\n      <td>0.598055</td>\n      <td>1.231579</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00</td>\n      <td>95.00</td>\n    </tr>\n    <tr>\n      <th>cnt_buy</th>\n      <td>70736.0</td>\n      <td>0.204578</td>\n      <td>0.683491</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>29.00</td>\n    </tr>\n    <tr>\n      <th>cnt_remove_cart</th>\n      <td>70736.0</td>\n      <td>0.362121</td>\n      <td>1.318835</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>73.00</td>\n    </tr>\n    <tr>\n      <th>cnt_view</th>\n      <td>70736.0</td>\n      <td>0.831670</td>\n      <td>1.118691</td>\n      <td>0.00</td>\n      <td>0.00</td>\n      <td>1.00</td>\n      <td>1.00</td>\n      <td>103.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Histogram of session_value\nplt.figure()\nsess[\"session_value\"].hist(bins=50)\nplt.title(\"Session Value Distribution (Session-level)\")\nplt.xlabel(\"session_value\"); plt.ylabel(\"count\")\nplt.show()\n\n# Log1p(session_value)\nplt.figure()\nnp.log1p(sess[\"session_value\"]).hist(bins=50)\nplt.title(\"log1p(Session Value)\")\nplt.xlabel(\"log1p(session_value)\"); plt.ylabel(\"count\")\nplt.show()\n\n# #events per session\nplt.figure()\nsess[\"n_events\"].hist(bins=50)\nplt.title(\"# Events per Session\")\nplt.xlabel(\"n_events\"); plt.ylabel(\"count\")\nplt.show()\n\n# Correlation heatmap among numeric session features\nnum_cols = [\"session_value\",\"n_events\",\"n_products\",\"n_categories\",\"n_event_types\",\n            \"duration_sec\",\"cnt_add_cart\",\"cnt_buy\",\"cnt_remove_cart\",\"cnt_view\"]\ncorr = sess[num_cols].corr()\n\nplt.figure()\nplt.imshow(corr, interpolation=\"nearest\")\nplt.xticks(range(corr.shape[1]), corr.columns, rotation=90)\nplt.yticks(range(corr.shape[1]), corr.columns)\nplt.colorbar()\nplt.title(\"Correlation Heatmap (Session-level)\")\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:58:12.934892Z","iopub.execute_input":"2025-08-27T04:58:12.935684Z","iopub.status.idle":"2025-08-27T04:58:14.167230Z","shell.execute_reply.started":"2025-08-27T04:58:12.935656Z","shell.execute_reply":"2025-08-27T04:58:14.166408Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":13},{"cell_type":"code","source":"has_buy = (sess[\"cnt_buy\"] > 0)\nprint(\"Share of sessions with >=1 BUY:\", has_buy.mean())\n\nprint(\"\\nSession value w/ BUY:\")\ndisplay(sess.loc[has_buy, \"session_value\"].describe())\n\nprint(\"\\nSession value w/o BUY:\")\ndisplay(sess.loc[~has_buy, \"session_value\"].describe())\n\n# Note: sessions without BUY still have meaningful session_value -> it's not a pure purchase-only label.\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:58:21.960571Z","iopub.execute_input":"2025-08-27T04:58:21.960862Z","iopub.status.idle":"2025-08-27T04:58:21.987693Z","shell.execute_reply.started":"2025-08-27T04:58:21.960842Z","shell.execute_reply":"2025-08-27T04:58:21.986413Z"}},"outputs":[{"name":"stdout","text":"Share of sessions with >=1 BUY: 0.12396799366659127\n\nSession value w/ BUY:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"count    8769.000000\nmean      129.450602\nstd        84.319022\nmin        15.690000\n25%        86.720000\n50%       109.150000\n75%       148.030000\nmax      2328.660000\nName: session_value, dtype: float64"},"metadata":{}},{"name":"stdout","text":"\nSession value w/o BUY:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"count    61967.000000\nmean        29.850962\nstd         18.585675\nmin          5.380000\n25%         16.870000\n50%         27.770000\n75%         39.520000\nmax        648.250000\nName: session_value, dtype: float64"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"print(\"Unique products:\", train[\"product_id\"].nunique())\nprint(\"Unique categories:\", train[\"category_id\"].nunique())\nprint(\"Unique users:\",     train[\"user_id\"].nunique())\nprint(\"Unique sessions:\",  train[\"user_session\"].nunique())\n\n# Top few frequent categories/products (row-level)\ndisplay(train[\"category_id\"].value_counts().head(10))\ndisplay(train[\"product_id\"].value_counts().head(10))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T04:58:29.179422Z","iopub.execute_input":"2025-08-27T04:58:29.180233Z","iopub.status.idle":"2025-08-27T04:58:29.284095Z","shell.execute_reply.started":"2025-08-27T04:58:29.180208Z","shell.execute_reply":"2025-08-27T04:58:29.283355Z"}},"outputs":[{"name":"stdout","text":"Unique products: 26470\nUnique categories: 448\nUnique users: 51821\nUnique sessions: 70736\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"category_id\nCAT_00090    6861\nCAT_00046    5016\nCAT_00010    5006\nCAT_00030    4660\nCAT_00027    4041\nCAT_00011    3880\nCAT_00025    3634\nCAT_00013    2952\nCAT_00308    2914\nCAT_00280    2812\nName: count, dtype: int64"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"product_id\nPROD_005510    359\nPROD_032827    330\nPROD_008353    301\nPROD_008391    275\nPROD_014428    267\nPROD_013130    254\nPROD_029741    243\nPROD_024488    242\nPROD_022837    237\nPROD_004457    236\nName: count, dtype: int64"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"# Top-N products and categories by frequency (train, row-level)\nprint(\"Unique products:\", train[\"product_id\"].nunique())\nprint(\"Unique categories:\", train[\"category_id\"].nunique())\nprint(\"Unique users:\",     train[\"user_id\"].nunique())\n\nprint(\"\\nTop 10 products (row-level):\")\ndisplay(train[\"product_id\"].value_counts().head(10))\n\nprint(\"\\nTop 10 categories (row-level):\")\ndisplay(train[\"category_id\"].value_counts().head(10))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:08:03.255902Z","iopub.execute_input":"2025-08-27T05:08:03.256597Z","iopub.status.idle":"2025-08-27T05:08:03.339432Z","shell.execute_reply.started":"2025-08-27T05:08:03.256564Z","shell.execute_reply":"2025-08-27T05:08:03.338626Z"}},"outputs":[{"name":"stdout","text":"Unique products: 26470\nUnique categories: 448\nUnique users: 51821\n\nTop 10 products (row-level):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"product_id\nPROD_005510    359\nPROD_032827    330\nPROD_008353    301\nPROD_008391    275\nPROD_014428    267\nPROD_013130    254\nPROD_029741    243\nPROD_024488    242\nPROD_022837    237\nPROD_004457    236\nName: count, dtype: int64"},"metadata":{}},{"name":"stdout","text":"\nTop 10 categories (row-level):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"category_id\nCAT_00090    6861\nCAT_00046    5016\nCAT_00010    5006\nCAT_00030    4660\nCAT_00027    4041\nCAT_00011    3880\nCAT_00025    3634\nCAT_00013    2952\nCAT_00308    2914\nCAT_00280    2812\nName: count, dtype: int64"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"# Sessions per user (train only)\nsess_per_user = train.groupby(\"user_id\")[\"user_session\"].nunique()\nprint(\"Users:\", sess_per_user.shape[0])\ndisplay(sess_per_user.describe(percentiles=[.5,.75,.9,.95,.99]))\n\n# Optional: quick histogram\nimport matplotlib.pyplot as plt\nplt.figure()\nsess_per_user.hist(bins=50)\nplt.title(\"Sessions per User (train)\")\nplt.xlabel(\"#sessions\"); plt.ylabel(\"count\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:08:17.426903Z","iopub.execute_input":"2025-08-27T05:08:17.427235Z","iopub.status.idle":"2025-08-27T05:08:17.759349Z","shell.execute_reply.started":"2025-08-27T05:08:17.427212Z","shell.execute_reply":"2025-08-27T05:08:17.758272Z"}},"outputs":[{"name":"stdout","text":"Users: 51821\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"count    51821.000000\nmean         1.365412\nstd          1.202873\nmin          1.000000\n50%          1.000000\n75%          1.000000\n90%          2.000000\n95%          3.000000\n99%          6.000000\nmax         47.000000\nName: user_session, dtype: float64"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":19},{"cell_type":"code","source":"# Build session-level frame if not available as `sess`\nt = train.copy()\nt[\"_event_time\"] = pd.to_datetime(t[\"event_time\"], utc=True)\ng = t.groupby(\"user_session\")\nsess2 = pd.DataFrame({\n    \"session_value\": g[\"session_value\"].first(),\n    \"cnt_buy\": t.pivot_table(index=\"user_session\", columns=\"event_type\",\n                             values=\"_event_time\", aggfunc=\"count\").fillna(0).get(\"BUY\", 0),\n})\n# Bin BUY counts\nbins = pd.cut(sess2[\"cnt_buy\"], bins=[-0.1,0,1,2,3,10], labels=[\"0\",\"1\",\"2\",\"3\",\"4+\"])\ndisplay(sess2.groupby(bins)[\"session_value\"].describe()[[\"count\",\"mean\",\"50%\",\"max\"]].rename(columns={\"50%\":\"median\"}))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:08:26.200728Z","iopub.execute_input":"2025-08-27T05:08:26.202170Z","iopub.status.idle":"2025-08-27T05:08:26.685626Z","shell.execute_reply.started":"2025-08-27T05:08:26.202128Z","shell.execute_reply":"2025-08-27T05:08:26.684704Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"           count        mean  median      max\ncnt_buy                                      \n0        61967.0   29.850962   27.77   648.25\n1         5462.0   94.889227   93.64  2328.66\n2         1999.0  145.937874  143.30  1137.33\n3          774.0  201.794186  198.26   577.30\n4+         525.0  306.819638  278.72  1749.42","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>median</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>cnt_buy</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>61967.0</td>\n      <td>29.850962</td>\n      <td>27.77</td>\n      <td>648.25</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5462.0</td>\n      <td>94.889227</td>\n      <td>93.64</td>\n      <td>2328.66</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1999.0</td>\n      <td>145.937874</td>\n      <td>143.30</td>\n      <td>1137.33</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>774.0</td>\n      <td>201.794186</td>\n      <td>198.26</td>\n      <td>577.30</td>\n    </tr>\n    <tr>\n      <th>4+</th>\n      <td>525.0</td>\n      <td>306.819638</td>\n      <td>278.72</td>\n      <td>1749.42</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"# Reuse/derive first/last event type\nfirst_evt = g[\"event_type\"].first().rename(\"first_event_type\")\nlast_evt  = g[\"event_type\"].last().rename(\"last_event_type\")\nsv = g[\"session_value\"].first()\n\ntmp = pd.concat([sv, first_evt, last_evt], axis=1)\n\nprint(\"Median session_value by FIRST event type:\")\ndisplay(tmp.groupby(\"first_event_type\")[\"session_value\"].median().sort_values(ascending=False))\n\nprint(\"\\nMedian session_value by LAST event type:\")\ndisplay(tmp.groupby(\"last_event_type\")[\"session_value\"].median().sort_values(ascending=False))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:08:37.182765Z","iopub.execute_input":"2025-08-27T05:08:37.183482Z","iopub.status.idle":"2025-08-27T05:08:37.261967Z","shell.execute_reply.started":"2025-08-27T05:08:37.183456Z","shell.execute_reply":"2025-08-27T05:08:37.261047Z"}},"outputs":[{"name":"stdout","text":"Median session_value by FIRST event type:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"first_event_type\nBUY            113.125\nADD_CART        41.430\nVIEW            24.370\nREMOVE_CART     14.560\nName: session_value, dtype: float64"},"metadata":{}},{"name":"stdout","text":"\nMedian session_value by LAST event type:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"last_event_type\nBUY            109.15\nADD_CART        37.82\nVIEW            25.34\nREMOVE_CART     21.31\nName: session_value, dtype: float64"},"metadata":{}}],"execution_count":21},{"cell_type":"code","source":"# Using your session-level features DataFrame `sess`\nnumeric_cols = [c for c in sess.columns if c not in [\"first_event_type\",\"last_event_type\"]]\ncorrs = sess[numeric_cols].corr().loc[\"session_value\"].sort_values(ascending=False)\ndisplay(corrs.to_frame(\"corr_with_session_value\"))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:08:45.791357Z","iopub.execute_input":"2025-08-27T05:08:45.792501Z","iopub.status.idle":"2025-08-27T05:08:45.829548Z","shell.execute_reply.started":"2025-08-27T05:08:45.792465Z","shell.execute_reply":"2025-08-27T05:08:45.828803Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"                 corr_with_session_value\nsession_value                   1.000000\ncnt_buy                         0.843656\nn_products                      0.542484\nn_events                        0.539518\nn_categories                    0.535605\nn_event_types                   0.427067\ncnt_add_cart                    0.355687\nduration_sec                    0.239316\ncnt_remove_cart                 0.201738\ncnt_view                        0.099266","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>corr_with_session_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>session_value</th>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>cnt_buy</th>\n      <td>0.843656</td>\n    </tr>\n    <tr>\n      <th>n_products</th>\n      <td>0.542484</td>\n    </tr>\n    <tr>\n      <th>n_events</th>\n      <td>0.539518</td>\n    </tr>\n    <tr>\n      <th>n_categories</th>\n      <td>0.535605</td>\n    </tr>\n    <tr>\n      <th>n_event_types</th>\n      <td>0.427067</td>\n    </tr>\n    <tr>\n      <th>cnt_add_cart</th>\n      <td>0.355687</td>\n    </tr>\n    <tr>\n      <th>duration_sec</th>\n      <td>0.239316</td>\n    </tr>\n    <tr>\n      <th>cnt_remove_cart</th>\n      <td>0.201738</td>\n    </tr>\n    <tr>\n      <th>cnt_view</th>\n      <td>0.099266</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":22},{"cell_type":"code","source":"# Top 10 sessions by session_value — spot-check only\ntop10 = sess2.sort_values(\"session_value\", ascending=False).head(10)\ndisplay(top10)\n\n# (Optional) Inspect their event mixes\ntop10_sessions = top10.index.tolist()\nmix = train[train[\"user_session\"].isin(top10_sessions)] \\\n      .pivot_table(index=\"user_session\", columns=\"event_type\", values=\"event_time\", aggfunc=\"count\").fillna(0)\ndisplay(mix)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:08:54.411833Z","iopub.execute_input":"2025-08-27T05:08:54.412184Z","iopub.status.idle":"2025-08-27T05:08:54.466711Z","shell.execute_reply.started":"2025-08-27T05:08:54.412161Z","shell.execute_reply":"2025-08-27T05:08:54.465963Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"                session_value  cnt_buy\nuser_session                          \nSESSION_114996        2328.66      1.0\nSESSION_038767        1946.93     29.0\nSESSION_165310        1749.42      4.0\nSESSION_112650        1691.01     10.0\nSESSION_012254        1137.33      2.0\nSESSION_061199        1121.30      9.0\nSESSION_120429        1051.66     15.0\nSESSION_143453         915.19     11.0\nSESSION_101014         901.97     13.0\nSESSION_049655         834.35      9.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>session_value</th>\n      <th>cnt_buy</th>\n    </tr>\n    <tr>\n      <th>user_session</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>SESSION_114996</th>\n      <td>2328.66</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_038767</th>\n      <td>1946.93</td>\n      <td>29.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_165310</th>\n      <td>1749.42</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_112650</th>\n      <td>1691.01</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_012254</th>\n      <td>1137.33</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_061199</th>\n      <td>1121.30</td>\n      <td>9.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_120429</th>\n      <td>1051.66</td>\n      <td>15.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_143453</th>\n      <td>915.19</td>\n      <td>11.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_101014</th>\n      <td>901.97</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_049655</th>\n      <td>834.35</td>\n      <td>9.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"event_type      ADD_CART   BUY  REMOVE_CART   VIEW\nuser_session                                      \nSESSION_012254       2.0   2.0          0.0    2.0\nSESSION_038767       1.0  29.0         63.0    0.0\nSESSION_049655       5.0   9.0          0.0    0.0\nSESSION_061199      11.0   9.0          2.0    5.0\nSESSION_101014       8.0  13.0          4.0    1.0\nSESSION_112650      20.0  10.0          1.0   13.0\nSESSION_114996      19.0   1.0         27.0    1.0\nSESSION_120429       0.0  15.0          0.0    0.0\nSESSION_143453       1.0  11.0          0.0    0.0\nSESSION_165310       6.0   4.0          3.0  103.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>event_type</th>\n      <th>ADD_CART</th>\n      <th>BUY</th>\n      <th>REMOVE_CART</th>\n      <th>VIEW</th>\n    </tr>\n    <tr>\n      <th>user_session</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>SESSION_012254</th>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_038767</th>\n      <td>1.0</td>\n      <td>29.0</td>\n      <td>63.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_049655</th>\n      <td>5.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_061199</th>\n      <td>11.0</td>\n      <td>9.0</td>\n      <td>2.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_101014</th>\n      <td>8.0</td>\n      <td>13.0</td>\n      <td>4.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_112650</th>\n      <td>20.0</td>\n      <td>10.0</td>\n      <td>1.0</td>\n      <td>13.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_114996</th>\n      <td>19.0</td>\n      <td>1.0</td>\n      <td>27.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_120429</th>\n      <td>0.0</td>\n      <td>15.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_143453</th>\n      <td>1.0</td>\n      <td>11.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>SESSION_165310</th>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>3.0</td>\n      <td>103.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":23},{"cell_type":"code","source":"# Safe dedup (train only); negligible count but removes noise\nbefore = train.shape[0]\ntrain = train.drop_duplicates().reset_index(drop=True)\nafter  = train.shape[0]\nprint(f\"Dropped {before - after} exact duplicate rows.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-27T05:09:11.768120Z","iopub.execute_input":"2025-08-27T05:09:11.768457Z","iopub.status.idle":"2025-08-27T05:09:11.927275Z","shell.execute_reply.started":"2025-08-27T05:09:11.768431Z","shell.execute_reply":"2025-08-27T05:09:11.926341Z"}},"outputs":[{"name":"stdout","text":"Dropped 670 exact duplicate rows.\n","output_type":"stream"}],"execution_count":24},{"cell_type":"markdown","source":"## EDA Conclusions (updated)\n\n**Data shape & schema**\n- `train.csv`: 141,219 rows × 7 cols; `test.csv`: 62,951 rows × 6 cols; `sample_submission.csv`: 30,789 rows × 2 cols.\n- Target **`session_value` is session-level** and **constant within each `user_session`** (0 inconsistencies).\n- No missing values. Found **670 exact duplicate rows** in train (safe to drop before modeling).\n\n**Time & split (critical for CV)**\n- Train time range: **2025-06-01 → 2025-06-21**.\n- Test time range: **2025-06-22 → 2025-06-30**.\n- Conclusion: use **time-based CV** that respects chronology; don’t use random KFold.\n\n**Keys & cardinality**\n- Unique sessions (train): **70,736**; (test): **30,789**; all submission sessions are present in test.\n- High-cardinality IDs: ~**26.5k products**, **448 categories**, **51.8k users**.\n- Implication: favor **aggregations** / counts over raw ID encodings.\n\n**Event vocabulary & mix**\n- Event types: `VIEW`, `ADD_CART`, `REMOVE_CART`, `BUY` (all present in both train and test on a peek).\n- Sessions are short: median **1** event per session (75% ≤ 2; long tail up to 116).\n\n**Target distribution (session-level)**\n- Right-skewed but not extreme. Key stats (train sessions):\n  - median ≈ **30.75**, 75% ≈ **46.62**, 90% ≈ **86.48**, 95% ≈ **121.33**, 99% ≈ **225.40**, max ≈ **2328.66**.\n- `log1p(session_value)` looks near-normal → candidate transformation to test.\n\n**Strong signals (session-level)**\n- Correlation with `session_value` (descending):\n  - **`cnt_buy` ~ 0.84** (very strong),\n  - `n_products`, `n_events`, `n_categories` ~ 0.54,\n  - `n_event_types` ~ 0.43,\n  - `duration_sec` ~ 0.24,\n  - `cnt_remove_cart` ~ 0.20,\n  - `cnt_view` ~ 0.10.\n- Only **~12.4%** of sessions have ≥1 BUY, but **sessions without BUY still have non-trivial target** (median ~27.8).\n\n**BUY analysis & event ordering**\n- `session_value` rises monotonically with BUY count (0 < 1 < 2 < 3+).\n- Median target varies by **first/last event type** (e.g., sessions ending with `BUY` tend to be higher) — justifies keeping one-hots for `first_event_type`/`last_event_type`.\n\n**Users & head items**\n- **Sessions per user** distribution is long-tailed (many users with a single session; a small head with multiple sessions).\n- **Top categories/products** exist (clear frequency head) — useful for later *history* features and for checking train→test drift.\n\n**Sanity checks**\n- Outlier review of top-value sessions shows plausible event mixes (not obvious data glitches).\n\n---\n\n### Modeling decision (for MSE)\n\n**Baseline approach**\n- Aggregate to **session level** (counts, uniques, duration, event-type counts; first/last event one-hots; simple ratios like `cnt_buy / n_products`).\n- Train a **LightGBM Regressor (`objective='rmse'`)** on these features.\n- **Time-based CV** (sequential folds by session start time) to match the public split behavior.\n- Optional: try **log1p(target)** training and inverse-transform for predictions; keep evaluation on original scale.\n\n**Next improvements (only if CV → LB both improve)**\n1. **Intra-session timing**: inter-event gap stats; recency (time since first/last); last-k event flags.\n2. **Past-only history features** per user/category/product (strictly computed within each CV fold to avoid leakage).\n3. Consider a **two-stage model** (classify high-value; then regress) only if the simple regressor is topped both in CV and LB.\n\n**Data hygiene**\n- Drop exact duplicate rows in train.\n- Do not inspect test beyond keys/column schema; never create features using future information.\n\n---\n","metadata":{}}]}