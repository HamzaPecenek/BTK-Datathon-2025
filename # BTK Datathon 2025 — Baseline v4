{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "703c55ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:17:39.209439Z",
     "iopub.status.busy": "2025-08-27T14:17:39.208615Z",
     "iopub.status.idle": "2025-08-27T14:17:41.083231Z",
     "shell.execute_reply": "2025-08-27T14:17:41.082166Z"
    },
    "papermill": {
     "duration": 1.887116,
     "end_time": "2025-08-27T14:17:41.085187",
     "exception": false,
     "start_time": "2025-08-27T14:17:39.198071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# =============================\n",
    "# BTK Datathon 2025 â€” CatBoost session-level baseline\n",
    "# =============================\n",
    "\n",
    "import os, gc, sys, json, math, random\n",
    "from pathlib import Path\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Reproducibility\n",
    "SEED = 42\n",
    "def seed_everything(seed=SEED):\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "seed_everything()\n",
    "\n",
    "# Fast display options\n",
    "pd.set_option(\"display.max_columns\", 200)\n",
    "pd.set_option(\"display.width\", 150)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "18426487",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:17:41.094308Z",
     "iopub.status.busy": "2025-08-27T14:17:41.093089Z",
     "iopub.status.idle": "2025-08-27T14:17:43.321545Z",
     "shell.execute_reply": "2025-08-27T14:17:43.320534Z"
    },
    "papermill": {
     "duration": 2.23442,
     "end_time": "2025-08-27T14:17:43.323373",
     "exception": false,
     "start_time": "2025-08-27T14:17:41.088953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    from catboost import CatBoostRegressor, Pool\n",
    "except Exception:\n",
    "    # Kaggle usually has catboost; this is a fallback.\n",
    "    !pip -q install catboost\n",
    "    from catboost import CatBoostRegressor, Pool\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0b2ba3cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:17:43.331325Z",
     "iopub.status.busy": "2025-08-27T14:17:43.330868Z",
     "iopub.status.idle": "2025-08-27T14:17:44.429851Z",
     "shell.execute_reply": "2025-08-27T14:17:44.428618Z"
    },
    "papermill": {
     "duration": 1.105334,
     "end_time": "2025-08-27T14:17:44.432072",
     "exception": false,
     "start_time": "2025-08-27T14:17:43.326738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (141219, 7)\n",
      "Test  shape: (62951, 6)\n",
      "Sub   shape: (30789, 2)\n"
     ]
    }
   ],
   "source": [
    "DATA_DIR = Path(\"/kaggle/input/datathon-2025\")\n",
    "\n",
    "train = pd.read_csv(DATA_DIR / \"train.csv\")\n",
    "test  = pd.read_csv(DATA_DIR / \"test.csv\")\n",
    "sub   = pd.read_csv(DATA_DIR / \"sample_submission.csv\")\n",
    "\n",
    "print(\"Train shape:\", train.shape)\n",
    "print(\"Test  shape:\", test.shape)\n",
    "print(\"Sub   shape:\", sub.shape)\n",
    "\n",
    "# Parse datetimes\n",
    "for df in (train, test):\n",
    "    df[\"event_time\"] = pd.to_datetime(df[\"event_time\"], utc=True, errors=\"coerce\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bfe83f0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:17:44.440931Z",
     "iopub.status.busy": "2025-08-27T14:17:44.440400Z",
     "iopub.status.idle": "2025-08-27T14:17:44.594052Z",
     "shell.execute_reply": "2025-08-27T14:17:44.592923Z"
    },
    "papermill": {
     "duration": 0.159698,
     "end_time": "2025-08-27T14:17:44.595681",
     "exception": false,
     "start_time": "2025-08-27T14:17:44.435983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "session_value nunique per session (train):\n",
      " session_value\n",
      "1    70736\n",
      "Name: count, dtype: int64\n",
      "Test sessions: 30789 | Submission sessions: 30789 | Equal: True\n"
     ]
    }
   ],
   "source": [
    "# Each session in train has a unique target (confirmed earlier, but double-check)\n",
    "sess_target_nunique = train.groupby(\"user_session\")[\"session_value\"].nunique().value_counts().sort_index()\n",
    "print(\"session_value nunique per session (train):\\n\", sess_target_nunique)\n",
    "\n",
    "# Make sure sample_submission sessions match test sessions\n",
    "n_test_sess = test[\"user_session\"].nunique()\n",
    "n_sub_sess  = sub[\"user_session\"].nunique()\n",
    "print(\"Test sessions:\", n_test_sess, \"| Submission sessions:\", n_sub_sess, \"| Equal:\", n_test_sess == n_sub_sess)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "34396499",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:17:44.603695Z",
     "iopub.status.busy": "2025-08-27T14:17:44.603290Z",
     "iopub.status.idle": "2025-08-27T14:17:44.733833Z",
     "shell.execute_reply": "2025-08-27T14:17:44.732586Z"
    },
    "papermill": {
     "duration": 0.136599,
     "end_time": "2025-08-27T14:17:44.735574",
     "exception": false,
     "start_time": "2025-08-27T14:17:44.598975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "\n",
    "ALL_EVENT_TYPES = sorted(set(train[\"event_type\"]).union(set(test[\"event_type\"])))\n",
    "\n",
    "def _has_remove_after_add(events_ordered):\n",
    "    \"\"\"Return 1 if a REMOVE_CART happens after an ADD_CART in ordered events.\"\"\"\n",
    "    seen_add = False\n",
    "    for e in events_ordered:\n",
    "        if e == \"ADD_CART\":\n",
    "            seen_add = True\n",
    "        elif e == \"REMOVE_CART\" and seen_add:\n",
    "            return 1\n",
    "    return 0\n",
    "\n",
    "def build_session_features(df_events: pd.DataFrame) -> pd.DataFrame:\n",
    "    \"\"\"\n",
    "    Build one row per session:\n",
    "    - counts by event_type\n",
    "    - n_events, unique products/categories\n",
    "    - session duration, events/minute\n",
    "    - first/last event type, hour/dow of first/last\n",
    "    - bool flags (has_buy, remove_after_add), simple ratios\n",
    "    - keep user_id for grouping & (optional) as categorical feature\n",
    "    \"\"\"\n",
    "    # Sort by time within session for sequential features\n",
    "    df = df_events.sort_values([\"user_session\", \"event_time\"]).copy()\n",
    "\n",
    "    # Basic aggregates\n",
    "    g = df.groupby(\"user_session\")\n",
    "\n",
    "    # User id per session (unique)\n",
    "    sess_user = g[\"user_id\"].agg(lambda x: x.iloc[0])\n",
    "\n",
    "    # Time features\n",
    "    first_time = g[\"event_time\"].min()\n",
    "    last_time  = g[\"event_time\"].max()\n",
    "    duration_s = (last_time - first_time).dt.total_seconds().fillna(0)\n",
    "    n_events   = g.size().astype(\"int32\")\n",
    "\n",
    "    # Event counts by type (ensure same columns across train/test)\n",
    "    evt_counts = pd.crosstab(df[\"user_session\"], df[\"event_type\"]).reindex(columns=ALL_EVENT_TYPES, fill_value=0)\n",
    "    evt_counts.columns = [f\"cnt_{c.lower()}\" for c in evt_counts.columns]  # e.g., cnt_buy, cnt_view\n",
    "\n",
    "    # Unique counts\n",
    "    nunique_prod = g[\"product_id\"].nunique().rename(\"nuniq_product\")\n",
    "    nunique_cat  = g[\"category_id\"].nunique().rename(\"nuniq_category\")\n",
    "\n",
    "    # First/last event_type\n",
    "    first_evt = g[\"event_type\"].first().rename(\"first_event_type\")\n",
    "    last_evt  = g[\"event_type\"].last().rename(\"last_event_type\")\n",
    "\n",
    "    # Order-dependent boolean: remove after add\n",
    "    seq_flags = g[\"event_type\"].apply(lambda s: _has_remove_after_add(s.values)).rename(\"has_remove_after_add\")\n",
    "\n",
    "    # Has BUY\n",
    "    has_buy = g[\"event_type\"].apply(lambda s: int((s == \"BUY\").any())).rename(\"has_buy\")\n",
    "\n",
    "    # Hour/DOW of first/last\n",
    "    f_hour = first_time.dt.hour.rename(\"first_hour\")\n",
    "    l_hour = last_time.dt.hour.rename(\"last_hour\")\n",
    "    f_dow  = first_time.dt.dayofweek.rename(\"first_dow\")  # Monday=0\n",
    "    l_dow  = last_time.dt.dayofweek.rename(\"last_dow\")\n",
    "\n",
    "    # Assemble frame\n",
    "    S = pd.DataFrame({\n",
    "        \"user_session\": evt_counts.index,\n",
    "        \"user_id\": sess_user.values,\n",
    "        \"n_events\": n_events.values,\n",
    "        \"duration_s\": duration_s.values,\n",
    "        \"first_hour\": f_hour.values,\n",
    "        \"last_hour\": l_hour.values,\n",
    "        \"first_dow\": f_dow.values,\n",
    "        \"last_dow\": l_dow.values,\n",
    "        \"nuniq_product\": nunique_prod.values,\n",
    "        \"nuniq_category\": nunique_cat.values,\n",
    "        \"has_buy\": has_buy.values,\n",
    "        \"has_remove_after_add\": seq_flags.values,\n",
    "    }).set_index(\"user_session\")\n",
    "\n",
    "    # Attach event count columns\n",
    "    S = S.join(evt_counts, how=\"left\").fillna(0)\n",
    "\n",
    "    # Ratios (safe divisions)\n",
    "    add_ = S.get(\"cnt_add_cart\", pd.Series(0, index=S.index))\n",
    "    rem_ = S.get(\"cnt_remove_cart\", pd.Series(0, index=S.index))\n",
    "    buy_ = S.get(\"cnt_buy\", pd.Series(0, index=S.index))\n",
    "    view = S.get(\"cnt_view\", pd.Series(0, index=S.index))\n",
    "\n",
    "    S[\"net_cart_changes\"] = add_ - rem_\n",
    "    S[\"buy_to_add_ratio\"] = np.where(add_ > 0, buy_ / add_, 0.0)\n",
    "    S[\"add_to_view_ratio\"] = np.where(view > 0, add_ / view, 0.0)\n",
    "    S[\"events_per_min\"]   = np.where(S[\"duration_s\"] > 0, S[\"n_events\"] / (S[\"duration_s\"] / 60.0), S[\"n_events\"])\n",
    "\n",
    "    # User-level frequency (computed on full union, no target leakage)\n",
    "    return S\n",
    "\n",
    "def add_user_level_counts(S_tr: pd.DataFrame, S_te: pd.DataFrame) -> tuple[pd.DataFrame, pd.DataFrame]:\n",
    "    # number of sessions per user across train+test\n",
    "    tmp = pd.concat([S_tr[[\"user_id\"]], S_te[[\"user_id\"]]], axis=0)\n",
    "    user_sess_count = tmp[\"user_id\"].value_counts()\n",
    "    S_tr[\"user_session_count\"] = S_tr[\"user_id\"].map(user_sess_count).astype(\"int32\")\n",
    "    S_te[\"user_session_count\"] = S_te[\"user_id\"].map(user_sess_count).astype(\"int32\")\n",
    "    return S_tr, S_te\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f39c457f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:17:44.743539Z",
     "iopub.status.busy": "2025-08-27T14:17:44.743179Z",
     "iopub.status.idle": "2025-08-27T14:17:58.456858Z",
     "shell.execute_reply": "2025-08-27T14:17:58.455710Z"
    },
    "papermill": {
     "duration": 13.719266,
     "end_time": "2025-08-27T14:17:58.458305",
     "exception": false,
     "start_time": "2025-08-27T14:17:44.739039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S_train: (70736, 20) | S_test: (30789, 20)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>n_events</th>\n",
       "      <th>duration_s</th>\n",
       "      <th>first_hour</th>\n",
       "      <th>last_hour</th>\n",
       "      <th>first_dow</th>\n",
       "      <th>last_dow</th>\n",
       "      <th>nuniq_product</th>\n",
       "      <th>nuniq_category</th>\n",
       "      <th>has_buy</th>\n",
       "      <th>has_remove_after_add</th>\n",
       "      <th>cnt_add_cart</th>\n",
       "      <th>cnt_buy</th>\n",
       "      <th>cnt_remove_cart</th>\n",
       "      <th>cnt_view</th>\n",
       "      <th>net_cart_changes</th>\n",
       "      <th>buy_to_add_ratio</th>\n",
       "      <th>add_to_view_ratio</th>\n",
       "      <th>events_per_min</th>\n",
       "      <th>user_session_count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_session</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>SESSION_000000</th>\n",
       "      <td>USER_060383</td>\n",
       "      <td>28</td>\n",
       "      <td>1573367.0</td>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.001068</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SESSION_000001</th>\n",
       "      <td>USER_023172</td>\n",
       "      <td>6</td>\n",
       "      <td>7818.0</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.046048</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SESSION_000004</th>\n",
       "      <td>USER_065806</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    user_id  n_events  duration_s  first_hour  last_hour  first_dow  last_dow  nuniq_product  nuniq_category  has_buy  \\\n",
       "user_session                                                                                                                            \n",
       "SESSION_000000  USER_060383        28   1573367.0          12         17          0         4             24              20        0   \n",
       "SESSION_000001  USER_023172         6      7818.0           3          6          0         0              5               5        1   \n",
       "SESSION_000004  USER_065806         1         0.0          10         10          2         2              1               1        0   \n",
       "\n",
       "                has_remove_after_add  cnt_add_cart  cnt_buy  cnt_remove_cart  cnt_view  net_cart_changes  buy_to_add_ratio  add_to_view_ratio  \\\n",
       "user_session                                                                                                                                    \n",
       "SESSION_000000                     1            20        0                8         0                12               0.0                0.0   \n",
       "SESSION_000001                     1             2        1                2         1                 0               0.5                2.0   \n",
       "SESSION_000004                     0             0        0                0         1                 0               0.0                0.0   \n",
       "\n",
       "                events_per_min  user_session_count  \n",
       "user_session                                        \n",
       "SESSION_000000        0.001068                   1  \n",
       "SESSION_000001        0.046048                   1  \n",
       "SESSION_000004        1.000000                   1  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Session-level features\n",
    "S_train = build_session_features(train)\n",
    "S_test  = build_session_features(test)\n",
    "\n",
    "# Attach target to S_train (unique per session)\n",
    "y = train.groupby(\"user_session\")[\"session_value\"].first().reindex(S_train.index).astype(\"float32\")\n",
    "\n",
    "# Ensure strict column alignment for counts (already aligned by build function)\n",
    "S_train, S_test = add_user_level_counts(S_train, S_test)\n",
    "\n",
    "print(\"S_train:\", S_train.shape, \"| S_test:\", S_test.shape)\n",
    "S_train.head(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "90902ba5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:17:58.466967Z",
     "iopub.status.busy": "2025-08-27T14:17:58.466571Z",
     "iopub.status.idle": "2025-08-27T14:17:58.514456Z",
     "shell.execute_reply": "2025-08-27T14:17:58.513559Z"
    },
    "papermill": {
     "duration": 0.053885,
     "end_time": "2025-08-27T14:17:58.515959",
     "exception": false,
     "start_time": "2025-08-27T14:17:58.462074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of features: 22\n",
      "Categorical features present: ['user_id', 'first_event_type', 'last_event_type']\n"
     ]
    }
   ],
   "source": [
    "# Cell 7 â€” Prepare CatBoost features (SAFE)\n",
    "\n",
    "# Categorical columns we want CatBoost to treat as categories\n",
    "cat_cols = [\"user_id\", \"first_event_type\", \"last_event_type\"]\n",
    "\n",
    "# Make sure these columns exist in both train/test and are strings\n",
    "for c in cat_cols:\n",
    "    if c not in S_train.columns:\n",
    "        S_train[c] = \"NA\"\n",
    "    if c not in S_test.columns:\n",
    "        S_test[c] = \"NA\"\n",
    "    S_train[c] = S_train[c].astype(str).fillna(\"NA\")\n",
    "    S_test[c] = S_test[c].astype(str).fillna(\"NA\")\n",
    "\n",
    "# Feature list (all columns of the session table)\n",
    "FEATURES = S_train.columns.tolist()\n",
    "\n",
    "# Keep column order consistent\n",
    "S_test = S_test.reindex(columns=FEATURES)\n",
    "\n",
    "print(\"Number of features:\", len(FEATURES))\n",
    "print(\"Categorical features present:\", [c for c in cat_cols if c in FEATURES])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "56b95f79",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:17:58.525780Z",
     "iopub.status.busy": "2025-08-27T14:17:58.525282Z",
     "iopub.status.idle": "2025-08-27T14:25:05.337698Z",
     "shell.execute_reply": "2025-08-27T14:25:05.336751Z"
    },
    "papermill": {
     "duration": 426.822581,
     "end_time": "2025-08-27T14:25:05.342458",
     "exception": false,
     "start_time": "2025-08-27T14:17:58.519877",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Categorical feature indices: [0, 20, 21]\n",
      "Fold 1 MAE: 10.7444 | best_iter: 1749\n",
      "Fold 2 MAE: 10.8267 | best_iter: 1073\n",
      "Fold 3 MAE: 10.4718 | best_iter: 1733\n",
      "Fold 4 MAE: 10.6938 | best_iter: 826\n",
      "Fold 5 MAE: 10.6521 | best_iter: 529\n",
      "\n",
      "CV MAE (OOF): 10.67774\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "cnt_buy                 28.098077\n",
       "has_buy                 18.946110\n",
       "nuniq_product            7.557486\n",
       "cnt_add_cart             5.384718\n",
       "nuniq_category           4.603882\n",
       "net_cart_changes         4.571023\n",
       "n_events                 4.270763\n",
       "first_hour               3.566635\n",
       "cnt_remove_cart          3.386814\n",
       "duration_s               3.164612\n",
       "last_hour                2.700631\n",
       "user_session_count       2.694467\n",
       "events_per_min           2.427408\n",
       "first_dow                2.370209\n",
       "cnt_view                 2.090428\n",
       "last_dow                 1.560985\n",
       "add_to_view_ratio        0.930412\n",
       "buy_to_add_ratio         0.757272\n",
       "user_id                  0.662708\n",
       "has_remove_after_add     0.255362\n",
       "dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cell 8 â€” Cross-Validation with GroupKFold(user_id) [FIXED]\n",
    "\n",
    "from sklearn.model_selection import GroupKFold\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "N_FOLDS = 5\n",
    "gkf = GroupKFold(n_splits=N_FOLDS)\n",
    "\n",
    "oof = np.zeros(len(S_train), dtype=\"float32\")\n",
    "feature_importances = pd.Series(0.0, index=FEATURES)\n",
    "best_iters = []\n",
    "\n",
    "groups = S_train[\"user_id\"].values  # group by user_id\n",
    "X = S_train[FEATURES].copy()\n",
    "\n",
    "# Use column indices for categorical features (safer)\n",
    "cat_idx = [X.columns.get_loc(c) for c in cat_cols if c in X.columns]\n",
    "print(\"Categorical feature indices:\", cat_idx)\n",
    "\n",
    "for fold, (tr_idx, va_idx) in enumerate(gkf.split(X, y, groups=groups), 1):\n",
    "    X_tr, X_va = X.iloc[tr_idx], X.iloc[va_idx]\n",
    "    y_tr, y_va = y.iloc[tr_idx], y.iloc[va_idx]\n",
    "\n",
    "    train_pool = Pool(\n",
    "        data=X_tr,\n",
    "        label=y_tr,\n",
    "        cat_features=cat_idx,\n",
    "        feature_names=X.columns.tolist(),  # keep names aligned\n",
    "    )\n",
    "    valid_pool = Pool(\n",
    "        data=X_va,\n",
    "        label=y_va,\n",
    "        cat_features=cat_idx,\n",
    "        feature_names=X.columns.tolist(),\n",
    "    )\n",
    "\n",
    "    model = CatBoostRegressor(\n",
    "        loss_function=\"MAE\",\n",
    "        eval_metric=\"MAE\",\n",
    "        learning_rate=0.05,\n",
    "        depth=8,\n",
    "        l2_leaf_reg=3.0,\n",
    "        iterations=20000,\n",
    "        random_seed=SEED,\n",
    "        od_type=\"Iter\",\n",
    "        od_wait=500,\n",
    "        verbose=False,\n",
    "    )\n",
    "\n",
    "    model.fit(train_pool, eval_set=valid_pool, verbose=False)\n",
    "    pred_va = model.predict(valid_pool)\n",
    "    oof[va_idx] = pred_va\n",
    "\n",
    "    mae = mean_absolute_error(y_va, pred_va)\n",
    "    best_it = model.get_best_iteration()\n",
    "    best_iters.append(best_it if best_it and best_it > 0 else model.tree_count_)\n",
    "\n",
    "    fi = pd.Series(model.get_feature_importance(type=\"PredictionValuesChange\"), index=FEATURES)\n",
    "    feature_importances += fi\n",
    "\n",
    "    print(f\"Fold {fold} MAE: {mae:.4f} | best_iter: {best_iters[-1]}\")\n",
    "\n",
    "cv_mae = mean_absolute_error(y, oof)\n",
    "feature_importances /= N_FOLDS\n",
    "print(f\"\\nCV MAE (OOF): {cv_mae:.5f}\")\n",
    "feature_importances.sort_values(ascending=False).head(20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1f26e0f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:25:05.351688Z",
     "iopub.status.busy": "2025-08-27T14:25:05.351330Z",
     "iopub.status.idle": "2025-08-27T14:26:04.310942Z",
     "shell.execute_reply": "2025-08-27T14:26:04.309693Z"
    },
    "papermill": {
     "duration": 58.969676,
     "end_time": "2025-08-27T14:26:04.316163",
     "exception": false,
     "start_time": "2025-08-27T14:25:05.346487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final iterations: 1073\n",
      "Test predictions: (30789,)  | min/max: 5.188220886506468 910.346470827905\n"
     ]
    }
   ],
   "source": [
    "# Use a conservative iteration count (median of best iters from CV)\n",
    "final_iters = int(np.median(best_iters)) if len(best_iters) else 4000\n",
    "print(\"Final iterations:\", final_iters)\n",
    "\n",
    "full_pool = Pool(data=S_train, label=y, cat_features=cat_cols)\n",
    "\n",
    "final_model = CatBoostRegressor(\n",
    "    loss_function=\"MAE\",\n",
    "    eval_metric=\"MAE\",\n",
    "    learning_rate=0.05,\n",
    "    depth=8,\n",
    "    l2_leaf_reg=3.0,\n",
    "    iterations=final_iters,\n",
    "    random_seed=SEED,\n",
    "    verbose=False,\n",
    ")\n",
    "final_model.fit(full_pool, verbose=False)\n",
    "\n",
    "# Predict on test\n",
    "test_pool = Pool(data=S_test, cat_features=cat_cols)\n",
    "p_test = final_model.predict(test_pool)\n",
    "\n",
    "print(\"Test predictions:\", p_test.shape, \" | min/max:\", float(np.min(p_test)), float(np.max(p_test)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9aaa8d05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:26:04.325230Z",
     "iopub.status.busy": "2025-08-27T14:26:04.324917Z",
     "iopub.status.idle": "2025-08-27T14:26:04.408234Z",
     "shell.execute_reply": "2025-08-27T14:26:04.407315Z"
    },
    "papermill": {
     "duration": 0.08986,
     "end_time": "2025-08-27T14:26:04.410049",
     "exception": false,
     "start_time": "2025-08-27T14:26:04.320189",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_session</th>\n",
       "      <th>session_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SESSION_164059</td>\n",
       "      <td>202.283615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SESSION_109583</td>\n",
       "      <td>47.088673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SESSION_171382</td>\n",
       "      <td>43.365231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SESSION_137110</td>\n",
       "      <td>30.882711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SESSION_146503</td>\n",
       "      <td>172.380753</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_session  session_value\n",
       "0  SESSION_164059     202.283615\n",
       "1  SESSION_109583      47.088673\n",
       "2  SESSION_171382      43.365231\n",
       "3  SESSION_137110      30.882711\n",
       "4  SESSION_146503     172.380753"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sub_out = sub.copy()\n",
    "# Align by user_session (sub has user_session column)\n",
    "pred_map = pd.Series(p_test, index=S_test.index)\n",
    "sub_out[\"session_value\"] = sub_out[\"user_session\"].map(pred_map).astype(\"float32\")\n",
    "\n",
    "# Safety: Replace any NaNs (should not happen)\n",
    "sub_out[\"session_value\"] = sub_out[\"session_value\"].fillna(sub_out[\"session_value\"].median())\n",
    "\n",
    "sub_out.to_csv(\"submission.csv\", index=False)\n",
    "sub_out.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "02ddd9b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T14:26:04.419566Z",
     "iopub.status.busy": "2025-08-27T14:26:04.419238Z",
     "iopub.status.idle": "2025-08-27T14:26:04.655793Z",
     "shell.execute_reply": "2025-08-27T14:26:04.654729Z"
    },
    "papermill": {
     "duration": 0.243261,
     "end_time": "2025-08-27T14:26:04.657444",
     "exception": false,
     "start_time": "2025-08-27T14:26:04.414183",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance_pvc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>user_id</td>\n",
       "      <td>0.662708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>n_events</td>\n",
       "      <td>4.270763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>duration_s</td>\n",
       "      <td>3.164612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>first_hour</td>\n",
       "      <td>3.566635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>last_hour</td>\n",
       "      <td>2.700631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>first_dow</td>\n",
       "      <td>2.370209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>last_dow</td>\n",
       "      <td>1.560985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>nuniq_product</td>\n",
       "      <td>7.557486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>nuniq_category</td>\n",
       "      <td>4.603882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>has_buy</td>\n",
       "      <td>18.946110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>has_remove_after_add</td>\n",
       "      <td>0.255362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>cnt_add_cart</td>\n",
       "      <td>5.384718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>cnt_buy</td>\n",
       "      <td>28.098077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>cnt_remove_cart</td>\n",
       "      <td>3.386814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>cnt_view</td>\n",
       "      <td>2.090428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>net_cart_changes</td>\n",
       "      <td>4.571023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>buy_to_add_ratio</td>\n",
       "      <td>0.757272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>add_to_view_ratio</td>\n",
       "      <td>0.930412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>events_per_min</td>\n",
       "      <td>2.427408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>user_session_count</td>\n",
       "      <td>2.694467</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 feature  importance_pvc\n",
       "0                user_id        0.662708\n",
       "1               n_events        4.270763\n",
       "2             duration_s        3.164612\n",
       "3             first_hour        3.566635\n",
       "4              last_hour        2.700631\n",
       "5              first_dow        2.370209\n",
       "6               last_dow        1.560985\n",
       "7          nuniq_product        7.557486\n",
       "8         nuniq_category        4.603882\n",
       "9                has_buy       18.946110\n",
       "10  has_remove_after_add        0.255362\n",
       "11          cnt_add_cart        5.384718\n",
       "12               cnt_buy       28.098077\n",
       "13       cnt_remove_cart        3.386814\n",
       "14              cnt_view        2.090428\n",
       "15      net_cart_changes        4.571023\n",
       "16      buy_to_add_ratio        0.757272\n",
       "17     add_to_view_ratio        0.930412\n",
       "18        events_per_min        2.427408\n",
       "19    user_session_count        2.694467"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Useful for offline diagnostics\n",
    "oof_df = pd.DataFrame({\n",
    "    \"user_session\": S_train.index,\n",
    "    \"y\": y.values,\n",
    "    \"oof_pred\": oof,\n",
    "})\n",
    "oof_df.to_csv(\"oof_catboost.csv\", index=False)\n",
    "\n",
    "fi_df = feature_importances.reset_index()\n",
    "fi_df.columns = [\"feature\", \"importance_pvc\"]\n",
    "fi_df.sort_values(\"importance_pvc\", ascending=False).to_csv(\"fi_catboost.csv\", index=False)\n",
    "\n",
    "fi_df.head(20)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8151f92",
   "metadata": {
    "papermill": {
     "duration": 0.003985,
     "end_time": "2025-08-27T14:26:04.665960",
     "exception": false,
     "start_time": "2025-08-27T14:26:04.661975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13341508,
     "sourceId": 112016,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 511.593747,
   "end_time": "2025-08-27T14:26:05.492533",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T14:17:33.898786",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
