{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c15fd78c",
   "metadata": {
    "papermill": {
     "duration": 0.004442,
     "end_time": "2025-08-27T07:10:09.229197",
     "exception": false,
     "start_time": "2025-08-27T07:10:09.224755",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**What’s new vs v1**\n",
    "- Time-aware rolling CV (train on past days → validate on next day)\n",
    "- Rich session features (transitions, tempo, diversity, buy timing)\n",
    "- Forward-safe impact encodings (user/category/product) w/ no leakage\n",
    "- Two models: log1p-MSE & Tweedie; then blended\n",
    "- Clipped predictions to reduce rare blow-ups\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "787b4405",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:09.237761Z",
     "iopub.status.busy": "2025-08-27T07:10:09.237464Z",
     "iopub.status.idle": "2025-08-27T07:10:18.449419Z",
     "shell.execute_reply": "2025-08-27T07:10:18.448544Z"
    },
    "papermill": {
     "duration": 9.218264,
     "end_time": "2025-08-27T07:10:18.451162",
     "exception": false,
     "start_time": "2025-08-27T07:10:09.232898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# =============================\n",
    "# Imports & Global Config\n",
    "# =============================\n",
    "import os, gc, warnings, math\n",
    "from pathlib import Path\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import lightgbm as lgb\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "CFG = {\n",
    "    \"seed\": 42,\n",
    "    \"n_folds\": 6,             # # of rolling day folds\n",
    "    \"min_train_days\": 7,      # minimum training horizon before first validation day\n",
    "    \"gap_days\": 0,            # purge gap between train and validation (in days)\n",
    "    \"learning_rate\": 0.05,\n",
    "    \"num_leaves\": 63,\n",
    "    \"min_data_in_leaf\": 100,\n",
    "    \"feature_fraction\": 0.8,\n",
    "    \"bagging_fraction\": 0.8,\n",
    "    \"bagging_freq\": 1,\n",
    "    \"n_estimators\": 4000,\n",
    "    \"early_stopping_rounds\": 300,\n",
    "    \"tweedie_variance_power\": 1.4,   # try 1.2-1.6 if you want\n",
    "    \"target\": \"session_value\",\n",
    "    \"time_col\": \"event_time\",\n",
    "    \"key_col\": \"user_session\",\n",
    "}\n",
    "\n",
    "def set_seed(seed=42):\n",
    "    import random\n",
    "    random.seed(seed)\n",
    "    np.random.seed(seed)\n",
    "\n",
    "set_seed(CFG[\"seed\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "aba29675",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:18.460121Z",
     "iopub.status.busy": "2025-08-27T07:10:18.459489Z",
     "iopub.status.idle": "2025-08-27T07:10:20.228861Z",
     "shell.execute_reply": "2025-08-27T07:10:20.227970Z"
    },
    "papermill": {
     "duration": 1.775324,
     "end_time": "2025-08-27T07:10:20.230308",
     "exception": false,
     "start_time": "2025-08-27T07:10:18.454984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(141219, 7) (62951, 6)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(                 event_time event_type   product_id category_id      user_id  \\\n",
       " 0 2025-06-19 10:23:07+00:00   ADD_CART  PROD_011223   CAT_00054  USER_097562   \n",
       " 1 2025-06-07 21:34:45+00:00   ADD_CART  PROD_005519   CAT_00144  USER_006535   \n",
       " 2 2025-06-21 21:29:09+00:00   ADD_CART  PROD_000577   CAT_00273  USER_047199   \n",
       " \n",
       "      user_session  session_value  \n",
       " 0  SESSION_158779          90.29  \n",
       " 1  SESSION_029987          16.39  \n",
       " 2  SESSION_022134          64.27  ,\n",
       "                  event_time event_type   product_id category_id      user_id  \\\n",
       " 0 2025-06-28 10:09:58+00:00   ADD_CART  PROD_015000   CAT_00019  USER_109759   \n",
       " 1 2025-06-25 11:57:50+00:00   ADD_CART  PROD_023887   CAT_00010  USER_010614   \n",
       " 2 2025-06-30 14:34:20+00:00   ADD_CART  PROD_022673   CAT_00090  USER_041338   \n",
       " \n",
       "      user_session  \n",
       " 0  SESSION_164059  \n",
       " 1  SESSION_109583  \n",
       " 2  SESSION_171382  ,\n",
       "      user_session  session_value\n",
       " 0  SESSION_164059            0.0\n",
       " 1  SESSION_109583            0.0\n",
       " 2  SESSION_171382            0.0)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# =============================\n",
    "# Read train / test / sample_submission\n",
    "# =============================\n",
    "parse_dates = [CFG[\"time_col\"]]\n",
    "train_df = pd.read_csv(\"/kaggle/input/datathon-2025/train.csv\", parse_dates=parse_dates)\n",
    "test_df  = pd.read_csv(\"/kaggle/input/datathon-2025/test.csv\",  parse_dates=parse_dates)\n",
    "sub_df   = pd.read_csv(\"/kaggle/input/datathon-2025/sample_submission.csv\")\n",
    "\n",
    "print(train_df.shape, test_df.shape)\n",
    "train_df.head(3), test_df.head(3), sub_df.head(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a3e32d47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:20.239016Z",
     "iopub.status.busy": "2025-08-27T07:10:20.238699Z",
     "iopub.status.idle": "2025-08-27T07:10:20.278406Z",
     "shell.execute_reply": "2025-08-27T07:10:20.277538Z"
    },
    "papermill": {
     "duration": 0.045874,
     "end_time": "2025-08-27T07:10:20.279907",
     "exception": false,
     "start_time": "2025-08-27T07:10:20.234033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train time range: 2025-06-01 00:00:24+00:00 → 2025-06-21 23:59:52+00:00\n",
      "Unique sessions: 70736 30789\n"
     ]
    }
   ],
   "source": [
    "assert CFG[\"target\"] in train_df.columns, \"Target column not found!\"\n",
    "assert CFG[\"key_col\"] in train_df.columns and CFG[\"key_col\"] in test_df.columns, \"Session key missing!\"\n",
    "print(\"Train time range:\", train_df[CFG[\"time_col\"]].min(), \"→\", train_df[CFG[\"time_col\"]].max())\n",
    "print(\"Unique sessions:\", train_df[\"user_session\"].nunique(), test_df[\"user_session\"].nunique())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e90d6284",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:20.289259Z",
     "iopub.status.busy": "2025-08-27T07:10:20.288622Z",
     "iopub.status.idle": "2025-08-27T07:10:20.303567Z",
     "shell.execute_reply": "2025-08-27T07:10:20.302767Z"
    },
    "papermill": {
     "duration": 0.02103,
     "end_time": "2025-08-27T07:10:20.304845",
     "exception": false,
     "start_time": "2025-08-27T07:10:20.283815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# =============================\n",
    "# Build per-session features (no leakage)\n",
    "# =============================\n",
    "def build_session_features(events: pd.DataFrame) -> pd.DataFrame:\n",
    "    E = events.sort_values([CFG[\"key_col\"], CFG[\"time_col\"]]).copy()\n",
    "    g = E.groupby(CFG[\"key_col\"])\n",
    "\n",
    "    # Basic counts per event_type\n",
    "    counts = E.pivot_table(index=CFG[\"key_col\"], columns=\"event_type\",\n",
    "                           values=\"product_id\", aggfunc=\"count\", fill_value=0)\n",
    "    counts.columns = [f\"cnt_{c.lower()}\" for c in counts.columns]\n",
    "\n",
    "    # First / last record per session\n",
    "    first = g.nth(0)\n",
    "    last  = g.nth(-1)\n",
    "\n",
    "    # Duration & size\n",
    "    duration = (last[CFG[\"time_col\"]].values - first[CFG[\"time_col\"]].values).astype(\"timedelta64[s]\").astype(float)\n",
    "\n",
    "    sess = pd.DataFrame(index=counts.index)\n",
    "    sess[\"session_start\"] = first[CFG[\"time_col\"]].values\n",
    "    sess[\"user_id\"] = first[\"user_id\"].values\n",
    "    sess = sess.join(counts)\n",
    "    sess[\"n_events\"] = g.size()\n",
    "    sess[\"nunique_product\"]  = g[\"product_id\"].nunique()\n",
    "    sess[\"nunique_category\"] = g[\"category_id\"].nunique()\n",
    "    sess[\"duration_sec\"] = duration\n",
    "    sess[\"events_per_min\"] = sess[\"n_events\"] / (sess[\"duration_sec\"]/60.0).replace(0, np.nan)\n",
    "    sess[\"is_single_event\"] = (sess[\"n_events\"]==1).astype(int)\n",
    "\n",
    "    # First/Last event type\n",
    "    sess[\"first_event_type\"] = first[\"event_type\"].values\n",
    "    sess[\"last_event_type\"]  = last[\"event_type\"].values\n",
    "\n",
    "    # Transitions (VIEW→ADD, ADD→BUY, etc.)\n",
    "    E[\"_prev_evt\"] = g[\"event_type\"].shift(1)\n",
    "    for a,b in [(\"VIEW\",\"ADD_CART\"), (\"ADD_CART\",\"BUY\"), (\"ADD_CART\",\"REMOVE_CART\"), (\"VIEW\",\"BUY\")]:\n",
    "        key = f\"trans_{a.lower()}__{b.lower()}\"\n",
    "        sess[key] = (((E[\"event_type\"]==b) & (E[\"_prev_evt\"]==a))\n",
    "                     .groupby(E[CFG[\"key_col\"]]).sum()\n",
    "                     .reindex(sess.index).fillna(0).astype(int))\n",
    "\n",
    "    # Buy timing\n",
    "    E[\"_idx\"] = g.cumcount()\n",
    "    first_buy_idx = (E.loc[E[\"event_type\"]==\"BUY\"]\n",
    "                       .groupby(CFG[\"key_col\"])[\"_idx\"].min()\n",
    "                       .reindex(sess.index).fillna(-1).astype(int))\n",
    "    sess[\"first_buy_idx\"] = first_buy_idx\n",
    "\n",
    "    # \"Main\" category/product (mode by count, tie→smallest id)\n",
    "    main_cat = (E.groupby([CFG[\"key_col\"],\"category_id\"]).size()\n",
    "                  .reset_index(name=\"cnt\")\n",
    "                  .sort_values([CFG[\"key_col\"],\"cnt\",\"category_id\"], ascending=[True,False,True])\n",
    "                  .drop_duplicates(CFG[\"key_col\"]).set_index(CFG[\"key_col\"])[\"category_id\"])\n",
    "    main_prod = (E.groupby([CFG[\"key_col\"],\"product_id\"]).size()\n",
    "                  .reset_index(name=\"cnt\")\n",
    "                  .sort_values([CFG[\"key_col\"],\"cnt\",\"product_id\"], ascending=[True,False,True])\n",
    "                  .drop_duplicates(CFG[\"key_col\"]).set_index(CFG[\"key_col\"])[\"product_id\"])\n",
    "    sess[\"main_category_id\"] = main_cat.reindex(sess.index).values\n",
    "    sess[\"main_product_id\"]  = main_prod.reindex(sess.index).values\n",
    "\n",
    "    # Simple ratios\n",
    "    def safe_ratio(a,b): return a / b.replace(0, np.nan)\n",
    "    cols = sess.columns\n",
    "    if \"cnt_add_cart\" in cols and \"cnt_view\" in cols:\n",
    "        sess[\"ratio_add_to_view\"] = safe_ratio(sess[\"cnt_add_cart\"], sess[\"cnt_view\"])\n",
    "    if \"cnt_remove_cart\" in cols and \"cnt_add_cart\" in cols:\n",
    "        sess[\"ratio_remove_to_add\"] = safe_ratio(sess[\"cnt_remove_cart\"], sess[\"cnt_add_cart\"])\n",
    "    if \"cnt_buy\" in cols and \"n_events\" in cols:\n",
    "        sess[\"ratio_buy_to_events\"] = safe_ratio(sess[\"cnt_buy\"], sess[\"n_events\"])\n",
    "\n",
    "    # Calendar\n",
    "    s = pd.to_datetime(sess[\"session_start\"])\n",
    "    sess[\"hour\"] = s.dt.hour\n",
    "    sess[\"dow\"]  = s.dt.dayofweek\n",
    "    sess[\"is_weekend\"] = sess[\"dow\"].isin([5,6]).astype(int)\n",
    "\n",
    "    # One-hot minimal\n",
    "    sess = pd.get_dummies(sess, columns=[\"first_event_type\",\"last_event_type\"], drop_first=False)\n",
    "\n",
    "    return sess.reset_index().rename(columns={\"index\": CFG[\"key_col\"]})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "99fa99c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:20.313374Z",
     "iopub.status.busy": "2025-08-27T07:10:20.313030Z",
     "iopub.status.idle": "2025-08-27T07:10:20.318912Z",
     "shell.execute_reply": "2025-08-27T07:10:20.318250Z"
    },
    "papermill": {
     "duration": 0.011539,
     "end_time": "2025-08-27T07:10:20.320194",
     "exception": false,
     "start_time": "2025-08-27T07:10:20.308655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# =============================\n",
    "# Rolling day folds: train ≤ day d, validate on day d+1\n",
    "# =============================\n",
    "def rolling_day_folds(sessions_df, n_folds=6, gap=0, min_train_days=7):\n",
    "    d = sessions_df.copy()\n",
    "    d[\"day\"] = pd.to_datetime(d[\"session_start\"]).dt.date\n",
    "    days = sorted(d[\"day\"].unique())\n",
    "    folds = []\n",
    "    for i in range(min_train_days, len(days)-1):\n",
    "        tr_end = i - 1 - gap\n",
    "        if tr_end < 0: \n",
    "            continue\n",
    "        tr_days = set(days[:tr_end+1])\n",
    "        va_day  = days[i]\n",
    "        tr_idx = d.index[d[\"day\"].isin(tr_days)].to_numpy()\n",
    "        va_idx = d.index[d[\"day\"]==va_day].to_numpy()\n",
    "        folds.append((tr_idx, va_idx))\n",
    "        if len(folds) >= n_folds:\n",
    "            break\n",
    "    return folds\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a6e227ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:20.328693Z",
     "iopub.status.busy": "2025-08-27T07:10:20.328416Z",
     "iopub.status.idle": "2025-08-27T07:10:20.336989Z",
     "shell.execute_reply": "2025-08-27T07:10:20.336168Z"
    },
    "papermill": {
     "duration": 0.014548,
     "end_time": "2025-08-27T07:10:20.338484",
     "exception": false,
     "start_time": "2025-08-27T07:10:20.323936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# =============================\n",
    "# Time-safe impact encodings (no leakage)\n",
    "#   - For train: expanding mean per key (previous-only)\n",
    "#   - For val/test: map mean from train fold\n",
    "# =============================\n",
    "def expanding_mean_for_train(train_df, key, y_col, time_col=\"session_start\"):\n",
    "    df = train_df[[key, y_col, time_col]].sort_values(time_col).copy()\n",
    "    grp = df.groupby(key)\n",
    "    csum = grp[y_col].cumsum() - df[y_col]\n",
    "    ccnt = grp.cumcount()\n",
    "    imp = csum / ccnt.replace(0, np.nan)\n",
    "    return imp.values  # aligned with df order\n",
    "\n",
    "def make_fold_impacts(train_sess, val_sess, y_tr, y_val, keys, global_mean=None):\n",
    "    \"\"\"\n",
    "    Returns: X_tr_imp (DataFrame), X_val_imp (DataFrame), dict_of_means (for test mapping)\n",
    "    \"\"\"\n",
    "    tr = train_sess.copy()\n",
    "    va = val_sess.copy()\n",
    "    tr[\"y\"] = y_tr\n",
    "    va[\"y\"] = y_val\n",
    "    if global_mean is None:\n",
    "        global_mean = float(np.mean(y_tr))\n",
    "\n",
    "    X_tr_imp = pd.DataFrame(index=tr.index)\n",
    "    X_va_imp = pd.DataFrame(index=va.index)\n",
    "    dict_means = {}\n",
    "\n",
    "    for key in keys:\n",
    "        # training: expanding previous-only mean per key\n",
    "        imp_tr = expanding_mean_for_train(tr, key, \"y\", time_col=\"session_start\")\n",
    "        colname = f\"imp_{key}\"\n",
    "        X_tr_imp[colname] = imp_tr\n",
    "        # validation: map train means\n",
    "        means = tr.groupby(key)[\"y\"].mean()\n",
    "        dict_means[key] = means\n",
    "        X_va_imp[colname] = va[key].map(means)\n",
    "        # fill na with global mean\n",
    "        X_tr_imp[colname] = X_tr_imp[colname].fillna(global_mean)\n",
    "        X_va_imp[colname] = X_va_imp[colname].fillna(global_mean)\n",
    "\n",
    "    return X_tr_imp, X_va_imp, dict_means, global_mean\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3b8d93e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:20.347381Z",
     "iopub.status.busy": "2025-08-27T07:10:20.346699Z",
     "iopub.status.idle": "2025-08-27T07:10:22.919148Z",
     "shell.execute_reply": "2025-08-27T07:10:22.918285Z"
    },
    "papermill": {
     "duration": 2.578339,
     "end_time": "2025-08-27T07:10:22.920719",
     "exception": false,
     "start_time": "2025-08-27T07:10:20.342380",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(70736, 34) (30789, 34) (70736,)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_session</th>\n",
       "      <th>session_start</th>\n",
       "      <th>user_id</th>\n",
       "      <th>cnt_add_cart</th>\n",
       "      <th>cnt_buy</th>\n",
       "      <th>cnt_remove_cart</th>\n",
       "      <th>cnt_view</th>\n",
       "      <th>n_events</th>\n",
       "      <th>nunique_product</th>\n",
       "      <th>nunique_category</th>\n",
       "      <th>...</th>\n",
       "      <th>dow</th>\n",
       "      <th>is_weekend</th>\n",
       "      <th>first_event_type_ADD_CART</th>\n",
       "      <th>first_event_type_BUY</th>\n",
       "      <th>first_event_type_REMOVE_CART</th>\n",
       "      <th>first_event_type_VIEW</th>\n",
       "      <th>last_event_type_ADD_CART</th>\n",
       "      <th>last_event_type_BUY</th>\n",
       "      <th>last_event_type_REMOVE_CART</th>\n",
       "      <th>last_event_type_VIEW</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SESSION_000000</td>\n",
       "      <td>2025-06-02 12:14:45</td>\n",
       "      <td>USER_060383</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>28</td>\n",
       "      <td>24</td>\n",
       "      <td>20</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SESSION_000001</td>\n",
       "      <td>2025-06-02 03:55:52</td>\n",
       "      <td>USER_023172</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SESSION_000004</td>\n",
       "      <td>2025-06-04 10:27:59</td>\n",
       "      <td>USER_065806</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_session       session_start      user_id  cnt_add_cart  cnt_buy  \\\n",
       "0  SESSION_000000 2025-06-02 12:14:45  USER_060383            20        0   \n",
       "1  SESSION_000001 2025-06-02 03:55:52  USER_023172             2        1   \n",
       "2  SESSION_000004 2025-06-04 10:27:59  USER_065806             0        0   \n",
       "\n",
       "   cnt_remove_cart  cnt_view  n_events  nunique_product  nunique_category  \\\n",
       "0                8         0        28               24                20   \n",
       "1                2         1         6                5                 5   \n",
       "2                0         1         1                1                 1   \n",
       "\n",
       "   ...  dow  is_weekend  first_event_type_ADD_CART  first_event_type_BUY  \\\n",
       "0  ...    0           0                       True                 False   \n",
       "1  ...    0           0                       True                 False   \n",
       "2  ...    2           0                      False                 False   \n",
       "\n",
       "   first_event_type_REMOVE_CART  first_event_type_VIEW  \\\n",
       "0                         False                  False   \n",
       "1                         False                  False   \n",
       "2                         False                   True   \n",
       "\n",
       "   last_event_type_ADD_CART  last_event_type_BUY last_event_type_REMOVE_CART  \\\n",
       "0                      True                False                       False   \n",
       "1                     False                False                       False   \n",
       "2                     False                False                       False   \n",
       "\n",
       "  last_event_type_VIEW  \n",
       "0                False  \n",
       "1                 True  \n",
       "2                 True  \n",
       "\n",
       "[3 rows x 34 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# =============================\n",
    "# Build per-session tables for train and test\n",
    "# =============================\n",
    "train_sess = build_session_features(train_df)\n",
    "test_sess  = build_session_features(test_df)\n",
    "\n",
    "# Target per session (constant inside session)\n",
    "y = (train_df.groupby(CFG[\"key_col\"])[CFG[\"target\"]]\n",
    "                .max()\n",
    "                .reindex(train_sess[CFG[\"key_col\"]])\n",
    "                .values)\n",
    "\n",
    "print(train_sess.shape, test_sess.shape, y.shape)\n",
    "train_sess.head(3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5e24043f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:22.931472Z",
     "iopub.status.busy": "2025-08-27T07:10:22.930741Z",
     "iopub.status.idle": "2025-08-27T07:10:22.960023Z",
     "shell.execute_reply": "2025-08-27T07:10:22.959033Z"
    },
    "papermill": {
     "duration": 0.036364,
     "end_time": "2025-08-27T07:10:22.961666",
     "exception": false,
     "start_time": "2025-08-27T07:10:22.925302",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Base feature count: 21\n"
     ]
    }
   ],
   "source": [
    "# =============================\n",
    "# Select base numeric features (exclude IDs/time)\n",
    "# =============================\n",
    "drop_cols = [CFG[\"key_col\"], \"user_id\", \"session_start\", \"main_category_id\", \"main_product_id\"]\n",
    "BASE_FEATS = [c for c in train_sess.columns if c not in drop_cols]\n",
    "\n",
    "# Align train/test columns from base FE\n",
    "X_base = train_sess[BASE_FEATS].copy()\n",
    "X_base_test = test_sess[BASE_FEATS].reindex(columns=X_base.columns).copy()\n",
    "\n",
    "# Keep only numeric\n",
    "X_base = X_base.select_dtypes(include=[np.number]).astype(float)\n",
    "X_base_test = X_base_test.select_dtypes(include=[np.number]).astype(float)\n",
    "\n",
    "print(\"Base feature count:\", X_base.shape[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4a2da073",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:22.971582Z",
     "iopub.status.busy": "2025-08-27T07:10:22.971275Z",
     "iopub.status.idle": "2025-08-27T07:10:23.199178Z",
     "shell.execute_reply": "2025-08-27T07:10:23.198217Z"
    },
    "papermill": {
     "duration": 0.234702,
     "end_time": "2025-08-27T07:10:23.200814",
     "exception": false,
     "start_time": "2025-08-27T07:10:22.966112",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Num folds: 6\n"
     ]
    }
   ],
   "source": [
    "# =============================\n",
    "# Build rolling folds\n",
    "# =============================\n",
    "folds = rolling_day_folds(train_sess, n_folds=CFG[\"n_folds\"], gap=CFG[\"gap_days\"], min_train_days=CFG[\"min_train_days\"])\n",
    "print(\"Num folds:\", len(folds))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "dd04d341",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:23.211772Z",
     "iopub.status.busy": "2025-08-27T07:10:23.211287Z",
     "iopub.status.idle": "2025-08-27T07:10:55.747777Z",
     "shell.execute_reply": "2025-08-27T07:10:55.746948Z"
    },
    "papermill": {
     "duration": 32.547423,
     "end_time": "2025-08-27T07:10:55.753394",
     "exception": false,
     "start_time": "2025-08-27T07:10:23.205971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== FOLD 1 =====\n",
      "Fold 1 RMSE  log1p: 18.4800 | tweedie: 18.5493\n",
      "\n",
      "===== FOLD 2 =====\n",
      "Fold 2 RMSE  log1p: 16.3969 | tweedie: 15.2273\n",
      "\n",
      "===== FOLD 3 =====\n",
      "Fold 3 RMSE  log1p: 16.6910 | tweedie: 15.4010\n",
      "\n",
      "===== FOLD 4 =====\n",
      "Fold 4 RMSE  log1p: 20.1956 | tweedie: 18.8214\n",
      "\n",
      "===== FOLD 5 =====\n",
      "Fold 5 RMSE  log1p: 15.5445 | tweedie: 15.2109\n",
      "\n",
      "===== FOLD 6 =====\n",
      "Fold 6 RMSE  log1p: 18.4953 | tweedie: 16.3086\n"
     ]
    }
   ],
   "source": [
    "# =============================\n",
    "# Train two LGBM models per fold + blend\n",
    "# =============================\n",
    "params_base = dict(\n",
    "    learning_rate=CFG[\"learning_rate\"],\n",
    "    num_leaves=CFG[\"num_leaves\"],\n",
    "    min_data_in_leaf=CFG[\"min_data_in_leaf\"],\n",
    "    feature_fraction=CFG[\"feature_fraction\"],\n",
    "    bagging_fraction=CFG[\"bagging_fraction\"],\n",
    "    bagging_freq=CFG[\"bagging_freq\"],\n",
    "    n_estimators=CFG[\"n_estimators\"],\n",
    "    verbose=-1\n",
    ")\n",
    "\n",
    "oof_1 = np.zeros(len(X_base))\n",
    "oof_2 = np.zeros(len(X_base))\n",
    "pred_1 = np.zeros(len(X_base_test))\n",
    "pred_2 = np.zeros(len(X_base_test))\n",
    "\n",
    "fi_1 = pd.Series(0.0, index=X_base.columns)\n",
    "fi_2 = pd.Series(0.0, index=X_base.columns)\n",
    "\n",
    "# We will add impact columns per fold (user_id, main_category_id, main_product_id)\n",
    "impact_keys = [\"user_id\", \"main_category_id\", \"main_product_id\"]\n",
    "\n",
    "for fold, (tr_idx, va_idx) in enumerate(folds, 1):\n",
    "    print(f\"\\n===== FOLD {fold} =====\")\n",
    "    tr_sess = train_sess.iloc[tr_idx].reset_index(drop=True)\n",
    "    va_sess = train_sess.iloc[va_idx].reset_index(drop=True)\n",
    "\n",
    "    X_tr_base = X_base.iloc[tr_idx].reset_index(drop=True)\n",
    "    X_va_base = X_base.iloc[va_idx].reset_index(drop=True)\n",
    "\n",
    "    y_tr = y[tr_idx]\n",
    "    y_va = y[va_idx]\n",
    "\n",
    "    # fold-specific impact encodings (time-safe)\n",
    "    X_tr_imp, X_va_imp, dict_means, global_mean = make_fold_impacts(\n",
    "        tr_sess, va_sess, y_tr, y_va,\n",
    "        keys=impact_keys, \n",
    "        global_mean=float(np.mean(y_tr))\n",
    "    )\n",
    "\n",
    "    # merge base + impacts\n",
    "    X_tr = pd.concat([X_tr_base, X_tr_imp], axis=1)\n",
    "    X_va = pd.concat([X_va_base, X_va_imp], axis=1)\n",
    "\n",
    "    # Build test impacts using this fold's train means\n",
    "    X_te = X_base_test.copy()\n",
    "    for key, means in dict_means.items():\n",
    "        col = f\"imp_{key}\"\n",
    "        X_te[col] = test_sess[key].map(means).fillna(global_mean)\n",
    "    # keep columns aligned\n",
    "    X_tr = X_tr.select_dtypes(include=[np.number]).fillna(0.0)\n",
    "    X_va = X_va.select_dtypes(include=[np.number]).fillna(0.0)\n",
    "    X_te = X_te.reindex(columns=X_tr.columns).fillna(0.0)\n",
    "\n",
    "    # A) log1p-MSE model\n",
    "    m1 = lgb.LGBMRegressor(objective=\"regression\", metric=\"rmse\", **params_base)\n",
    "    m1.fit(\n",
    "        X_tr, np.log1p(y_tr),\n",
    "        eval_set=[(X_va, np.log1p(y_va))],\n",
    "        callbacks=[lgb.early_stopping(CFG[\"early_stopping_rounds\"], verbose=False)]\n",
    "    )\n",
    "    oof_1[va_idx] = np.expm1(m1.predict(X_va))\n",
    "    pred_1 += np.expm1(m1.predict(X_te)) / len(folds)\n",
    "    fi_1 = fi_1.add(pd.Series(m1.feature_importances_, index=X_tr.columns), fill_value=0)\n",
    "\n",
    "    # B) Tweedie model\n",
    "    m2 = lgb.LGBMRegressor(objective=\"tweedie\", tweedie_variance_power=CFG[\"tweedie_variance_power\"], metric=\"rmse\", **params_base)\n",
    "    m2.fit(\n",
    "        X_tr, y_tr,\n",
    "        eval_set=[(X_va, y_va)],\n",
    "        callbacks=[lgb.early_stopping(CFG[\"early_stopping_rounds\"], verbose=False)]\n",
    "    )\n",
    "    oof_2[va_idx] = m2.predict(X_va)\n",
    "    pred_2 += m2.predict(X_te) / len(folds)\n",
    "    fi_2 = fi_2.add(pd.Series(m2.feature_importances_, index=X_tr.columns), fill_value=0)\n",
    "\n",
    "    rmse1 = mean_squared_error(y_va, oof_1[va_idx], squared=False)\n",
    "    rmse2 = mean_squared_error(y_va, oof_2[va_idx], squared=False)\n",
    "    print(f\"Fold {fold} RMSE  log1p: {rmse1:.4f} | tweedie: {rmse2:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3f7c6666",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:55.763206Z",
     "iopub.status.busy": "2025-08-27T07:10:55.762882Z",
     "iopub.status.idle": "2025-08-27T07:10:55.774753Z",
     "shell.execute_reply": "2025-08-27T07:10:55.773875Z"
    },
    "papermill": {
     "duration": 0.018502,
     "end_time": "2025-08-27T07:10:55.776188",
     "exception": false,
     "start_time": "2025-08-27T07:10:55.757686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OOF RMSE — log1p:   55.982941711045406\n",
      "OOF RMSE — tweedie: 55.902738545276485\n",
      "OOF RMSE — blend:   53.07317543812378\n"
     ]
    }
   ],
   "source": [
    "# =============================\n",
    "# Blend & clip\n",
    "# =============================\n",
    "oof_blend = 0.5 * oof_1 + 0.5 * oof_2\n",
    "pred_blend = 0.5 * pred_1 + 0.5 * pred_2\n",
    "\n",
    "low  = float(np.min(y))\n",
    "high = float(np.quantile(y, 0.995) * 1.2)\n",
    "oof_blend = np.clip(oof_blend, low, high)\n",
    "pred_blend = np.clip(pred_blend, low, high)\n",
    "\n",
    "print(\"OOF RMSE — log1p:  \", mean_squared_error(y, oof_1, squared=False))\n",
    "print(\"OOF RMSE — tweedie:\", mean_squared_error(y, oof_2, squared=False))\n",
    "print(\"OOF RMSE — blend:  \", mean_squared_error(y, oof_blend, squared=False))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fcd424fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:55.786315Z",
     "iopub.status.busy": "2025-08-27T07:10:55.785988Z",
     "iopub.status.idle": "2025-08-27T07:10:55.865661Z",
     "shell.execute_reply": "2025-08-27T07:10:55.864862Z"
    },
    "papermill": {
     "duration": 0.086267,
     "end_time": "2025-08-27T07:10:55.866996",
     "exception": false,
     "start_time": "2025-08-27T07:10:55.780729",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(         date       rmse\n",
       " 0  2025-06-01  82.339341\n",
       " 1  2025-06-02  60.308730\n",
       " 2  2025-06-03  63.872943\n",
       " 3  2025-06-04  60.281582\n",
       " 4  2025-06-05  59.145063\n",
       " 5  2025-06-06  51.054570\n",
       " 6  2025-06-07  56.274433\n",
       " 7  2025-06-08  18.289280\n",
       " 8  2025-06-09  16.181979\n",
       " 9  2025-06-10  16.192148,\n",
       "             rmse\n",
       " count  21.000000\n",
       " mean   48.314116\n",
       " std    20.998099\n",
       " min    16.181979\n",
       " 25%    20.469957\n",
       " 50%    56.274433\n",
       " 75%    60.308730\n",
       " max    82.339341)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tmp = train_sess.copy()\n",
    "tmp[\"y\"] = y\n",
    "tmp[\"oof\"] = oof_blend\n",
    "by_day = tmp.groupby(pd.to_datetime(tmp[\"session_start\"]).dt.date).apply(\n",
    "    lambda d: mean_squared_error(d[\"y\"], d[\"oof\"], squared=False)\n",
    ").to_frame(\"rmse\").reset_index().rename(columns={\"session_start\":\"date\"})\n",
    "by_day.head(10), by_day.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "05f1ddac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:55.877510Z",
     "iopub.status.busy": "2025-08-27T07:10:55.877227Z",
     "iopub.status.idle": "2025-08-27T07:10:55.893521Z",
     "shell.execute_reply": "2025-08-27T07:10:55.892687Z"
    },
    "papermill": {
     "duration": 0.023043,
     "end_time": "2025-08-27T07:10:55.894805",
     "exception": false,
     "start_time": "2025-08-27T07:10:55.871762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 30 — log1p model\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>hour</th>\n",
       "      <td>0.157244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>imp_main_category_id</th>\n",
       "      <td>0.135032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dow</th>\n",
       "      <td>0.108745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>imp_main_product_id</th>\n",
       "      <td>0.105257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration_sec</th>\n",
       "      <td>0.075064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>events_per_min</th>\n",
       "      <td>0.073083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>imp_user_id</th>\n",
       "      <td>0.046713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nunique_category</th>\n",
       "      <td>0.040295</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nunique_product</th>\n",
       "      <td>0.038230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnt_add_cart</th>\n",
       "      <td>0.037588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnt_remove_cart</th>\n",
       "      <td>0.032063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnt_view</th>\n",
       "      <td>0.029384</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n_events</th>\n",
       "      <td>0.028296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnt_buy</th>\n",
       "      <td>0.027375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ratio_remove_to_add</th>\n",
       "      <td>0.020482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ratio_add_to_view</th>\n",
       "      <td>0.017134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ratio_buy_to_events</th>\n",
       "      <td>0.008902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_weekend</th>\n",
       "      <td>0.007311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>first_buy_idx</th>\n",
       "      <td>0.003990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trans_add_cart__remove_cart</th>\n",
       "      <td>0.003962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trans_view__add_cart</th>\n",
       "      <td>0.002065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_single_event</th>\n",
       "      <td>0.000726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trans_add_cart__buy</th>\n",
       "      <td>0.000558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trans_view__buy</th>\n",
       "      <td>0.000502</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             importance\n",
       "hour                           0.157244\n",
       "imp_main_category_id           0.135032\n",
       "dow                            0.108745\n",
       "imp_main_product_id            0.105257\n",
       "duration_sec                   0.075064\n",
       "events_per_min                 0.073083\n",
       "imp_user_id                    0.046713\n",
       "nunique_category               0.040295\n",
       "nunique_product                0.038230\n",
       "cnt_add_cart                   0.037588\n",
       "cnt_remove_cart                0.032063\n",
       "cnt_view                       0.029384\n",
       "n_events                       0.028296\n",
       "cnt_buy                        0.027375\n",
       "ratio_remove_to_add            0.020482\n",
       "ratio_add_to_view              0.017134\n",
       "ratio_buy_to_events            0.008902\n",
       "is_weekend                     0.007311\n",
       "first_buy_idx                  0.003990\n",
       "trans_add_cart__remove_cart    0.003962\n",
       "trans_view__add_cart           0.002065\n",
       "is_single_event                0.000726\n",
       "trans_add_cart__buy            0.000558\n",
       "trans_view__buy                0.000502"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 30 — tweedie model\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>imp_main_category_id</th>\n",
       "      <td>0.153226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hour</th>\n",
       "      <td>0.136068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>imp_main_product_id</th>\n",
       "      <td>0.113810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dow</th>\n",
       "      <td>0.087235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration_sec</th>\n",
       "      <td>0.083456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>events_per_min</th>\n",
       "      <td>0.080123</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>imp_user_id</th>\n",
       "      <td>0.054393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnt_add_cart</th>\n",
       "      <td>0.034916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nunique_category</th>\n",
       "      <td>0.034071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>nunique_product</th>\n",
       "      <td>0.033103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnt_remove_cart</th>\n",
       "      <td>0.031060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnt_view</th>\n",
       "      <td>0.030108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>n_events</th>\n",
       "      <td>0.026544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>cnt_buy</th>\n",
       "      <td>0.024962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ratio_add_to_view</th>\n",
       "      <td>0.019647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ratio_remove_to_add</th>\n",
       "      <td>0.019401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ratio_buy_to_events</th>\n",
       "      <td>0.011920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>first_buy_idx</th>\n",
       "      <td>0.009370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_weekend</th>\n",
       "      <td>0.005622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trans_view__add_cart</th>\n",
       "      <td>0.004132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trans_add_cart__remove_cart</th>\n",
       "      <td>0.003856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trans_view__buy</th>\n",
       "      <td>0.001459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>trans_add_cart__buy</th>\n",
       "      <td>0.001014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>is_single_event</th>\n",
       "      <td>0.000507</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             importance\n",
       "imp_main_category_id           0.153226\n",
       "hour                           0.136068\n",
       "imp_main_product_id            0.113810\n",
       "dow                            0.087235\n",
       "duration_sec                   0.083456\n",
       "events_per_min                 0.080123\n",
       "imp_user_id                    0.054393\n",
       "cnt_add_cart                   0.034916\n",
       "nunique_category               0.034071\n",
       "nunique_product                0.033103\n",
       "cnt_remove_cart                0.031060\n",
       "cnt_view                       0.030108\n",
       "n_events                       0.026544\n",
       "cnt_buy                        0.024962\n",
       "ratio_add_to_view              0.019647\n",
       "ratio_remove_to_add            0.019401\n",
       "ratio_buy_to_events            0.011920\n",
       "first_buy_idx                  0.009370\n",
       "is_weekend                     0.005622\n",
       "trans_view__add_cart           0.004132\n",
       "trans_add_cart__remove_cart    0.003856\n",
       "trans_view__buy                0.001459\n",
       "trans_add_cart__buy            0.001014\n",
       "is_single_event                0.000507"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fi1 = (fi_1 / fi_1.sum()).sort_values(ascending=False)\n",
    "fi2 = (fi_2 / fi_2.sum()).sort_values(ascending=False)\n",
    "\n",
    "print(\"Top 30 — log1p model\")\n",
    "display(fi1.head(30).to_frame(\"importance\"))\n",
    "\n",
    "print(\"Top 30 — tweedie model\")\n",
    "display(fi2.head(30).to_frame(\"importance\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "015ded0c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:55.905922Z",
     "iopub.status.busy": "2025-08-27T07:10:55.905641Z",
     "iopub.status.idle": "2025-08-27T07:10:56.026861Z",
     "shell.execute_reply": "2025-08-27T07:10:56.026179Z"
    },
    "papermill": {
     "duration": 0.128319,
     "end_time": "2025-08-27T07:10:56.028213",
     "exception": false,
     "start_time": "2025-08-27T07:10:55.899894",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved: submission_v2_blend.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_session</th>\n",
       "      <th>session_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>SESSION_164059</td>\n",
       "      <td>206.828195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>SESSION_109583</td>\n",
       "      <td>51.374268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>SESSION_171382</td>\n",
       "      <td>41.715720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>SESSION_137110</td>\n",
       "      <td>27.609166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>SESSION_146503</td>\n",
       "      <td>179.136243</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_session  session_value\n",
       "0  SESSION_164059     206.828195\n",
       "1  SESSION_109583      51.374268\n",
       "2  SESSION_171382      41.715720\n",
       "3  SESSION_137110      27.609166\n",
       "4  SESSION_146503     179.136243"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# =============================\n",
    "# Submission\n",
    "# =============================\n",
    "key = CFG[\"key_col\"]\n",
    "pred_map = dict(zip(test_sess[key], pred_blend))\n",
    "out = sub_df.copy()\n",
    "out[CFG[\"target\"]] = out[key].map(pred_map).fillna(low).astype(float)\n",
    "\n",
    "save_name = \"submission_v2_blend.csv\"\n",
    "out.to_csv(save_name, index=False)\n",
    "print(\"Saved:\", save_name)\n",
    "out.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1636db6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-27T07:10:56.040637Z",
     "iopub.status.busy": "2025-08-27T07:10:56.039449Z",
     "iopub.status.idle": "2025-08-27T07:10:56.508992Z",
     "shell.execute_reply": "2025-08-27T07:10:56.508092Z"
    },
    "papermill": {
     "duration": 0.476952,
     "end_time": "2025-08-27T07:10:56.510408",
     "exception": false,
     "start_time": "2025-08-27T07:10:56.033456",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saved: oof_predictions.csv\n"
     ]
    }
   ],
   "source": [
    "oof_df = train_sess[[CFG[\"key_col\"], \"session_start\"]].copy()\n",
    "oof_df[\"y\"] = y\n",
    "oof_df[\"oof_log1p\"] = oof_1\n",
    "oof_df[\"oof_tweedie\"] = oof_2\n",
    "oof_df[\"oof_blend\"] = oof_blend\n",
    "oof_df.to_csv(\"oof_predictions.csv\", index=False)\n",
    "print(\"Saved: oof_predictions.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a7e3b89",
   "metadata": {
    "papermill": {
     "duration": 0.004934,
     "end_time": "2025-08-27T07:10:56.520638",
     "exception": false,
     "start_time": "2025-08-27T07:10:56.515704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13341508,
     "sourceId": 112016,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 53.414194,
   "end_time": "2025-08-27T07:10:57.447102",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-27T07:10:04.032908",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
